package info.leonenko.i18n.rbnf

import kotlin.test.Test
import kotlin.test.assertEquals

class RBNFEs_419Test {
    @Test
    fun spelloutOrdinalFeminine() {
        val fmt = RBNFEs_419().spelloutOrdinalFeminine
// nonsense assertEquals("menos primera", fmt.format(-1), "-1")
// nonsense assertEquals("cero", fmt.format(0), "0")
// nonsense assertEquals("0.2", fmt.format(0.2), "0.2")
// nonsense assertEquals("0.2", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0", fmt.format(0.02), "0.02")
// nonsense assertEquals("0", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4.8", fmt.format(4.751), "4.751")
// nonsense assertEquals("12.1", fmt.format(12.051), "12.051")
// nonsense assertEquals("13", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14", fmt.format(14.02251), "14.02251")
        assertEquals("primera", fmt.format(1), "1")
        assertEquals("segunda", fmt.format(2), "2")
        assertEquals("tercera", fmt.format(3), "3")
        assertEquals("cuarta", fmt.format(4), "4")
        assertEquals("quinta", fmt.format(5), "5")
        assertEquals("sexta", fmt.format(6), "6")
        assertEquals("séptima", fmt.format(7), "7")
        assertEquals("octava", fmt.format(8), "8")
        assertEquals("novena", fmt.format(9), "9")
        assertEquals("décima", fmt.format(10), "10")
        assertEquals("decimoprimera", fmt.format(11), "11")
        assertEquals("decimosegunda", fmt.format(12), "12")
        assertEquals("decimotercera", fmt.format(13), "13")
        assertEquals("decimocuarta", fmt.format(14), "14")
        assertEquals("decimoquinta", fmt.format(15), "15")
        assertEquals("decimosexta", fmt.format(16), "16")
        assertEquals("decimoséptima", fmt.format(17), "17")
        assertEquals("decimoctava", fmt.format(18), "18")
        assertEquals("decimonovena", fmt.format(19), "19")
        assertEquals("vigésima", fmt.format(20), "20")
        assertEquals("vigésima primera", fmt.format(21), "21")
        assertEquals("vigésima segunda", fmt.format(22), "22")
        assertEquals("vigésima tercera", fmt.format(23), "23")
        assertEquals("vigésima cuarta", fmt.format(24), "24")
        assertEquals("vigésima quinta", fmt.format(25), "25")
        assertEquals("vigésima sexta", fmt.format(26), "26")
        assertEquals("vigésima séptima", fmt.format(27), "27")
        assertEquals("vigésima octava", fmt.format(28), "28")
        assertEquals("vigésima novena", fmt.format(29), "29")
        assertEquals("trigésima", fmt.format(30), "30")
        assertEquals("trigésima primera", fmt.format(31), "31")
        assertEquals("nonagésima octava", fmt.format(98), "98")
        assertEquals("nonagésima novena", fmt.format(99), "99")
        assertEquals("centésima", fmt.format(100), "100")
        assertEquals("centésima primera", fmt.format(101), "101")
        assertEquals("centésima segunda", fmt.format(102), "102")
        assertEquals("noningentésima nonagésima octava", fmt.format(998), "998")
        assertEquals("noningentésima nonagésima novena", fmt.format(999), "999")
        assertEquals("milésima", fmt.format(1000), "1000")
        assertEquals("milésima primera", fmt.format(1001), "1001")
        assertEquals("milésima segunda", fmt.format(1002), "1002")
        assertEquals("milésima noningentésima nonagésima octava", fmt.format(1998), "1998")
        assertEquals("milésima noningentésima nonagésima novena", fmt.format(1999), "1999")
        assertEquals("dos milésima", fmt.format(2000), "2000")
        assertEquals("dos milésima primera", fmt.format(2001), "2001")
        assertEquals("dos milésima segunda", fmt.format(2002), "2002")
        assertEquals("nueve milésima noningentésima nonagésima octava", fmt.format(9998), "9998")
        assertEquals("nueve milésima noningentésima nonagésima novena", fmt.format(9999), "9999")
        assertEquals("diez milésima", fmt.format(10000), "10000")
        assertEquals("diez milésima primera", fmt.format(10001), "10001")
        assertEquals("diez milésima segunda", fmt.format(10002), "10002")
        assertEquals("cien milésima", fmt.format(100000), "100000")
        assertEquals("cien milésima primera", fmt.format(100001), "100001")
        assertEquals("cien milésima segunda", fmt.format(100002), "100002")
        assertEquals("doscientos milésima", fmt.format(200000), "200000")
        assertEquals("doscientos milésima primera", fmt.format(200001), "200001")
        assertEquals("doscientos milésima segunda", fmt.format(200002), "200002")
        assertEquals("un millonésima", fmt.format(1000000), "1000000")
        assertEquals("un millonésima primera", fmt.format(1000001), "1000001")
        assertEquals("un millonésima segunda", fmt.format(1000002), "1000002")
        assertEquals("dos millonésima", fmt.format(2000000), "2000000")
        assertEquals("dos millonésima primera", fmt.format(2000001), "2000001")
        assertEquals("dos millonésima segunda", fmt.format(2000002), "2000002")
        assertEquals("diez millonésima", fmt.format(10000000), "10000000")
        assertEquals("diez millonésima primera", fmt.format(10000001), "10000001")
        assertEquals("diez millonésima segunda", fmt.format(10000002), "10000002")
        assertEquals("veinte millonésima", fmt.format(20000000), "20000000")
        assertEquals("veinte millonésima primera", fmt.format(20000001), "20000001")
        assertEquals("veinte millonésima segunda", fmt.format(20000002), "20000002")
        assertEquals("cien millonésima", fmt.format(100000000), "100000000")
        assertEquals("cien millonésima primera", fmt.format(100000001), "100000001")
        assertEquals("cien millonésima segunda", fmt.format(100000002), "100000002")
        assertEquals("doscientos millonésima", fmt.format(200000000), "200000000")
        assertEquals("doscientos millonésima primera", fmt.format(200000001), "200000001")
        assertEquals("doscientos millonésima segunda", fmt.format(200000002), "200000002")
        assertEquals("mil millonésima", fmt.format(1000000000), "1000000000")
        assertEquals("mil millonésima primera", fmt.format(1000000001), "1000000001")
        assertEquals("mil millonésima segunda", fmt.format(1000000002), "1000000002")
        assertEquals("dos mil millonésima", fmt.format(2000000000), "2000000000")
        assertEquals("dos mil millonésima primera", fmt.format(2000000001), "2000000001")
        assertEquals("dos mil millonésima segunda", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutOrdinalFemininePlural() {
        val fmt = RBNFEs_419().spelloutOrdinalFemininePlural
// nonsense assertEquals("menos primeras", fmt.format(-1), "-1")
// nonsense assertEquals("cero", fmt.format(0), "0")
// nonsense assertEquals("0.2", fmt.format(0.2), "0.2")
// nonsense assertEquals("0.2", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0", fmt.format(0.02), "0.02")
// nonsense assertEquals("0", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4.8", fmt.format(4.751), "4.751")
// nonsense assertEquals("12.1", fmt.format(12.051), "12.051")
// nonsense assertEquals("13", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14", fmt.format(14.02251), "14.02251")
        assertEquals("primeras", fmt.format(1), "1")
        assertEquals("segundas", fmt.format(2), "2")
        assertEquals("terceras", fmt.format(3), "3")
        assertEquals("cuartas", fmt.format(4), "4")
        assertEquals("quintas", fmt.format(5), "5")
        assertEquals("sextas", fmt.format(6), "6")
        assertEquals("séptimas", fmt.format(7), "7")
        assertEquals("octavas", fmt.format(8), "8")
        assertEquals("novenas", fmt.format(9), "9")
        assertEquals("décimas", fmt.format(10), "10")
        assertEquals("decimoprimeras", fmt.format(11), "11")
        assertEquals("decimosegundas", fmt.format(12), "12")
        assertEquals("decimoterceras", fmt.format(13), "13")
        assertEquals("decimocuartas", fmt.format(14), "14")
        assertEquals("decimoquintas", fmt.format(15), "15")
        assertEquals("decimosextas", fmt.format(16), "16")
        assertEquals("decimoséptimas", fmt.format(17), "17")
        assertEquals("decimoctavas", fmt.format(18), "18")
        assertEquals("decimonovenas", fmt.format(19), "19")
        assertEquals("vigésimas", fmt.format(20), "20")
        assertEquals("vigésima primeras", fmt.format(21), "21")
        assertEquals("vigésima segundas", fmt.format(22), "22")
        assertEquals("vigésima terceras", fmt.format(23), "23")
        assertEquals("vigésima cuartas", fmt.format(24), "24")
        assertEquals("vigésima quintas", fmt.format(25), "25")
        assertEquals("vigésima sextas", fmt.format(26), "26")
        assertEquals("vigésima séptimas", fmt.format(27), "27")
        assertEquals("vigésima octavas", fmt.format(28), "28")
        assertEquals("vigésima novenas", fmt.format(29), "29")
        assertEquals("trigésimas", fmt.format(30), "30")
        assertEquals("trigésima primeras", fmt.format(31), "31")
        assertEquals("nonagésima octavas", fmt.format(98), "98")
        assertEquals("nonagésima novenas", fmt.format(99), "99")
        assertEquals("centésimas", fmt.format(100), "100")
        assertEquals("centésima primeras", fmt.format(101), "101")
        assertEquals("centésima segundas", fmt.format(102), "102")
        assertEquals("noningentésima nonagésima octavas", fmt.format(998), "998")
        assertEquals("noningentésima nonagésima novenas", fmt.format(999), "999")
        assertEquals("milésimas", fmt.format(1000), "1000")
        assertEquals("milésima primeras", fmt.format(1001), "1001")
        assertEquals("milésima segundas", fmt.format(1002), "1002")
        assertEquals("milésima noningentésima nonagésima octavas", fmt.format(1998), "1998")
        assertEquals("milésima noningentésima nonagésima novenas", fmt.format(1999), "1999")
        assertEquals("dos milésimas", fmt.format(2000), "2000")
        assertEquals("dos milésima primeras", fmt.format(2001), "2001")
        assertEquals("dos milésima segundas", fmt.format(2002), "2002")
        assertEquals("nueve milésima noningentésima nonagésima octavas", fmt.format(9998), "9998")
        assertEquals("nueve milésima noningentésima nonagésima novenas", fmt.format(9999), "9999")
        assertEquals("diez milésimas", fmt.format(10000), "10000")
        assertEquals("diez milésima primeras", fmt.format(10001), "10001")
        assertEquals("diez milésima segundas", fmt.format(10002), "10002")
        assertEquals("cien milésimas", fmt.format(100000), "100000")
        assertEquals("cien milésima primeras", fmt.format(100001), "100001")
        assertEquals("cien milésima segundas", fmt.format(100002), "100002")
        assertEquals("doscientos milésimas", fmt.format(200000), "200000")
        assertEquals("doscientos milésima primeras", fmt.format(200001), "200001")
        assertEquals("doscientos milésima segundas", fmt.format(200002), "200002")
        assertEquals("un millonésimas", fmt.format(1000000), "1000000")
        assertEquals("un millonésima primeras", fmt.format(1000001), "1000001")
        assertEquals("un millonésima segundas", fmt.format(1000002), "1000002")
        assertEquals("dos millonésimas", fmt.format(2000000), "2000000")
        assertEquals("dos millonésima primeras", fmt.format(2000001), "2000001")
        assertEquals("dos millonésima segundas", fmt.format(2000002), "2000002")
        assertEquals("diez millonésimas", fmt.format(10000000), "10000000")
        assertEquals("diez millonésima primeras", fmt.format(10000001), "10000001")
        assertEquals("diez millonésima segundas", fmt.format(10000002), "10000002")
        assertEquals("veinte millonésimas", fmt.format(20000000), "20000000")
        assertEquals("veinte millonésima primeras", fmt.format(20000001), "20000001")
        assertEquals("veinte millonésima segundas", fmt.format(20000002), "20000002")
        assertEquals("cien millonésimas", fmt.format(100000000), "100000000")
        assertEquals("cien millonésima primeras", fmt.format(100000001), "100000001")
        assertEquals("cien millonésima segundas", fmt.format(100000002), "100000002")
        assertEquals("doscientos millonésimas", fmt.format(200000000), "200000000")
        assertEquals("doscientos millonésima primeras", fmt.format(200000001), "200000001")
        assertEquals("doscientos millonésima segundas", fmt.format(200000002), "200000002")
        assertEquals("mil millonésimas", fmt.format(1000000000), "1000000000")
        assertEquals("mil millonésima primeras", fmt.format(1000000001), "1000000001")
        assertEquals("mil millonésima segundas", fmt.format(1000000002), "1000000002")
        assertEquals("dos mil millonésimas", fmt.format(2000000000), "2000000000")
        assertEquals("dos mil millonésima primeras", fmt.format(2000000001), "2000000001")
        assertEquals("dos mil millonésima segundas", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutOrdinalMasculine() {
        val fmt = RBNFEs_419().spelloutOrdinalMasculine
// nonsense assertEquals("menos primero", fmt.format(-1), "-1")
// nonsense assertEquals("cero", fmt.format(0), "0")
// nonsense assertEquals("0.2", fmt.format(0.2), "0.2")
// nonsense assertEquals("0.2", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0", fmt.format(0.02), "0.02")
// nonsense assertEquals("0", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4.8", fmt.format(4.751), "4.751")
// nonsense assertEquals("12.1", fmt.format(12.051), "12.051")
// nonsense assertEquals("13", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14", fmt.format(14.02251), "14.02251")
        assertEquals("primero", fmt.format(1), "1")
        assertEquals("segundo", fmt.format(2), "2")
        assertEquals("tercero", fmt.format(3), "3")
        assertEquals("cuarto", fmt.format(4), "4")
        assertEquals("quinto", fmt.format(5), "5")
        assertEquals("sexto", fmt.format(6), "6")
        assertEquals("séptimo", fmt.format(7), "7")
        assertEquals("octavo", fmt.format(8), "8")
        assertEquals("noveno", fmt.format(9), "9")
        assertEquals("décimo", fmt.format(10), "10")
        assertEquals("decimoprimero", fmt.format(11), "11")
        assertEquals("decimosegundo", fmt.format(12), "12")
        assertEquals("decimotercero", fmt.format(13), "13")
        assertEquals("decimocuarto", fmt.format(14), "14")
        assertEquals("decimoquinto", fmt.format(15), "15")
        assertEquals("decimosexto", fmt.format(16), "16")
        assertEquals("decimoséptimo", fmt.format(17), "17")
        assertEquals("decimoctavo", fmt.format(18), "18")
        assertEquals("decimonoveno", fmt.format(19), "19")
        assertEquals("vigésimo", fmt.format(20), "20")
        assertEquals("vigésimo primero", fmt.format(21), "21")
        assertEquals("vigésimo segundo", fmt.format(22), "22")
        assertEquals("vigésimo tercero", fmt.format(23), "23")
        assertEquals("vigésimo cuarto", fmt.format(24), "24")
        assertEquals("vigésimo quinto", fmt.format(25), "25")
        assertEquals("vigésimo sexto", fmt.format(26), "26")
        assertEquals("vigésimo séptimo", fmt.format(27), "27")
        assertEquals("vigésimo octavo", fmt.format(28), "28")
        assertEquals("vigésimo noveno", fmt.format(29), "29")
        assertEquals("trigésimo", fmt.format(30), "30")
        assertEquals("trigésimo primero", fmt.format(31), "31")
        assertEquals("nonagésimo octavo", fmt.format(98), "98")
        assertEquals("nonagésimo noveno", fmt.format(99), "99")
        assertEquals("centésimo", fmt.format(100), "100")
        assertEquals("centésimo primero", fmt.format(101), "101")
        assertEquals("centésimo segundo", fmt.format(102), "102")
        assertEquals("noningentésimo nonagésimo octavo", fmt.format(998), "998")
        assertEquals("noningentésimo nonagésimo noveno", fmt.format(999), "999")
        assertEquals("milésimo", fmt.format(1000), "1000")
        assertEquals("milésimo primero", fmt.format(1001), "1001")
        assertEquals("milésimo segundo", fmt.format(1002), "1002")
        assertEquals("milésimo noningentésimo nonagésimo octavo", fmt.format(1998), "1998")
        assertEquals("milésimo noningentésimo nonagésimo noveno", fmt.format(1999), "1999")
        assertEquals("dos milésimo", fmt.format(2000), "2000")
        assertEquals("dos milésimo primero", fmt.format(2001), "2001")
        assertEquals("dos milésimo segundo", fmt.format(2002), "2002")
        assertEquals("nueve milésimo noningentésimo nonagésimo octavo", fmt.format(9998), "9998")
        assertEquals("nueve milésimo noningentésimo nonagésimo noveno", fmt.format(9999), "9999")
        assertEquals("diez milésimo", fmt.format(10000), "10000")
        assertEquals("diez milésimo primero", fmt.format(10001), "10001")
        assertEquals("diez milésimo segundo", fmt.format(10002), "10002")
        assertEquals("cien milésimo", fmt.format(100000), "100000")
        assertEquals("cien milésimo primero", fmt.format(100001), "100001")
        assertEquals("cien milésimo segundo", fmt.format(100002), "100002")
        assertEquals("doscientos milésimo", fmt.format(200000), "200000")
        assertEquals("doscientos milésimo primero", fmt.format(200001), "200001")
        assertEquals("doscientos milésimo segundo", fmt.format(200002), "200002")
        assertEquals("un millonésimo", fmt.format(1000000), "1000000")
        assertEquals("un millonésimo primero", fmt.format(1000001), "1000001")
        assertEquals("un millonésimo segundo", fmt.format(1000002), "1000002")
        assertEquals("dos millonésimo", fmt.format(2000000), "2000000")
        assertEquals("dos millonésimo primero", fmt.format(2000001), "2000001")
        assertEquals("dos millonésimo segundo", fmt.format(2000002), "2000002")
        assertEquals("diez millonésimo", fmt.format(10000000), "10000000")
        assertEquals("diez millonésimo primero", fmt.format(10000001), "10000001")
        assertEquals("diez millonésimo segundo", fmt.format(10000002), "10000002")
        assertEquals("veinte millonésimo", fmt.format(20000000), "20000000")
        assertEquals("veinte millonésimo primero", fmt.format(20000001), "20000001")
        assertEquals("veinte millonésimo segundo", fmt.format(20000002), "20000002")
        assertEquals("cien millonésimo", fmt.format(100000000), "100000000")
        assertEquals("cien millonésimo primero", fmt.format(100000001), "100000001")
        assertEquals("cien millonésimo segundo", fmt.format(100000002), "100000002")
        assertEquals("doscientos millonésimo", fmt.format(200000000), "200000000")
        assertEquals("doscientos millonésimo primero", fmt.format(200000001), "200000001")
        assertEquals("doscientos millonésimo segundo", fmt.format(200000002), "200000002")
        assertEquals("mil millonésimo", fmt.format(1000000000), "1000000000")
        assertEquals("mil millonésimo primero", fmt.format(1000000001), "1000000001")
        assertEquals("mil millonésimo segundo", fmt.format(1000000002), "1000000002")
        assertEquals("dos mil millonésimo", fmt.format(2000000000), "2000000000")
        assertEquals("dos mil millonésimo primero", fmt.format(2000000001), "2000000001")
        assertEquals("dos mil millonésimo segundo", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutOrdinalMasculinePlural() {
        val fmt = RBNFEs_419().spelloutOrdinalMasculinePlural
// nonsense assertEquals("menos primeros", fmt.format(-1), "-1")
// nonsense assertEquals("cero", fmt.format(0), "0")
// nonsense assertEquals("0.2", fmt.format(0.2), "0.2")
// nonsense assertEquals("0.2", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0", fmt.format(0.02), "0.02")
// nonsense assertEquals("0", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4.8", fmt.format(4.751), "4.751")
// nonsense assertEquals("12.1", fmt.format(12.051), "12.051")
// nonsense assertEquals("13", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14", fmt.format(14.02251), "14.02251")
        assertEquals("primeros", fmt.format(1), "1")
        assertEquals("segundos", fmt.format(2), "2")
        assertEquals("terceros", fmt.format(3), "3")
        assertEquals("cuartos", fmt.format(4), "4")
        assertEquals("quintos", fmt.format(5), "5")
        assertEquals("sextos", fmt.format(6), "6")
        assertEquals("séptimos", fmt.format(7), "7")
        assertEquals("octavos", fmt.format(8), "8")
        assertEquals("novenos", fmt.format(9), "9")
        assertEquals("décimos", fmt.format(10), "10")
        assertEquals("decimoprimeros", fmt.format(11), "11")
        assertEquals("decimosegundos", fmt.format(12), "12")
        assertEquals("decimoterceros", fmt.format(13), "13")
        assertEquals("decimocuartos", fmt.format(14), "14")
        assertEquals("decimoquintos", fmt.format(15), "15")
        assertEquals("decimosextos", fmt.format(16), "16")
        assertEquals("decimoséptimos", fmt.format(17), "17")
        assertEquals("decimoctavos", fmt.format(18), "18")
        assertEquals("decimonovenos", fmt.format(19), "19")
        assertEquals("vigésimos", fmt.format(20), "20")
        assertEquals("vigésimo primeros", fmt.format(21), "21")
        assertEquals("vigésimo segundos", fmt.format(22), "22")
        assertEquals("vigésimo terceros", fmt.format(23), "23")
        assertEquals("vigésimo cuartos", fmt.format(24), "24")
        assertEquals("vigésimo quintos", fmt.format(25), "25")
        assertEquals("vigésimo sextos", fmt.format(26), "26")
        assertEquals("vigésimo séptimos", fmt.format(27), "27")
        assertEquals("vigésimo octavos", fmt.format(28), "28")
        assertEquals("vigésimo novenos", fmt.format(29), "29")
        assertEquals("trigésimos", fmt.format(30), "30")
        assertEquals("trigésimo primeros", fmt.format(31), "31")
        assertEquals("nonagésimo octavos", fmt.format(98), "98")
        assertEquals("nonagésimo novenos", fmt.format(99), "99")
        assertEquals("centésimos", fmt.format(100), "100")
        assertEquals("centésimo primeros", fmt.format(101), "101")
        assertEquals("centésimo segundos", fmt.format(102), "102")
        assertEquals("noningentésimo nonagésimo octavos", fmt.format(998), "998")
        assertEquals("noningentésimo nonagésimo novenos", fmt.format(999), "999")
        assertEquals("milésimos", fmt.format(1000), "1000")
        assertEquals("milésimo primeros", fmt.format(1001), "1001")
        assertEquals("milésimo segundos", fmt.format(1002), "1002")
        assertEquals("milésimo noningentésimo nonagésimo octavos", fmt.format(1998), "1998")
        assertEquals("milésimo noningentésimo nonagésimo novenos", fmt.format(1999), "1999")
        assertEquals("dos milésimos", fmt.format(2000), "2000")
        assertEquals("dos milésimo primeros", fmt.format(2001), "2001")
        assertEquals("dos milésimo segundos", fmt.format(2002), "2002")
        assertEquals("nueve milésimo noningentésimo nonagésimo octavos", fmt.format(9998), "9998")
        assertEquals("nueve milésimo noningentésimo nonagésimo novenos", fmt.format(9999), "9999")
        assertEquals("diez milésimos", fmt.format(10000), "10000")
        assertEquals("diez milésimo primeros", fmt.format(10001), "10001")
        assertEquals("diez milésimo segundos", fmt.format(10002), "10002")
        assertEquals("cien milésimos", fmt.format(100000), "100000")
        assertEquals("cien milésimo primeros", fmt.format(100001), "100001")
        assertEquals("cien milésimo segundos", fmt.format(100002), "100002")
        assertEquals("doscientos milésimos", fmt.format(200000), "200000")
        assertEquals("doscientos milésimo primeros", fmt.format(200001), "200001")
        assertEquals("doscientos milésimo segundos", fmt.format(200002), "200002")
        assertEquals("un millonésimos", fmt.format(1000000), "1000000")
        assertEquals("un millonésimo primeros", fmt.format(1000001), "1000001")
        assertEquals("un millonésimo segundos", fmt.format(1000002), "1000002")
        assertEquals("dos millonésimos", fmt.format(2000000), "2000000")
        assertEquals("dos millonésimo primeros", fmt.format(2000001), "2000001")
        assertEquals("dos millonésimo segundos", fmt.format(2000002), "2000002")
        assertEquals("diez millonésimos", fmt.format(10000000), "10000000")
        assertEquals("diez millonésimo primeros", fmt.format(10000001), "10000001")
        assertEquals("diez millonésimo segundos", fmt.format(10000002), "10000002")
        assertEquals("veinte millonésimos", fmt.format(20000000), "20000000")
        assertEquals("veinte millonésimo primeros", fmt.format(20000001), "20000001")
        assertEquals("veinte millonésimo segundos", fmt.format(20000002), "20000002")
        assertEquals("cien millonésimos", fmt.format(100000000), "100000000")
        assertEquals("cien millonésimo primeros", fmt.format(100000001), "100000001")
        assertEquals("cien millonésimo segundos", fmt.format(100000002), "100000002")
        assertEquals("doscientos millonésimos", fmt.format(200000000), "200000000")
        assertEquals("doscientos millonésimo primeros", fmt.format(200000001), "200000001")
        assertEquals("doscientos millonésimo segundos", fmt.format(200000002), "200000002")
        assertEquals("mil millonésimos", fmt.format(1000000000), "1000000000")
        assertEquals("mil millonésimo primeros", fmt.format(1000000001), "1000000001")
        assertEquals("mil millonésimo segundos", fmt.format(1000000002), "1000000002")
        assertEquals("dos mil millonésimos", fmt.format(2000000000), "2000000000")
        assertEquals("dos mil millonésimo primeros", fmt.format(2000000001), "2000000001")
        assertEquals("dos mil millonésimo segundos", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutOrdinalMasculineAdjective() {
        val fmt = RBNFEs_419().spelloutOrdinalMasculineAdjective
// nonsense assertEquals("menos primer", fmt.format(-1), "-1")
// nonsense assertEquals("cero", fmt.format(0), "0")
// nonsense assertEquals("0.2", fmt.format(0.2), "0.2")
// nonsense assertEquals("0.2", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0", fmt.format(0.02), "0.02")
// nonsense assertEquals("0", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4.8", fmt.format(4.751), "4.751")
// nonsense assertEquals("12.1", fmt.format(12.051), "12.051")
// nonsense assertEquals("13", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14", fmt.format(14.02251), "14.02251")
        assertEquals("primer", fmt.format(1), "1")
        assertEquals("segundo", fmt.format(2), "2")
        assertEquals("tercer", fmt.format(3), "3")
        assertEquals("cuarto", fmt.format(4), "4")
        assertEquals("quinto", fmt.format(5), "5")
        assertEquals("sexto", fmt.format(6), "6")
        assertEquals("séptimo", fmt.format(7), "7")
        assertEquals("octavo", fmt.format(8), "8")
        assertEquals("noveno", fmt.format(9), "9")
        assertEquals("décimo", fmt.format(10), "10")
        assertEquals("undécimo", fmt.format(11), "11")
        assertEquals("duodécimo", fmt.format(12), "12")
        assertEquals("decimotercer", fmt.format(13), "13")
        assertEquals("decimocuarto", fmt.format(14), "14")
        assertEquals("decimoquinto", fmt.format(15), "15")
        assertEquals("decimosexto", fmt.format(16), "16")
        assertEquals("decimoséptimo", fmt.format(17), "17")
        assertEquals("decimoctavo", fmt.format(18), "18")
        assertEquals("decimonoveno", fmt.format(19), "19")
        assertEquals("vigésimo", fmt.format(20), "20")
        assertEquals("vigésimo primer", fmt.format(21), "21")
        assertEquals("vigésimo segundo", fmt.format(22), "22")
        assertEquals("vigésimo tercer", fmt.format(23), "23")
        assertEquals("vigésimo cuarto", fmt.format(24), "24")
        assertEquals("vigésimo quinto", fmt.format(25), "25")
        assertEquals("vigésimo sexto", fmt.format(26), "26")
        assertEquals("vigésimo séptimo", fmt.format(27), "27")
        assertEquals("vigésimo octavo", fmt.format(28), "28")
        assertEquals("vigésimo noveno", fmt.format(29), "29")
        assertEquals("trigésimo", fmt.format(30), "30")
        assertEquals("trigésimo primer", fmt.format(31), "31")
        assertEquals("nonagésimo octavo", fmt.format(98), "98")
        assertEquals("nonagésimo noveno", fmt.format(99), "99")
        assertEquals("centésimo", fmt.format(100), "100")
        assertEquals("centésimo primer", fmt.format(101), "101")
        assertEquals("centésimo segundo", fmt.format(102), "102")
        assertEquals("noningentésimo nonagésimo octavo", fmt.format(998), "998")
        assertEquals("noningentésimo nonagésimo noveno", fmt.format(999), "999")
        assertEquals("milésimo", fmt.format(1000), "1000")
        assertEquals("milésimo primer", fmt.format(1001), "1001")
        assertEquals("milésimo segundo", fmt.format(1002), "1002")
        assertEquals("milésimo noningentésimo nonagésimo octavo", fmt.format(1998), "1998")
        assertEquals("milésimo noningentésimo nonagésimo noveno", fmt.format(1999), "1999")
        assertEquals("dos milésimo", fmt.format(2000), "2000")
        assertEquals("dos milésimo primer", fmt.format(2001), "2001")
        assertEquals("dos milésimo segundo", fmt.format(2002), "2002")
        assertEquals("nueve milésimo noningentésimo nonagésimo octavo", fmt.format(9998), "9998")
        assertEquals("nueve milésimo noningentésimo nonagésimo noveno", fmt.format(9999), "9999")
        assertEquals("diez milésimo", fmt.format(10000), "10000")
        assertEquals("diez milésimo primer", fmt.format(10001), "10001")
        assertEquals("diez milésimo segundo", fmt.format(10002), "10002")
        assertEquals("cien milésimo", fmt.format(100000), "100000")
        assertEquals("cien milésimo primer", fmt.format(100001), "100001")
        assertEquals("cien milésimo segundo", fmt.format(100002), "100002")
        assertEquals("doscientos milésimo", fmt.format(200000), "200000")
        assertEquals("doscientos milésimo primer", fmt.format(200001), "200001")
        assertEquals("doscientos milésimo segundo", fmt.format(200002), "200002")
        assertEquals("un millonésimo", fmt.format(1000000), "1000000")
        assertEquals("un millonésimo primer", fmt.format(1000001), "1000001")
        assertEquals("un millonésimo segundo", fmt.format(1000002), "1000002")
        assertEquals("dos millonésimo", fmt.format(2000000), "2000000")
        assertEquals("dos millonésimo primer", fmt.format(2000001), "2000001")
        assertEquals("dos millonésimo segundo", fmt.format(2000002), "2000002")
        assertEquals("diez millonésimo", fmt.format(10000000), "10000000")
        assertEquals("diez millonésimo primer", fmt.format(10000001), "10000001")
        assertEquals("diez millonésimo segundo", fmt.format(10000002), "10000002")
        assertEquals("veinte millonésimo", fmt.format(20000000), "20000000")
        assertEquals("veinte millonésimo primer", fmt.format(20000001), "20000001")
        assertEquals("veinte millonésimo segundo", fmt.format(20000002), "20000002")
        assertEquals("cien millonésimo", fmt.format(100000000), "100000000")
        assertEquals("cien millonésimo primer", fmt.format(100000001), "100000001")
        assertEquals("cien millonésimo segundo", fmt.format(100000002), "100000002")
        assertEquals("doscientos millonésimo", fmt.format(200000000), "200000000")
        assertEquals("doscientos millonésimo primer", fmt.format(200000001), "200000001")
        assertEquals("doscientos millonésimo segundo", fmt.format(200000002), "200000002")
        assertEquals("mil millonésimo", fmt.format(1000000000), "1000000000")
        assertEquals("mil millonésimo primer", fmt.format(1000000001), "1000000001")
        assertEquals("mil millonésimo segundo", fmt.format(1000000002), "1000000002")
        assertEquals("dos mil millonésimo", fmt.format(2000000000), "2000000000")
        assertEquals("dos mil millonésimo primer", fmt.format(2000000001), "2000000001")
        assertEquals("dos mil millonésimo segundo", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalFeminine() {
        val fmt = RBNFEs_419().spelloutCardinalFeminine
        assertEquals("menos una", fmt.format(-1), "-1")
        assertEquals("cero", fmt.format(0), "0")
        assertEquals("cero punto dos", fmt.format(0.2), "0.2")
        assertEquals("cero punto dos tres cuatro cinco", fmt.format(0.2345), "0.2345")
        assertEquals("cero punto cero dos", fmt.format(0.02), "0.02")
        assertEquals("cero punto cero dos una tres", fmt.format(0.0213), "0.0213")
        assertEquals("cuatro punto siete cinco una", fmt.format(4.751), "4.751")
        assertEquals("doce punto cero cinco una", fmt.format(12.051), "12.051")
        assertEquals("trece punto cero dos cinco una", fmt.format(13.0251), "13.0251")
        assertEquals("catorce punto cero dos dos cinco una", fmt.format(14.02251), "14.02251")
        assertEquals("una", fmt.format(1), "1")
        assertEquals("dos", fmt.format(2), "2")
        assertEquals("tres", fmt.format(3), "3")
        assertEquals("cuatro", fmt.format(4), "4")
        assertEquals("cinco", fmt.format(5), "5")
        assertEquals("seis", fmt.format(6), "6")
        assertEquals("siete", fmt.format(7), "7")
        assertEquals("ocho", fmt.format(8), "8")
        assertEquals("nueve", fmt.format(9), "9")
        assertEquals("diez", fmt.format(10), "10")
        assertEquals("once", fmt.format(11), "11")
        assertEquals("doce", fmt.format(12), "12")
        assertEquals("trece", fmt.format(13), "13")
        assertEquals("catorce", fmt.format(14), "14")
        assertEquals("quince", fmt.format(15), "15")
        assertEquals("dieciséis", fmt.format(16), "16")
        assertEquals("diecisiete", fmt.format(17), "17")
        assertEquals("dieciocho", fmt.format(18), "18")
        assertEquals("diecinueve", fmt.format(19), "19")
        assertEquals("veinte", fmt.format(20), "20")
        assertEquals("veintiuna", fmt.format(21), "21")
        assertEquals("veintidós", fmt.format(22), "22")
        assertEquals("veintitrés", fmt.format(23), "23")
        assertEquals("veinticuatro", fmt.format(24), "24")
        assertEquals("veinticinco", fmt.format(25), "25")
        assertEquals("veintiséis", fmt.format(26), "26")
        assertEquals("veintisiete", fmt.format(27), "27")
        assertEquals("veintiocho", fmt.format(28), "28")
        assertEquals("veintinueve", fmt.format(29), "29")
        assertEquals("treinta", fmt.format(30), "30")
        assertEquals("treinta y una", fmt.format(31), "31")
        assertEquals("noventa y ocho", fmt.format(98), "98")
        assertEquals("noventa y nueve", fmt.format(99), "99")
        assertEquals("cien", fmt.format(100), "100")
        assertEquals("ciento una", fmt.format(101), "101")
        assertEquals("ciento dos", fmt.format(102), "102")
        assertEquals("nove­cientas noventa y ocho", fmt.format(998), "998")
        assertEquals("nove­cientas noventa y nueve", fmt.format(999), "999")
        assertEquals("mil", fmt.format(1000), "1000")
        assertEquals("mil una", fmt.format(1001), "1001")
        assertEquals("mil dos", fmt.format(1002), "1002")
        assertEquals("mil nove­cientas noventa y ocho", fmt.format(1998), "1998")
        assertEquals("mil nove­cientas noventa y nueve", fmt.format(1999), "1999")
        assertEquals("dos mil", fmt.format(2000), "2000")
        assertEquals("dos mil una", fmt.format(2001), "2001")
        assertEquals("dos mil dos", fmt.format(2002), "2002")
        assertEquals("nueve mil nove­cientas noventa y ocho", fmt.format(9998), "9998")
        assertEquals("nueve mil nove­cientas noventa y nueve", fmt.format(9999), "9999")
        assertEquals("diez mil", fmt.format(10000), "10000")
        assertEquals("diez mil una", fmt.format(10001), "10001")
        assertEquals("diez mil dos", fmt.format(10002), "10002")
        assertEquals("cien mil", fmt.format(100000), "100000")
        assertEquals("cien mil una", fmt.format(100001), "100001")
        assertEquals("cien mil dos", fmt.format(100002), "100002")
        assertEquals("doscientos mil", fmt.format(200000), "200000")
        assertEquals("doscientos mil una", fmt.format(200001), "200001")
        assertEquals("doscientos mil dos", fmt.format(200002), "200002")
        assertEquals("un millón", fmt.format(1000000), "1000000")
        assertEquals("un millón una", fmt.format(1000001), "1000001")
        assertEquals("un millón dos", fmt.format(1000002), "1000002")
        assertEquals("dos millones", fmt.format(2000000), "2000000")
        assertEquals("dos millones una", fmt.format(2000001), "2000001")
        assertEquals("dos millones dos", fmt.format(2000002), "2000002")
        assertEquals("diez millones", fmt.format(10000000), "10000000")
        assertEquals("diez millones una", fmt.format(10000001), "10000001")
        assertEquals("diez millones dos", fmt.format(10000002), "10000002")
        assertEquals("veinte millones", fmt.format(20000000), "20000000")
        assertEquals("veinte millones una", fmt.format(20000001), "20000001")
        assertEquals("veinte millones dos", fmt.format(20000002), "20000002")
        assertEquals("cien millones", fmt.format(100000000), "100000000")
        assertEquals("cien millones una", fmt.format(100000001), "100000001")
        assertEquals("cien millones dos", fmt.format(100000002), "100000002")
        assertEquals("doscientos millones", fmt.format(200000000), "200000000")
        assertEquals("doscientos millones una", fmt.format(200000001), "200000001")
        assertEquals("doscientos millones dos", fmt.format(200000002), "200000002")
        assertEquals("mil millones", fmt.format(1000000000), "1000000000")
        assertEquals("mil millones una", fmt.format(1000000001), "1000000001")
        assertEquals("mil millones dos", fmt.format(1000000002), "1000000002")
        assertEquals("dos mil millones", fmt.format(2000000000), "2000000000")
        assertEquals("dos mil millones una", fmt.format(2000000001), "2000000001")
        assertEquals("dos mil millones dos", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalMasculine() {
        val fmt = RBNFEs_419().spelloutCardinalMasculine
        assertEquals("menos un", fmt.format(-1), "-1")
        assertEquals("cero", fmt.format(0), "0")
        assertEquals("cero punto dos", fmt.format(0.2), "0.2")
        assertEquals("cero punto dos tres cuatro cinco", fmt.format(0.2345), "0.2345")
        assertEquals("cero punto cero dos", fmt.format(0.02), "0.02")
        assertEquals("cero punto cero dos un tres", fmt.format(0.0213), "0.0213")
        assertEquals("cuatro punto siete cinco un", fmt.format(4.751), "4.751")
        assertEquals("doce punto cero cinco un", fmt.format(12.051), "12.051")
        assertEquals("trece punto cero dos cinco un", fmt.format(13.0251), "13.0251")
        assertEquals("catorce punto cero dos dos cinco un", fmt.format(14.02251), "14.02251")
        assertEquals("un", fmt.format(1), "1")
        assertEquals("dos", fmt.format(2), "2")
        assertEquals("tres", fmt.format(3), "3")
        assertEquals("cuatro", fmt.format(4), "4")
        assertEquals("cinco", fmt.format(5), "5")
        assertEquals("seis", fmt.format(6), "6")
        assertEquals("siete", fmt.format(7), "7")
        assertEquals("ocho", fmt.format(8), "8")
        assertEquals("nueve", fmt.format(9), "9")
        assertEquals("diez", fmt.format(10), "10")
        assertEquals("once", fmt.format(11), "11")
        assertEquals("doce", fmt.format(12), "12")
        assertEquals("trece", fmt.format(13), "13")
        assertEquals("catorce", fmt.format(14), "14")
        assertEquals("quince", fmt.format(15), "15")
        assertEquals("dieciséis", fmt.format(16), "16")
        assertEquals("diecisiete", fmt.format(17), "17")
        assertEquals("dieciocho", fmt.format(18), "18")
        assertEquals("diecinueve", fmt.format(19), "19")
        assertEquals("veinte", fmt.format(20), "20")
        assertEquals("veintiún", fmt.format(21), "21")
        assertEquals("veintidós", fmt.format(22), "22")
        assertEquals("veintitrés", fmt.format(23), "23")
        assertEquals("veinticuatro", fmt.format(24), "24")
        assertEquals("veinticinco", fmt.format(25), "25")
        assertEquals("veintiséis", fmt.format(26), "26")
        assertEquals("veintisiete", fmt.format(27), "27")
        assertEquals("veintiocho", fmt.format(28), "28")
        assertEquals("veintinueve", fmt.format(29), "29")
        assertEquals("treinta", fmt.format(30), "30")
        assertEquals("treinta y un", fmt.format(31), "31")
        assertEquals("noventa y ocho", fmt.format(98), "98")
        assertEquals("noventa y nueve", fmt.format(99), "99")
        assertEquals("cien", fmt.format(100), "100")
        assertEquals("ciento un", fmt.format(101), "101")
        assertEquals("ciento dos", fmt.format(102), "102")
        assertEquals("nove­cientos noventa y ocho", fmt.format(998), "998")
        assertEquals("nove­cientos noventa y nueve", fmt.format(999), "999")
        assertEquals("mil", fmt.format(1000), "1000")
        assertEquals("mil un", fmt.format(1001), "1001")
        assertEquals("mil dos", fmt.format(1002), "1002")
        assertEquals("mil nove­cientos noventa y ocho", fmt.format(1998), "1998")
        assertEquals("mil nove­cientos noventa y nueve", fmt.format(1999), "1999")
        assertEquals("dos mil", fmt.format(2000), "2000")
        assertEquals("dos mil un", fmt.format(2001), "2001")
        assertEquals("dos mil dos", fmt.format(2002), "2002")
        assertEquals("nueve mil nove­cientos noventa y ocho", fmt.format(9998), "9998")
        assertEquals("nueve mil nove­cientos noventa y nueve", fmt.format(9999), "9999")
        assertEquals("diez mil", fmt.format(10000), "10000")
        assertEquals("diez mil un", fmt.format(10001), "10001")
        assertEquals("diez mil dos", fmt.format(10002), "10002")
        assertEquals("cien mil", fmt.format(100000), "100000")
        assertEquals("cien mil un", fmt.format(100001), "100001")
        assertEquals("cien mil dos", fmt.format(100002), "100002")
        assertEquals("doscientos mil", fmt.format(200000), "200000")
        assertEquals("doscientos mil un", fmt.format(200001), "200001")
        assertEquals("doscientos mil dos", fmt.format(200002), "200002")
        assertEquals("un millón", fmt.format(1000000), "1000000")
        assertEquals("un millón un", fmt.format(1000001), "1000001")
        assertEquals("un millón dos", fmt.format(1000002), "1000002")
        assertEquals("dos millones", fmt.format(2000000), "2000000")
        assertEquals("dos millones un", fmt.format(2000001), "2000001")
        assertEquals("dos millones dos", fmt.format(2000002), "2000002")
        assertEquals("diez millones", fmt.format(10000000), "10000000")
        assertEquals("diez millones un", fmt.format(10000001), "10000001")
        assertEquals("diez millones dos", fmt.format(10000002), "10000002")
        assertEquals("veinte millones", fmt.format(20000000), "20000000")
        assertEquals("veinte millones un", fmt.format(20000001), "20000001")
        assertEquals("veinte millones dos", fmt.format(20000002), "20000002")
        assertEquals("cien millones", fmt.format(100000000), "100000000")
        assertEquals("cien millones un", fmt.format(100000001), "100000001")
        assertEquals("cien millones dos", fmt.format(100000002), "100000002")
        assertEquals("doscientos millones", fmt.format(200000000), "200000000")
        assertEquals("doscientos millones un", fmt.format(200000001), "200000001")
        assertEquals("doscientos millones dos", fmt.format(200000002), "200000002")
        assertEquals("mil millones", fmt.format(1000000000), "1000000000")
        assertEquals("mil millones un", fmt.format(1000000001), "1000000001")
        assertEquals("mil millones dos", fmt.format(1000000002), "1000000002")
        assertEquals("dos mil millones", fmt.format(2000000000), "2000000000")
        assertEquals("dos mil millones un", fmt.format(2000000001), "2000000001")
        assertEquals("dos mil millones dos", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutNumbering() {
        val fmt = RBNFEs_419().spelloutNumbering
        assertEquals("menos uno", fmt.format(-1), "-1")
        assertEquals("cero", fmt.format(0), "0")
        assertEquals("cero punto dos", fmt.format(0.2), "0.2")
        assertEquals("cero punto dos tres cuatro cinco", fmt.format(0.2345), "0.2345")
        assertEquals("cero punto cero dos", fmt.format(0.02), "0.02")
        assertEquals("cero punto cero dos uno tres", fmt.format(0.0213), "0.0213")
        assertEquals("cuatro punto siete cinco uno", fmt.format(4.751), "4.751")
        assertEquals("doce punto cero cinco uno", fmt.format(12.051), "12.051")
        assertEquals("trece punto cero dos cinco uno", fmt.format(13.0251), "13.0251")
        assertEquals("catorce punto cero dos dos cinco uno", fmt.format(14.02251), "14.02251")
        assertEquals("uno", fmt.format(1), "1")
        assertEquals("dos", fmt.format(2), "2")
        assertEquals("tres", fmt.format(3), "3")
        assertEquals("cuatro", fmt.format(4), "4")
        assertEquals("cinco", fmt.format(5), "5")
        assertEquals("seis", fmt.format(6), "6")
        assertEquals("siete", fmt.format(7), "7")
        assertEquals("ocho", fmt.format(8), "8")
        assertEquals("nueve", fmt.format(9), "9")
        assertEquals("diez", fmt.format(10), "10")
        assertEquals("once", fmt.format(11), "11")
        assertEquals("doce", fmt.format(12), "12")
        assertEquals("trece", fmt.format(13), "13")
        assertEquals("catorce", fmt.format(14), "14")
        assertEquals("quince", fmt.format(15), "15")
        assertEquals("dieciséis", fmt.format(16), "16")
        assertEquals("diecisiete", fmt.format(17), "17")
        assertEquals("dieciocho", fmt.format(18), "18")
        assertEquals("diecinueve", fmt.format(19), "19")
        assertEquals("veinte", fmt.format(20), "20")
        assertEquals("veintiuno", fmt.format(21), "21")
        assertEquals("veintidós", fmt.format(22), "22")
        assertEquals("veintitrés", fmt.format(23), "23")
        assertEquals("veinticuatro", fmt.format(24), "24")
        assertEquals("veinticinco", fmt.format(25), "25")
        assertEquals("veintiséis", fmt.format(26), "26")
        assertEquals("veintisiete", fmt.format(27), "27")
        assertEquals("veintiocho", fmt.format(28), "28")
        assertEquals("veintinueve", fmt.format(29), "29")
        assertEquals("treinta", fmt.format(30), "30")
        assertEquals("treinta y uno", fmt.format(31), "31")
        assertEquals("noventa y ocho", fmt.format(98), "98")
        assertEquals("noventa y nueve", fmt.format(99), "99")
        assertEquals("cien", fmt.format(100), "100")
        assertEquals("ciento uno", fmt.format(101), "101")
        assertEquals("ciento dos", fmt.format(102), "102")
        assertEquals("novecientos noventa y ocho", fmt.format(998), "998")
        assertEquals("novecientos noventa y nueve", fmt.format(999), "999")
        assertEquals("mil", fmt.format(1000), "1000")
        assertEquals("mil uno", fmt.format(1001), "1001")
        assertEquals("mil dos", fmt.format(1002), "1002")
        assertEquals("mil novecientos noventa y ocho", fmt.format(1998), "1998")
        assertEquals("mil novecientos noventa y nueve", fmt.format(1999), "1999")
        assertEquals("dos mil", fmt.format(2000), "2000")
        assertEquals("dos mil uno", fmt.format(2001), "2001")
        assertEquals("dos mil dos", fmt.format(2002), "2002")
        assertEquals("nueve mil novecientos noventa y ocho", fmt.format(9998), "9998")
        assertEquals("nueve mil novecientos noventa y nueve", fmt.format(9999), "9999")
        assertEquals("diez mil", fmt.format(10000), "10000")
        assertEquals("diez mil uno", fmt.format(10001), "10001")
        assertEquals("diez mil dos", fmt.format(10002), "10002")
        assertEquals("cien mil", fmt.format(100000), "100000")
        assertEquals("cien mil uno", fmt.format(100001), "100001")
        assertEquals("cien mil dos", fmt.format(100002), "100002")
        assertEquals("doscientos mil", fmt.format(200000), "200000")
        assertEquals("doscientos mil uno", fmt.format(200001), "200001")
        assertEquals("doscientos mil dos", fmt.format(200002), "200002")
        assertEquals("un millón", fmt.format(1000000), "1000000")
        assertEquals("un millón uno", fmt.format(1000001), "1000001")
        assertEquals("un millón dos", fmt.format(1000002), "1000002")
        assertEquals("dos millones", fmt.format(2000000), "2000000")
        assertEquals("dos millones uno", fmt.format(2000001), "2000001")
        assertEquals("dos millones dos", fmt.format(2000002), "2000002")
        assertEquals("diez millones", fmt.format(10000000), "10000000")
        assertEquals("diez millones uno", fmt.format(10000001), "10000001")
        assertEquals("diez millones dos", fmt.format(10000002), "10000002")
        assertEquals("veinte millones", fmt.format(20000000), "20000000")
        assertEquals("veinte millones uno", fmt.format(20000001), "20000001")
        assertEquals("veinte millones dos", fmt.format(20000002), "20000002")
        assertEquals("cien millones", fmt.format(100000000), "100000000")
        assertEquals("cien millones uno", fmt.format(100000001), "100000001")
        assertEquals("cien millones dos", fmt.format(100000002), "100000002")
        assertEquals("doscientos millones", fmt.format(200000000), "200000000")
        assertEquals("doscientos millones uno", fmt.format(200000001), "200000001")
        assertEquals("doscientos millones dos", fmt.format(200000002), "200000002")
        assertEquals("mil millones", fmt.format(1000000000), "1000000000")
        assertEquals("mil millones uno", fmt.format(1000000001), "1000000001")
        assertEquals("mil millones dos", fmt.format(1000000002), "1000000002")
        assertEquals("dos mil millones", fmt.format(2000000000), "2000000000")
        assertEquals("dos mil millones uno", fmt.format(2000000001), "2000000001")
        assertEquals("dos mil millones dos", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutNumberingYear() {
        val fmt = RBNFEs_419().spelloutNumberingYear
// nonsense assertEquals("menos uno", fmt.format(-1), "-1")
// nonsense assertEquals("cero", fmt.format(0), "0")
// nonsense assertEquals("0.2", fmt.format(0.2), "0.2")
// nonsense assertEquals("0.2", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0.0", fmt.format(0.02), "0.02")
// nonsense assertEquals("0.0", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4.8", fmt.format(4.751), "4.751")
// nonsense assertEquals("12.1", fmt.format(12.051), "12.051")
// nonsense assertEquals("13.0", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14.0", fmt.format(14.02251), "14.02251")
        assertEquals("uno", fmt.format(1), "1")
        assertEquals("dos", fmt.format(2), "2")
        assertEquals("tres", fmt.format(3), "3")
        assertEquals("cuatro", fmt.format(4), "4")
        assertEquals("cinco", fmt.format(5), "5")
        assertEquals("seis", fmt.format(6), "6")
        assertEquals("siete", fmt.format(7), "7")
        assertEquals("ocho", fmt.format(8), "8")
        assertEquals("nueve", fmt.format(9), "9")
        assertEquals("diez", fmt.format(10), "10")
        assertEquals("once", fmt.format(11), "11")
        assertEquals("doce", fmt.format(12), "12")
        assertEquals("trece", fmt.format(13), "13")
        assertEquals("catorce", fmt.format(14), "14")
        assertEquals("quince", fmt.format(15), "15")
        assertEquals("dieciséis", fmt.format(16), "16")
        assertEquals("diecisiete", fmt.format(17), "17")
        assertEquals("dieciocho", fmt.format(18), "18")
        assertEquals("diecinueve", fmt.format(19), "19")
        assertEquals("veinte", fmt.format(20), "20")
        assertEquals("veintiuno", fmt.format(21), "21")
        assertEquals("veintidós", fmt.format(22), "22")
        assertEquals("veintitrés", fmt.format(23), "23")
        assertEquals("veinticuatro", fmt.format(24), "24")
        assertEquals("veinticinco", fmt.format(25), "25")
        assertEquals("veintiséis", fmt.format(26), "26")
        assertEquals("veintisiete", fmt.format(27), "27")
        assertEquals("veintiocho", fmt.format(28), "28")
        assertEquals("veintinueve", fmt.format(29), "29")
        assertEquals("treinta", fmt.format(30), "30")
        assertEquals("treinta y uno", fmt.format(31), "31")
        assertEquals("noventa y ocho", fmt.format(98), "98")
        assertEquals("noventa y nueve", fmt.format(99), "99")
        assertEquals("cien", fmt.format(100), "100")
        assertEquals("ciento uno", fmt.format(101), "101")
        assertEquals("ciento dos", fmt.format(102), "102")
        assertEquals("novecientos noventa y ocho", fmt.format(998), "998")
        assertEquals("novecientos noventa y nueve", fmt.format(999), "999")
        assertEquals("mil", fmt.format(1000), "1000")
        assertEquals("mil uno", fmt.format(1001), "1001")
        assertEquals("mil dos", fmt.format(1002), "1002")
        assertEquals("mil novecientos noventa y ocho", fmt.format(1998), "1998")
        assertEquals("mil novecientos noventa y nueve", fmt.format(1999), "1999")
        assertEquals("dos mil", fmt.format(2000), "2000")
        assertEquals("dos mil uno", fmt.format(2001), "2001")
        assertEquals("dos mil dos", fmt.format(2002), "2002")
        assertEquals("nueve mil novecientos noventa y ocho", fmt.format(9998), "9998")
        assertEquals("nueve mil novecientos noventa y nueve", fmt.format(9999), "9999")
        assertEquals("diez mil", fmt.format(10000), "10000")
        assertEquals("diez mil uno", fmt.format(10001), "10001")
        assertEquals("diez mil dos", fmt.format(10002), "10002")
        assertEquals("cien mil", fmt.format(100000), "100000")
        assertEquals("cien mil uno", fmt.format(100001), "100001")
        assertEquals("cien mil dos", fmt.format(100002), "100002")
        assertEquals("doscientos mil", fmt.format(200000), "200000")
        assertEquals("doscientos mil uno", fmt.format(200001), "200001")
        assertEquals("doscientos mil dos", fmt.format(200002), "200002")
        assertEquals("un millón", fmt.format(1000000), "1000000")
        assertEquals("un millón uno", fmt.format(1000001), "1000001")
        assertEquals("un millón dos", fmt.format(1000002), "1000002")
        assertEquals("dos millones", fmt.format(2000000), "2000000")
        assertEquals("dos millones uno", fmt.format(2000001), "2000001")
        assertEquals("dos millones dos", fmt.format(2000002), "2000002")
        assertEquals("diez millones", fmt.format(10000000), "10000000")
        assertEquals("diez millones uno", fmt.format(10000001), "10000001")
        assertEquals("diez millones dos", fmt.format(10000002), "10000002")
        assertEquals("veinte millones", fmt.format(20000000), "20000000")
        assertEquals("veinte millones uno", fmt.format(20000001), "20000001")
        assertEquals("veinte millones dos", fmt.format(20000002), "20000002")
        assertEquals("cien millones", fmt.format(100000000), "100000000")
        assertEquals("cien millones uno", fmt.format(100000001), "100000001")
        assertEquals("cien millones dos", fmt.format(100000002), "100000002")
        assertEquals("doscientos millones", fmt.format(200000000), "200000000")
        assertEquals("doscientos millones uno", fmt.format(200000001), "200000001")
        assertEquals("doscientos millones dos", fmt.format(200000002), "200000002")
        assertEquals("mil millones", fmt.format(1000000000), "1000000000")
        assertEquals("mil millones uno", fmt.format(1000000001), "1000000001")
        assertEquals("mil millones dos", fmt.format(1000000002), "1000000002")
        assertEquals("dos mil millones", fmt.format(2000000000), "2000000000")
        assertEquals("dos mil millones uno", fmt.format(2000000001), "2000000001")
        assertEquals("dos mil millones dos", fmt.format(2000000002), "2000000002")
    }
}
