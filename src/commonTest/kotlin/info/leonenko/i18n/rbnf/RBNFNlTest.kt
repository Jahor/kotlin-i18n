package info.leonenko.i18n.rbnf

import kotlin.test.Test
import kotlin.test.assertEquals

class RBNFNlTest {
    @Test
    fun spelloutOrdinal() {
        val fmt = RBNFNl().spelloutOrdinal
// nonsense assertEquals("min eerste", fmt.format(-1), "-1")
// nonsense assertEquals("nulste", fmt.format(0), "0")
// nonsense assertEquals("0,2", fmt.format(0.2), "0.2")
// nonsense assertEquals("0,2", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0", fmt.format(0.02), "0.02")
// nonsense assertEquals("0", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4,8", fmt.format(4.751), "4.751")
// nonsense assertEquals("12,1", fmt.format(12.051), "12.051")
// nonsense assertEquals("13", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14", fmt.format(14.02251), "14.02251")
        assertEquals("eerste", fmt.format(1), "1")
        assertEquals("tweede", fmt.format(2), "2")
        assertEquals("derde", fmt.format(3), "3")
        assertEquals("vierde", fmt.format(4), "4")
        assertEquals("vijfde", fmt.format(5), "5")
        assertEquals("zesde", fmt.format(6), "6")
        assertEquals("zevende", fmt.format(7), "7")
        assertEquals("achtste", fmt.format(8), "8")
        assertEquals("negende", fmt.format(9), "9")
        assertEquals("tiende", fmt.format(10), "10")
        assertEquals("elfde", fmt.format(11), "11")
        assertEquals("twaalfde", fmt.format(12), "12")
        assertEquals("dertiende", fmt.format(13), "13")
        assertEquals("veertiende", fmt.format(14), "14")
        assertEquals("vijftiende", fmt.format(15), "15")
        assertEquals("zestiende", fmt.format(16), "16")
        assertEquals("zeventiende", fmt.format(17), "17")
        assertEquals("achttiende", fmt.format(18), "18")
        assertEquals("negentiende", fmt.format(19), "19")
        assertEquals("twintigste", fmt.format(20), "20")
        assertEquals("een­en­twintigste", fmt.format(21), "21")
        assertEquals("twee­ën­twintigste", fmt.format(22), "22")
        assertEquals("drie­ën­twintigste", fmt.format(23), "23")
        assertEquals("vier­en­twintigste", fmt.format(24), "24")
        assertEquals("vijf­en­twintigste", fmt.format(25), "25")
        assertEquals("zes­en­twintigste", fmt.format(26), "26")
        assertEquals("zeven­en­twintigste", fmt.format(27), "27")
        assertEquals("acht­en­twintigste", fmt.format(28), "28")
        assertEquals("negen­en­twintigste", fmt.format(29), "29")
        assertEquals("dertigste", fmt.format(30), "30")
        assertEquals("een­en­dertigste", fmt.format(31), "31")
        assertEquals("acht­en­negentigste", fmt.format(98), "98")
        assertEquals("negen­en­negentigste", fmt.format(99), "99")
        assertEquals("honderdste", fmt.format(100), "100")
        assertEquals("honderd­eerste", fmt.format(101), "101")
        assertEquals("honderd­tweede", fmt.format(102), "102")
        assertEquals("negen­honderd­acht­en­negentigste", fmt.format(998), "998")
        assertEquals("negen­honderd­negen­en­negentigste", fmt.format(999), "999")
        assertEquals("duizendste", fmt.format(1000), "1000")
        assertEquals("duizend­eerste", fmt.format(1001), "1001")
        assertEquals("duizend­tweede", fmt.format(1002), "1002")
        assertEquals("duizend­negen­honderd­acht­en­negentigste", fmt.format(1998), "1998")
        assertEquals("duizend­negen­honderd­negen­en­negentigste", fmt.format(1999), "1999")
        assertEquals("twee­duizendste", fmt.format(2000), "2000")
        assertEquals("twee­duizend­eerste", fmt.format(2001), "2001")
        assertEquals("twee­duizend­tweede", fmt.format(2002), "2002")
        assertEquals("negen­duizend­negen­honderd­acht­en­negentigste", fmt.format(9998), "9998")
        assertEquals("negen­duizend­negen­honderd­negen­en­negentigste", fmt.format(9999), "9999")
        assertEquals("tien­duizendste", fmt.format(10000), "10000")
        assertEquals("tien­duizend­eerste", fmt.format(10001), "10001")
        assertEquals("tien­duizend­tweede", fmt.format(10002), "10002")
        assertEquals("honderd­duizendste", fmt.format(100000), "100000")
        assertEquals("honderd­duizend­eerste", fmt.format(100001), "100001")
        assertEquals("honderd­duizend­tweede", fmt.format(100002), "100002")
        assertEquals("twee­honderd­duizendste", fmt.format(200000), "200000")
        assertEquals("twee­honderd­duizend­eerste", fmt.format(200001), "200001")
        assertEquals("twee­honderd­duizend­tweede", fmt.format(200002), "200002")
        assertEquals("een­miljoenste", fmt.format(1000000), "1000000")
        assertEquals("een­miljoen­eerste", fmt.format(1000001), "1000001")
        assertEquals("een­miljoen­tweede", fmt.format(1000002), "1000002")
        assertEquals("twee­miljoenste", fmt.format(2000000), "2000000")
        assertEquals("twee­miljoen­eerste", fmt.format(2000001), "2000001")
        assertEquals("twee­miljoen­tweede", fmt.format(2000002), "2000002")
        assertEquals("tien­miljoenste", fmt.format(10000000), "10000000")
        assertEquals("tien­miljoen­eerste", fmt.format(10000001), "10000001")
        assertEquals("tien­miljoen­tweede", fmt.format(10000002), "10000002")
        assertEquals("twintig­miljoenste", fmt.format(20000000), "20000000")
        assertEquals("twintig­miljoen­eerste", fmt.format(20000001), "20000001")
        assertEquals("twintig­miljoen­tweede", fmt.format(20000002), "20000002")
        assertEquals("honderd­miljoenste", fmt.format(100000000), "100000000")
        assertEquals("honderd­miljoen­eerste", fmt.format(100000001), "100000001")
        assertEquals("honderd­miljoen­tweede", fmt.format(100000002), "100000002")
        assertEquals("twee­honderd­miljoenste", fmt.format(200000000), "200000000")
        assertEquals("twee­honderd­miljoen­eerste", fmt.format(200000001), "200000001")
        assertEquals("twee­honderd­miljoen­tweede", fmt.format(200000002), "200000002")
        assertEquals("een­miljardste", fmt.format(1000000000), "1000000000")
        assertEquals("een­miljard­eerste", fmt.format(1000000001), "1000000001")
        assertEquals("een­miljard­tweede", fmt.format(1000000002), "1000000002")
        assertEquals("twee­miljardste", fmt.format(2000000000), "2000000000")
        assertEquals("twee­miljard­eerste", fmt.format(2000000001), "2000000001")
        assertEquals("twee­miljard­tweede", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinal() {
        val fmt = RBNFNl().spelloutCardinal
        assertEquals("min een", fmt.format(-1), "-1")
        assertEquals("nul", fmt.format(0), "0")
        assertEquals("nul komma twee", fmt.format(0.2), "0.2")
        assertEquals("nul komma twee drie vier vijf", fmt.format(0.2345), "0.2345")
        assertEquals("nul komma nul twee", fmt.format(0.02), "0.02")
        assertEquals("nul komma nul twee een drie", fmt.format(0.0213), "0.0213")
        assertEquals("vier komma zeven vijf een", fmt.format(4.751), "4.751")
        assertEquals("twaalf komma nul vijf een", fmt.format(12.051), "12.051")
        assertEquals("dertien komma nul twee vijf een", fmt.format(13.0251), "13.0251")
        assertEquals("veertien komma nul twee twee vijf een", fmt.format(14.02251), "14.02251")
        assertEquals("een", fmt.format(1), "1")
        assertEquals("twee", fmt.format(2), "2")
        assertEquals("drie", fmt.format(3), "3")
        assertEquals("vier", fmt.format(4), "4")
        assertEquals("vijf", fmt.format(5), "5")
        assertEquals("zes", fmt.format(6), "6")
        assertEquals("zeven", fmt.format(7), "7")
        assertEquals("acht", fmt.format(8), "8")
        assertEquals("negen", fmt.format(9), "9")
        assertEquals("tien", fmt.format(10), "10")
        assertEquals("elf", fmt.format(11), "11")
        assertEquals("twaalf", fmt.format(12), "12")
        assertEquals("dertien", fmt.format(13), "13")
        assertEquals("veertien", fmt.format(14), "14")
        assertEquals("vijftien", fmt.format(15), "15")
        assertEquals("zestien", fmt.format(16), "16")
        assertEquals("zeventien", fmt.format(17), "17")
        assertEquals("achttien", fmt.format(18), "18")
        assertEquals("negentien", fmt.format(19), "19")
        assertEquals("twintig", fmt.format(20), "20")
        assertEquals("een­en­twintig", fmt.format(21), "21")
        assertEquals("twee­ën­twintig", fmt.format(22), "22")
        assertEquals("drie­ën­twintig", fmt.format(23), "23")
        assertEquals("vier­en­twintig", fmt.format(24), "24")
        assertEquals("vijf­en­twintig", fmt.format(25), "25")
        assertEquals("zes­en­twintig", fmt.format(26), "26")
        assertEquals("zeven­en­twintig", fmt.format(27), "27")
        assertEquals("acht­en­twintig", fmt.format(28), "28")
        assertEquals("negen­en­twintig", fmt.format(29), "29")
        assertEquals("dertig", fmt.format(30), "30")
        assertEquals("een­en­dertig", fmt.format(31), "31")
        assertEquals("acht­en­negentig", fmt.format(98), "98")
        assertEquals("negen­en­negentig", fmt.format(99), "99")
        assertEquals("honderd", fmt.format(100), "100")
        assertEquals("honderdeen", fmt.format(101), "101")
        assertEquals("honderdtwee", fmt.format(102), "102")
        assertEquals("negen­honderd­acht­en­negentig", fmt.format(998), "998")
        assertEquals("negen­honderd­negen­en­negentig", fmt.format(999), "999")
        assertEquals("duizend", fmt.format(1000), "1000")
        assertEquals("duizend­een", fmt.format(1001), "1001")
        assertEquals("duizend­twee", fmt.format(1002), "1002")
        assertEquals("duizend­negen­honderd­acht­en­negentig", fmt.format(1998), "1998")
        assertEquals("duizend­negen­honderd­negen­en­negentig", fmt.format(1999), "1999")
        assertEquals("twee­duizend", fmt.format(2000), "2000")
        assertEquals("twee­duizend­een", fmt.format(2001), "2001")
        assertEquals("twee­duizend­twee", fmt.format(2002), "2002")
        assertEquals("negen­duizend­negen­honderd­acht­en­negentig", fmt.format(9998), "9998")
        assertEquals("negen­duizend­negen­honderd­negen­en­negentig", fmt.format(9999), "9999")
        assertEquals("tien­duizend", fmt.format(10000), "10000")
        assertEquals("tien­duizend­een", fmt.format(10001), "10001")
        assertEquals("tien­duizend­twee", fmt.format(10002), "10002")
        assertEquals("honderd­duizend", fmt.format(100000), "100000")
        assertEquals("honderd­duizend­een", fmt.format(100001), "100001")
        assertEquals("honderd­duizend­twee", fmt.format(100002), "100002")
        assertEquals("twee­honderd­duizend", fmt.format(200000), "200000")
        assertEquals("twee­honderd­duizend­een", fmt.format(200001), "200001")
        assertEquals("twee­honderd­duizend­twee", fmt.format(200002), "200002")
        assertEquals("een miljoen", fmt.format(1000000), "1000000")
        assertEquals("een miljoen een", fmt.format(1000001), "1000001")
        assertEquals("een miljoen twee", fmt.format(1000002), "1000002")
        assertEquals("twee miljoen", fmt.format(2000000), "2000000")
        assertEquals("twee miljoen een", fmt.format(2000001), "2000001")
        assertEquals("twee miljoen twee", fmt.format(2000002), "2000002")
        assertEquals("tien miljoen", fmt.format(10000000), "10000000")
        assertEquals("tien miljoen een", fmt.format(10000001), "10000001")
        assertEquals("tien miljoen twee", fmt.format(10000002), "10000002")
        assertEquals("twintig miljoen", fmt.format(20000000), "20000000")
        assertEquals("twintig miljoen een", fmt.format(20000001), "20000001")
        assertEquals("twintig miljoen twee", fmt.format(20000002), "20000002")
        assertEquals("honderd miljoen", fmt.format(100000000), "100000000")
        assertEquals("honderd miljoen een", fmt.format(100000001), "100000001")
        assertEquals("honderd miljoen twee", fmt.format(100000002), "100000002")
        assertEquals("twee­honderd miljoen", fmt.format(200000000), "200000000")
        assertEquals("twee­honderd miljoen een", fmt.format(200000001), "200000001")
        assertEquals("twee­honderd miljoen twee", fmt.format(200000002), "200000002")
        assertEquals("een miljard", fmt.format(1000000000), "1000000000")
        assertEquals("een miljard een", fmt.format(1000000001), "1000000001")
        assertEquals("een miljard twee", fmt.format(1000000002), "1000000002")
        assertEquals("twee miljard", fmt.format(2000000000), "2000000000")
        assertEquals("twee miljard een", fmt.format(2000000001), "2000000001")
        assertEquals("twee miljard twee", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutNumbering() {
        val fmt = RBNFNl().spelloutNumbering
        assertEquals("min een", fmt.format(-1), "-1")
        assertEquals("nul", fmt.format(0), "0")
        assertEquals("nul komma twee", fmt.format(0.2), "0.2")
        assertEquals("nul komma twee drie vier vijf", fmt.format(0.2345), "0.2345")
        assertEquals("nul komma nul twee", fmt.format(0.02), "0.02")
        assertEquals("nul komma nul twee een drie", fmt.format(0.0213), "0.0213")
        assertEquals("vier komma zeven vijf een", fmt.format(4.751), "4.751")
        assertEquals("twaalf komma nul vijf een", fmt.format(12.051), "12.051")
        assertEquals("dertien komma nul twee vijf een", fmt.format(13.0251), "13.0251")
        assertEquals("veertien komma nul twee twee vijf een", fmt.format(14.02251), "14.02251")
        assertEquals("een", fmt.format(1), "1")
        assertEquals("twee", fmt.format(2), "2")
        assertEquals("drie", fmt.format(3), "3")
        assertEquals("vier", fmt.format(4), "4")
        assertEquals("vijf", fmt.format(5), "5")
        assertEquals("zes", fmt.format(6), "6")
        assertEquals("zeven", fmt.format(7), "7")
        assertEquals("acht", fmt.format(8), "8")
        assertEquals("negen", fmt.format(9), "9")
        assertEquals("tien", fmt.format(10), "10")
        assertEquals("elf", fmt.format(11), "11")
        assertEquals("twaalf", fmt.format(12), "12")
        assertEquals("dertien", fmt.format(13), "13")
        assertEquals("veertien", fmt.format(14), "14")
        assertEquals("vijftien", fmt.format(15), "15")
        assertEquals("zestien", fmt.format(16), "16")
        assertEquals("zeventien", fmt.format(17), "17")
        assertEquals("achttien", fmt.format(18), "18")
        assertEquals("negentien", fmt.format(19), "19")
        assertEquals("twintig", fmt.format(20), "20")
        assertEquals("een­en­twintig", fmt.format(21), "21")
        assertEquals("twee­ën­twintig", fmt.format(22), "22")
        assertEquals("drie­ën­twintig", fmt.format(23), "23")
        assertEquals("vier­en­twintig", fmt.format(24), "24")
        assertEquals("vijf­en­twintig", fmt.format(25), "25")
        assertEquals("zes­en­twintig", fmt.format(26), "26")
        assertEquals("zeven­en­twintig", fmt.format(27), "27")
        assertEquals("acht­en­twintig", fmt.format(28), "28")
        assertEquals("negen­en­twintig", fmt.format(29), "29")
        assertEquals("dertig", fmt.format(30), "30")
        assertEquals("een­en­dertig", fmt.format(31), "31")
        assertEquals("acht­en­negentig", fmt.format(98), "98")
        assertEquals("negen­en­negentig", fmt.format(99), "99")
        assertEquals("honderd", fmt.format(100), "100")
        assertEquals("honderdeen", fmt.format(101), "101")
        assertEquals("honderdtwee", fmt.format(102), "102")
        assertEquals("negen­honderd­acht­en­negentig", fmt.format(998), "998")
        assertEquals("negen­honderd­negen­en­negentig", fmt.format(999), "999")
        assertEquals("duizend", fmt.format(1000), "1000")
        assertEquals("duizend­een", fmt.format(1001), "1001")
        assertEquals("duizend­twee", fmt.format(1002), "1002")
        assertEquals("duizend­negen­honderd­acht­en­negentig", fmt.format(1998), "1998")
        assertEquals("duizend­negen­honderd­negen­en­negentig", fmt.format(1999), "1999")
        assertEquals("twee­duizend", fmt.format(2000), "2000")
        assertEquals("twee­duizend­een", fmt.format(2001), "2001")
        assertEquals("twee­duizend­twee", fmt.format(2002), "2002")
        assertEquals("negen­duizend­negen­honderd­acht­en­negentig", fmt.format(9998), "9998")
        assertEquals("negen­duizend­negen­honderd­negen­en­negentig", fmt.format(9999), "9999")
        assertEquals("tien­duizend", fmt.format(10000), "10000")
        assertEquals("tien­duizend­een", fmt.format(10001), "10001")
        assertEquals("tien­duizend­twee", fmt.format(10002), "10002")
        assertEquals("honderd­duizend", fmt.format(100000), "100000")
        assertEquals("honderd­duizend­een", fmt.format(100001), "100001")
        assertEquals("honderd­duizend­twee", fmt.format(100002), "100002")
        assertEquals("twee­honderd­duizend", fmt.format(200000), "200000")
        assertEquals("twee­honderd­duizend­een", fmt.format(200001), "200001")
        assertEquals("twee­honderd­duizend­twee", fmt.format(200002), "200002")
        assertEquals("een miljoen", fmt.format(1000000), "1000000")
        assertEquals("een miljoen een", fmt.format(1000001), "1000001")
        assertEquals("een miljoen twee", fmt.format(1000002), "1000002")
        assertEquals("twee miljoen", fmt.format(2000000), "2000000")
        assertEquals("twee miljoen een", fmt.format(2000001), "2000001")
        assertEquals("twee miljoen twee", fmt.format(2000002), "2000002")
        assertEquals("tien miljoen", fmt.format(10000000), "10000000")
        assertEquals("tien miljoen een", fmt.format(10000001), "10000001")
        assertEquals("tien miljoen twee", fmt.format(10000002), "10000002")
        assertEquals("twintig miljoen", fmt.format(20000000), "20000000")
        assertEquals("twintig miljoen een", fmt.format(20000001), "20000001")
        assertEquals("twintig miljoen twee", fmt.format(20000002), "20000002")
        assertEquals("honderd miljoen", fmt.format(100000000), "100000000")
        assertEquals("honderd miljoen een", fmt.format(100000001), "100000001")
        assertEquals("honderd miljoen twee", fmt.format(100000002), "100000002")
        assertEquals("twee­honderd miljoen", fmt.format(200000000), "200000000")
        assertEquals("twee­honderd miljoen een", fmt.format(200000001), "200000001")
        assertEquals("twee­honderd miljoen twee", fmt.format(200000002), "200000002")
        assertEquals("een miljard", fmt.format(1000000000), "1000000000")
        assertEquals("een miljard een", fmt.format(1000000001), "1000000001")
        assertEquals("een miljard twee", fmt.format(1000000002), "1000000002")
        assertEquals("twee miljard", fmt.format(2000000000), "2000000000")
        assertEquals("twee miljard een", fmt.format(2000000001), "2000000001")
        assertEquals("twee miljard twee", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutNumberingYear() {
        val fmt = RBNFNl().spelloutNumberingYear
// nonsense assertEquals("min een", fmt.format(-1), "-1")
// nonsense assertEquals("nul", fmt.format(0), "0")
// nonsense assertEquals("0,2", fmt.format(0.2), "0.2")
// nonsense assertEquals("0,2", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0,0", fmt.format(0.02), "0.02")
// nonsense assertEquals("0,0", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4,8", fmt.format(4.751), "4.751")
// nonsense assertEquals("12,1", fmt.format(12.051), "12.051")
// nonsense assertEquals("13,0", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14,0", fmt.format(14.02251), "14.02251")
        assertEquals("een", fmt.format(1), "1")
        assertEquals("twee", fmt.format(2), "2")
        assertEquals("drie", fmt.format(3), "3")
        assertEquals("vier", fmt.format(4), "4")
        assertEquals("vijf", fmt.format(5), "5")
        assertEquals("zes", fmt.format(6), "6")
        assertEquals("zeven", fmt.format(7), "7")
        assertEquals("acht", fmt.format(8), "8")
        assertEquals("negen", fmt.format(9), "9")
        assertEquals("tien", fmt.format(10), "10")
        assertEquals("elf", fmt.format(11), "11")
        assertEquals("twaalf", fmt.format(12), "12")
        assertEquals("dertien", fmt.format(13), "13")
        assertEquals("veertien", fmt.format(14), "14")
        assertEquals("vijftien", fmt.format(15), "15")
        assertEquals("zestien", fmt.format(16), "16")
        assertEquals("zeventien", fmt.format(17), "17")
        assertEquals("achttien", fmt.format(18), "18")
        assertEquals("negentien", fmt.format(19), "19")
        assertEquals("twintig", fmt.format(20), "20")
        assertEquals("een­en­twintig", fmt.format(21), "21")
        assertEquals("twee­ën­twintig", fmt.format(22), "22")
        assertEquals("drie­ën­twintig", fmt.format(23), "23")
        assertEquals("vier­en­twintig", fmt.format(24), "24")
        assertEquals("vijf­en­twintig", fmt.format(25), "25")
        assertEquals("zes­en­twintig", fmt.format(26), "26")
        assertEquals("zeven­en­twintig", fmt.format(27), "27")
        assertEquals("acht­en­twintig", fmt.format(28), "28")
        assertEquals("negen­en­twintig", fmt.format(29), "29")
        assertEquals("dertig", fmt.format(30), "30")
        assertEquals("een­en­dertig", fmt.format(31), "31")
        assertEquals("acht­en­negentig", fmt.format(98), "98")
        assertEquals("negen­en­negentig", fmt.format(99), "99")
        assertEquals("honderd", fmt.format(100), "100")
        assertEquals("honderdeen", fmt.format(101), "101")
        assertEquals("honderdtwee", fmt.format(102), "102")
        assertEquals("negen­honderd­acht­en­negentig", fmt.format(998), "998")
        assertEquals("negen­honderd­negen­en­negentig", fmt.format(999), "999")
        assertEquals("duizend", fmt.format(1000), "1000")
        assertEquals("duizend­een", fmt.format(1001), "1001")
        assertEquals("duizend­twee", fmt.format(1002), "1002")
        assertEquals("negentienacht­en­negentig", fmt.format(1998), "1998")
        assertEquals("negentiennegen­en­negentig", fmt.format(1999), "1999")
        assertEquals("twee­duizend", fmt.format(2000), "2000")
        assertEquals("twee­duizend­een", fmt.format(2001), "2001")
        assertEquals("twee­duizend­twee", fmt.format(2002), "2002")
        assertEquals("negen­en­negentigacht­en­negentig", fmt.format(9998), "9998")
        assertEquals("negen­en­negentignegen­en­negentig", fmt.format(9999), "9999")
        assertEquals("tien­duizend", fmt.format(10000), "10000")
        assertEquals("tien­duizend­een", fmt.format(10001), "10001")
        assertEquals("tien­duizend­twee", fmt.format(10002), "10002")
        assertEquals("honderd­duizend", fmt.format(100000), "100000")
        assertEquals("honderd­duizend­een", fmt.format(100001), "100001")
        assertEquals("honderd­duizend­twee", fmt.format(100002), "100002")
        assertEquals("twee­honderd­duizend", fmt.format(200000), "200000")
        assertEquals("twee­honderd­duizend­een", fmt.format(200001), "200001")
        assertEquals("twee­honderd­duizend­twee", fmt.format(200002), "200002")
        assertEquals("een miljoen", fmt.format(1000000), "1000000")
        assertEquals("een miljoen een", fmt.format(1000001), "1000001")
        assertEquals("een miljoen twee", fmt.format(1000002), "1000002")
        assertEquals("twee miljoen", fmt.format(2000000), "2000000")
        assertEquals("twee miljoen een", fmt.format(2000001), "2000001")
        assertEquals("twee miljoen twee", fmt.format(2000002), "2000002")
        assertEquals("tien miljoen", fmt.format(10000000), "10000000")
        assertEquals("tien miljoen een", fmt.format(10000001), "10000001")
        assertEquals("tien miljoen twee", fmt.format(10000002), "10000002")
        assertEquals("twintig miljoen", fmt.format(20000000), "20000000")
        assertEquals("twintig miljoen een", fmt.format(20000001), "20000001")
        assertEquals("twintig miljoen twee", fmt.format(20000002), "20000002")
        assertEquals("honderd miljoen", fmt.format(100000000), "100000000")
        assertEquals("honderd miljoen een", fmt.format(100000001), "100000001")
        assertEquals("honderd miljoen twee", fmt.format(100000002), "100000002")
        assertEquals("twee­honderd miljoen", fmt.format(200000000), "200000000")
        assertEquals("twee­honderd miljoen een", fmt.format(200000001), "200000001")
        assertEquals("twee­honderd miljoen twee", fmt.format(200000002), "200000002")
        assertEquals("een miljard", fmt.format(1000000000), "1000000000")
        assertEquals("een miljard een", fmt.format(1000000001), "1000000001")
        assertEquals("een miljard twee", fmt.format(1000000002), "1000000002")
        assertEquals("twee miljard", fmt.format(2000000000), "2000000000")
        assertEquals("twee miljard een", fmt.format(2000000001), "2000000001")
        assertEquals("twee miljard twee", fmt.format(2000000002), "2000000002")
    }
}
