package info.leonenko.i18n.rbnf
    
    import kotlin.test.Test
    import kotlin.test.assertEquals
    
class RBNFFrTest {
  @Test
  fun spelloutOrdinalFeminine() {
 val fmt = RBNFFr().spelloutOrdinalFeminine
// nonsense assertEquals("moins première", fmt.format(-1), "-1")
// nonsense assertEquals("zéroième", fmt.format(0), "0")
// nonsense assertEquals("0,2", fmt.format(0.2), "0.2")
// nonsense assertEquals("0,2", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0", fmt.format(0.02), "0.02")
// nonsense assertEquals("0", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4,8", fmt.format(4.751), "4.751")
// nonsense assertEquals("12,1", fmt.format(12.051), "12.051")
// nonsense assertEquals("13", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14", fmt.format(14.02251), "14.02251")
assertEquals("première", fmt.format(1), "1")
assertEquals("deuxième", fmt.format(2), "2")
assertEquals("troisième", fmt.format(3), "3")
assertEquals("quatrième", fmt.format(4), "4")
assertEquals("cinquième", fmt.format(5), "5")
assertEquals("sixième", fmt.format(6), "6")
assertEquals("septième", fmt.format(7), "7")
assertEquals("huitième", fmt.format(8), "8")
assertEquals("neuvième", fmt.format(9), "9")
assertEquals("dixième", fmt.format(10), "10")
assertEquals("onzième", fmt.format(11), "11")
assertEquals("douzième", fmt.format(12), "12")
assertEquals("treizième", fmt.format(13), "13")
assertEquals("quatorzième", fmt.format(14), "14")
assertEquals("quinzième", fmt.format(15), "15")
assertEquals("seizième", fmt.format(16), "16")
assertEquals("dix-septième", fmt.format(17), "17")
assertEquals("dix-huitième", fmt.format(18), "18")
assertEquals("dix-neuvième", fmt.format(19), "19")
assertEquals("vingtième", fmt.format(20), "20")
assertEquals("vingt-et-unième", fmt.format(21), "21")
assertEquals("vingt-deuxième", fmt.format(22), "22")
assertEquals("vingt-troisième", fmt.format(23), "23")
assertEquals("vingt-quatrième", fmt.format(24), "24")
assertEquals("vingt-cinquième", fmt.format(25), "25")
assertEquals("vingt-sixième", fmt.format(26), "26")
assertEquals("vingt-septième", fmt.format(27), "27")
assertEquals("vingt-huitième", fmt.format(28), "28")
assertEquals("vingt-neuvième", fmt.format(29), "29")
assertEquals("trentième", fmt.format(30), "30")
assertEquals("trente-et-unième", fmt.format(31), "31")
assertEquals("quatre-vingt-dix-huitième", fmt.format(98), "98")
assertEquals("quatre-vingt-dix-neuvième", fmt.format(99), "99")
assertEquals("centième", fmt.format(100), "100")
assertEquals("cent-et-unième", fmt.format(101), "101")
assertEquals("cent deuxième", fmt.format(102), "102")
assertEquals("neuf cent quatre-vingt-dix-huitième", fmt.format(998), "998")
assertEquals("neuf cent quatre-vingt-dix-neuvième", fmt.format(999), "999")
assertEquals("millième", fmt.format(1000), "1000")
assertEquals("mille-et-unième", fmt.format(1001), "1001")
assertEquals("mille deuxième", fmt.format(1002), "1002")
assertEquals("mille neuf cent quatre-vingt-dix-huitième", fmt.format(1998), "1998")
assertEquals("mille neuf cent quatre-vingt-dix-neuvième", fmt.format(1999), "1999")
assertEquals("deux millième", fmt.format(2000), "2000")
assertEquals("deux mille-et-unième", fmt.format(2001), "2001")
assertEquals("deux mille deuxième", fmt.format(2002), "2002")
assertEquals("neuf mille neuf cent quatre-vingt-dix-huitième", fmt.format(9998), "9998")
assertEquals("neuf mille neuf cent quatre-vingt-dix-neuvième", fmt.format(9999), "9999")
assertEquals("dix millième", fmt.format(10000), "10000")
assertEquals("dix mille-et-unième", fmt.format(10001), "10001")
assertEquals("dix mille deuxième", fmt.format(10002), "10002")
assertEquals("cent millième", fmt.format(100000), "100000")
assertEquals("cent mille-et-unième", fmt.format(100001), "100001")
assertEquals("cent mille deuxième", fmt.format(100002), "100002")
assertEquals("deux cent millième", fmt.format(200000), "200000")
assertEquals("deux cent mille-et-unième", fmt.format(200001), "200001")
assertEquals("deux cent mille deuxième", fmt.format(200002), "200002")
assertEquals("un millionième", fmt.format(1000000), "1000000")
assertEquals("un million-et-unième", fmt.format(1000001), "1000001")
assertEquals("un million deuxième", fmt.format(1000002), "1000002")
assertEquals("deux millionième", fmt.format(2000000), "2000000")
assertEquals("deux million-et-unième", fmt.format(2000001), "2000001")
assertEquals("deux million deuxième", fmt.format(2000002), "2000002")
assertEquals("dix millionième", fmt.format(10000000), "10000000")
assertEquals("dix million-et-unième", fmt.format(10000001), "10000001")
assertEquals("dix million deuxième", fmt.format(10000002), "10000002")
assertEquals("vingt millionième", fmt.format(20000000), "20000000")
assertEquals("vingt million-et-unième", fmt.format(20000001), "20000001")
assertEquals("vingt million deuxième", fmt.format(20000002), "20000002")
assertEquals("cent millionième", fmt.format(100000000), "100000000")
assertEquals("cent million-et-unième", fmt.format(100000001), "100000001")
assertEquals("cent million deuxième", fmt.format(100000002), "100000002")
assertEquals("deux cent millionième", fmt.format(200000000), "200000000")
assertEquals("deux cent million-et-unième", fmt.format(200000001), "200000001")
assertEquals("deux cent million deuxième", fmt.format(200000002), "200000002")
assertEquals("un milliardième", fmt.format(1000000000), "1000000000")
assertEquals("un milliard-et-unième", fmt.format(1000000001), "1000000001")
assertEquals("un milliard deuxième", fmt.format(1000000002), "1000000002")
assertEquals("deux milliardième", fmt.format(2000000000), "2000000000")
assertEquals("deux milliard-et-unième", fmt.format(2000000001), "2000000001")
assertEquals("deux milliard deuxième", fmt.format(2000000002), "2000000002")
  }
  @Test
  fun spelloutOrdinalFemininePlural() {
 val fmt = RBNFFr().spelloutOrdinalFemininePlural
// nonsense assertEquals("moins premières", fmt.format(-1), "-1")
// nonsense assertEquals("zéroièmes", fmt.format(0), "0")
// nonsense assertEquals("0,2s", fmt.format(0.2), "0.2")
// nonsense assertEquals("0,2s", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0s", fmt.format(0.02), "0.02")
// nonsense assertEquals("0s", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4,8s", fmt.format(4.751), "4.751")
// nonsense assertEquals("12,1s", fmt.format(12.051), "12.051")
// nonsense assertEquals("13s", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14s", fmt.format(14.02251), "14.02251")
assertEquals("premières", fmt.format(1), "1")
assertEquals("deuxièmes", fmt.format(2), "2")
assertEquals("troisièmes", fmt.format(3), "3")
assertEquals("quatrièmes", fmt.format(4), "4")
assertEquals("cinquièmes", fmt.format(5), "5")
assertEquals("sixièmes", fmt.format(6), "6")
assertEquals("septièmes", fmt.format(7), "7")
assertEquals("huitièmes", fmt.format(8), "8")
assertEquals("neuvièmes", fmt.format(9), "9")
assertEquals("dixièmes", fmt.format(10), "10")
assertEquals("onzièmes", fmt.format(11), "11")
assertEquals("douzièmes", fmt.format(12), "12")
assertEquals("treizièmes", fmt.format(13), "13")
assertEquals("quatorzièmes", fmt.format(14), "14")
assertEquals("quinzièmes", fmt.format(15), "15")
assertEquals("seizièmes", fmt.format(16), "16")
assertEquals("dix-septièmes", fmt.format(17), "17")
assertEquals("dix-huitièmes", fmt.format(18), "18")
assertEquals("dix-neuvièmes", fmt.format(19), "19")
assertEquals("vingtièmes", fmt.format(20), "20")
assertEquals("vingt-et-unièmes", fmt.format(21), "21")
assertEquals("vingt-deuxièmes", fmt.format(22), "22")
assertEquals("vingt-troisièmes", fmt.format(23), "23")
assertEquals("vingt-quatrièmes", fmt.format(24), "24")
assertEquals("vingt-cinquièmes", fmt.format(25), "25")
assertEquals("vingt-sixièmes", fmt.format(26), "26")
assertEquals("vingt-septièmes", fmt.format(27), "27")
assertEquals("vingt-huitièmes", fmt.format(28), "28")
assertEquals("vingt-neuvièmes", fmt.format(29), "29")
assertEquals("trentièmes", fmt.format(30), "30")
assertEquals("trente-et-unièmes", fmt.format(31), "31")
assertEquals("quatre-vingt-dix-huitièmes", fmt.format(98), "98")
assertEquals("quatre-vingt-dix-neuvièmes", fmt.format(99), "99")
assertEquals("centièmes", fmt.format(100), "100")
assertEquals("cent-et-unièmes", fmt.format(101), "101")
assertEquals("cent deuxièmes", fmt.format(102), "102")
assertEquals("neuf cent quatre-vingt-dix-huitièmes", fmt.format(998), "998")
assertEquals("neuf cent quatre-vingt-dix-neuvièmes", fmt.format(999), "999")
assertEquals("millièmes", fmt.format(1000), "1000")
assertEquals("mille-et-unièmes", fmt.format(1001), "1001")
assertEquals("mille deuxièmes", fmt.format(1002), "1002")
assertEquals("mille neuf cent quatre-vingt-dix-huitièmes", fmt.format(1998), "1998")
assertEquals("mille neuf cent quatre-vingt-dix-neuvièmes", fmt.format(1999), "1999")
assertEquals("deux millièmes", fmt.format(2000), "2000")
assertEquals("deux mille-et-unièmes", fmt.format(2001), "2001")
assertEquals("deux mille deuxièmes", fmt.format(2002), "2002")
assertEquals("neuf mille neuf cent quatre-vingt-dix-huitièmes", fmt.format(9998), "9998")
assertEquals("neuf mille neuf cent quatre-vingt-dix-neuvièmes", fmt.format(9999), "9999")
assertEquals("dix millièmes", fmt.format(10000), "10000")
assertEquals("dix mille-et-unièmes", fmt.format(10001), "10001")
assertEquals("dix mille deuxièmes", fmt.format(10002), "10002")
assertEquals("cent millièmes", fmt.format(100000), "100000")
assertEquals("cent mille-et-unièmes", fmt.format(100001), "100001")
assertEquals("cent mille deuxièmes", fmt.format(100002), "100002")
assertEquals("deux cent millièmes", fmt.format(200000), "200000")
assertEquals("deux cent mille-et-unièmes", fmt.format(200001), "200001")
assertEquals("deux cent mille deuxièmes", fmt.format(200002), "200002")
assertEquals("un millionièmes", fmt.format(1000000), "1000000")
assertEquals("un million-et-unièmes", fmt.format(1000001), "1000001")
assertEquals("un million deuxièmes", fmt.format(1000002), "1000002")
assertEquals("deux millionièmes", fmt.format(2000000), "2000000")
assertEquals("deux million-et-unièmes", fmt.format(2000001), "2000001")
assertEquals("deux million deuxièmes", fmt.format(2000002), "2000002")
assertEquals("dix millionièmes", fmt.format(10000000), "10000000")
assertEquals("dix million-et-unièmes", fmt.format(10000001), "10000001")
assertEquals("dix million deuxièmes", fmt.format(10000002), "10000002")
assertEquals("vingt millionièmes", fmt.format(20000000), "20000000")
assertEquals("vingt million-et-unièmes", fmt.format(20000001), "20000001")
assertEquals("vingt million deuxièmes", fmt.format(20000002), "20000002")
assertEquals("cent millionièmes", fmt.format(100000000), "100000000")
assertEquals("cent million-et-unièmes", fmt.format(100000001), "100000001")
assertEquals("cent million deuxièmes", fmt.format(100000002), "100000002")
assertEquals("deux cent millionièmes", fmt.format(200000000), "200000000")
assertEquals("deux cent million-et-unièmes", fmt.format(200000001), "200000001")
assertEquals("deux cent million deuxièmes", fmt.format(200000002), "200000002")
assertEquals("un milliardièmes", fmt.format(1000000000), "1000000000")
assertEquals("un milliard-et-unièmes", fmt.format(1000000001), "1000000001")
assertEquals("un milliard deuxièmes", fmt.format(1000000002), "1000000002")
assertEquals("deux milliardièmes", fmt.format(2000000000), "2000000000")
assertEquals("deux milliard-et-unièmes", fmt.format(2000000001), "2000000001")
assertEquals("deux milliard deuxièmes", fmt.format(2000000002), "2000000002")
  }
  @Test
  fun spelloutOrdinalMasculine() {
 val fmt = RBNFFr().spelloutOrdinalMasculine
// nonsense assertEquals("moins premier", fmt.format(-1), "-1")
// nonsense assertEquals("zéroième", fmt.format(0), "0")
// nonsense assertEquals("0,2", fmt.format(0.2), "0.2")
// nonsense assertEquals("0,2", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0", fmt.format(0.02), "0.02")
// nonsense assertEquals("0", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4,8", fmt.format(4.751), "4.751")
// nonsense assertEquals("12,1", fmt.format(12.051), "12.051")
// nonsense assertEquals("13", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14", fmt.format(14.02251), "14.02251")
assertEquals("premier", fmt.format(1), "1")
assertEquals("deuxième", fmt.format(2), "2")
assertEquals("troisième", fmt.format(3), "3")
assertEquals("quatrième", fmt.format(4), "4")
assertEquals("cinquième", fmt.format(5), "5")
assertEquals("sixième", fmt.format(6), "6")
assertEquals("septième", fmt.format(7), "7")
assertEquals("huitième", fmt.format(8), "8")
assertEquals("neuvième", fmt.format(9), "9")
assertEquals("dixième", fmt.format(10), "10")
assertEquals("onzième", fmt.format(11), "11")
assertEquals("douzième", fmt.format(12), "12")
assertEquals("treizième", fmt.format(13), "13")
assertEquals("quatorzième", fmt.format(14), "14")
assertEquals("quinzième", fmt.format(15), "15")
assertEquals("seizième", fmt.format(16), "16")
assertEquals("dix-septième", fmt.format(17), "17")
assertEquals("dix-huitième", fmt.format(18), "18")
assertEquals("dix-neuvième", fmt.format(19), "19")
assertEquals("vingtième", fmt.format(20), "20")
assertEquals("vingt-et-unième", fmt.format(21), "21")
assertEquals("vingt-deuxième", fmt.format(22), "22")
assertEquals("vingt-troisième", fmt.format(23), "23")
assertEquals("vingt-quatrième", fmt.format(24), "24")
assertEquals("vingt-cinquième", fmt.format(25), "25")
assertEquals("vingt-sixième", fmt.format(26), "26")
assertEquals("vingt-septième", fmt.format(27), "27")
assertEquals("vingt-huitième", fmt.format(28), "28")
assertEquals("vingt-neuvième", fmt.format(29), "29")
assertEquals("trentième", fmt.format(30), "30")
assertEquals("trente-et-unième", fmt.format(31), "31")
assertEquals("quatre-vingt-dix-huitième", fmt.format(98), "98")
assertEquals("quatre-vingt-dix-neuvième", fmt.format(99), "99")
assertEquals("centième", fmt.format(100), "100")
assertEquals("cent-et-unième", fmt.format(101), "101")
assertEquals("cent deuxième", fmt.format(102), "102")
assertEquals("neuf cent quatre-vingt-dix-huitième", fmt.format(998), "998")
assertEquals("neuf cent quatre-vingt-dix-neuvième", fmt.format(999), "999")
assertEquals("millième", fmt.format(1000), "1000")
assertEquals("mille-et-unième", fmt.format(1001), "1001")
assertEquals("mille deuxième", fmt.format(1002), "1002")
assertEquals("mille neuf cent quatre-vingt-dix-huitième", fmt.format(1998), "1998")
assertEquals("mille neuf cent quatre-vingt-dix-neuvième", fmt.format(1999), "1999")
assertEquals("deux millième", fmt.format(2000), "2000")
assertEquals("deux mille-et-unième", fmt.format(2001), "2001")
assertEquals("deux mille deuxième", fmt.format(2002), "2002")
assertEquals("neuf mille neuf cent quatre-vingt-dix-huitième", fmt.format(9998), "9998")
assertEquals("neuf mille neuf cent quatre-vingt-dix-neuvième", fmt.format(9999), "9999")
assertEquals("dix millième", fmt.format(10000), "10000")
assertEquals("dix mille-et-unième", fmt.format(10001), "10001")
assertEquals("dix mille deuxième", fmt.format(10002), "10002")
assertEquals("cent millième", fmt.format(100000), "100000")
assertEquals("cent mille-et-unième", fmt.format(100001), "100001")
assertEquals("cent mille deuxième", fmt.format(100002), "100002")
assertEquals("deux cent millième", fmt.format(200000), "200000")
assertEquals("deux cent mille-et-unième", fmt.format(200001), "200001")
assertEquals("deux cent mille deuxième", fmt.format(200002), "200002")
assertEquals("un millionième", fmt.format(1000000), "1000000")
assertEquals("un million-et-unième", fmt.format(1000001), "1000001")
assertEquals("un million deuxième", fmt.format(1000002), "1000002")
assertEquals("deux millionième", fmt.format(2000000), "2000000")
assertEquals("deux million-et-unième", fmt.format(2000001), "2000001")
assertEquals("deux million deuxième", fmt.format(2000002), "2000002")
assertEquals("dix millionième", fmt.format(10000000), "10000000")
assertEquals("dix million-et-unième", fmt.format(10000001), "10000001")
assertEquals("dix million deuxième", fmt.format(10000002), "10000002")
assertEquals("vingt millionième", fmt.format(20000000), "20000000")
assertEquals("vingt million-et-unième", fmt.format(20000001), "20000001")
assertEquals("vingt million deuxième", fmt.format(20000002), "20000002")
assertEquals("cent millionième", fmt.format(100000000), "100000000")
assertEquals("cent million-et-unième", fmt.format(100000001), "100000001")
assertEquals("cent million deuxième", fmt.format(100000002), "100000002")
assertEquals("deux cent millionième", fmt.format(200000000), "200000000")
assertEquals("deux cent million-et-unième", fmt.format(200000001), "200000001")
assertEquals("deux cent million deuxième", fmt.format(200000002), "200000002")
assertEquals("un milliardième", fmt.format(1000000000), "1000000000")
assertEquals("un milliard-et-unième", fmt.format(1000000001), "1000000001")
assertEquals("un milliard deuxième", fmt.format(1000000002), "1000000002")
assertEquals("deux milliardième", fmt.format(2000000000), "2000000000")
assertEquals("deux milliard-et-unième", fmt.format(2000000001), "2000000001")
assertEquals("deux milliard deuxième", fmt.format(2000000002), "2000000002")
  }
  @Test
  fun spelloutOrdinalMasculinePlural() {
 val fmt = RBNFFr().spelloutOrdinalMasculinePlural
// nonsense assertEquals("moins premiers", fmt.format(-1), "-1")
// nonsense assertEquals("zéroièmes", fmt.format(0), "0")
// nonsense assertEquals("0,2s", fmt.format(0.2), "0.2")
// nonsense assertEquals("0,2s", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0s", fmt.format(0.02), "0.02")
// nonsense assertEquals("0s", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4,8s", fmt.format(4.751), "4.751")
// nonsense assertEquals("12,1s", fmt.format(12.051), "12.051")
// nonsense assertEquals("13s", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14s", fmt.format(14.02251), "14.02251")
assertEquals("premiers", fmt.format(1), "1")
assertEquals("deuxièmes", fmt.format(2), "2")
assertEquals("troisièmes", fmt.format(3), "3")
assertEquals("quatrièmes", fmt.format(4), "4")
assertEquals("cinquièmes", fmt.format(5), "5")
assertEquals("sixièmes", fmt.format(6), "6")
assertEquals("septièmes", fmt.format(7), "7")
assertEquals("huitièmes", fmt.format(8), "8")
assertEquals("neuvièmes", fmt.format(9), "9")
assertEquals("dixièmes", fmt.format(10), "10")
assertEquals("onzièmes", fmt.format(11), "11")
assertEquals("douzièmes", fmt.format(12), "12")
assertEquals("treizièmes", fmt.format(13), "13")
assertEquals("quatorzièmes", fmt.format(14), "14")
assertEquals("quinzièmes", fmt.format(15), "15")
assertEquals("seizièmes", fmt.format(16), "16")
assertEquals("dix-septièmes", fmt.format(17), "17")
assertEquals("dix-huitièmes", fmt.format(18), "18")
assertEquals("dix-neuvièmes", fmt.format(19), "19")
assertEquals("vingtièmes", fmt.format(20), "20")
assertEquals("vingt-et-unièmes", fmt.format(21), "21")
assertEquals("vingt-deuxièmes", fmt.format(22), "22")
assertEquals("vingt-troisièmes", fmt.format(23), "23")
assertEquals("vingt-quatrièmes", fmt.format(24), "24")
assertEquals("vingt-cinquièmes", fmt.format(25), "25")
assertEquals("vingt-sixièmes", fmt.format(26), "26")
assertEquals("vingt-septièmes", fmt.format(27), "27")
assertEquals("vingt-huitièmes", fmt.format(28), "28")
assertEquals("vingt-neuvièmes", fmt.format(29), "29")
assertEquals("trentièmes", fmt.format(30), "30")
assertEquals("trente-et-unièmes", fmt.format(31), "31")
assertEquals("quatre-vingt-dix-huitièmes", fmt.format(98), "98")
assertEquals("quatre-vingt-dix-neuvièmes", fmt.format(99), "99")
assertEquals("centièmes", fmt.format(100), "100")
assertEquals("cent-et-unièmes", fmt.format(101), "101")
assertEquals("cent deuxièmes", fmt.format(102), "102")
assertEquals("neuf cent quatre-vingt-dix-huitièmes", fmt.format(998), "998")
assertEquals("neuf cent quatre-vingt-dix-neuvièmes", fmt.format(999), "999")
assertEquals("millièmes", fmt.format(1000), "1000")
assertEquals("mille-et-unièmes", fmt.format(1001), "1001")
assertEquals("mille deuxièmes", fmt.format(1002), "1002")
assertEquals("mille neuf cent quatre-vingt-dix-huitièmes", fmt.format(1998), "1998")
assertEquals("mille neuf cent quatre-vingt-dix-neuvièmes", fmt.format(1999), "1999")
assertEquals("deux millièmes", fmt.format(2000), "2000")
assertEquals("deux mille-et-unièmes", fmt.format(2001), "2001")
assertEquals("deux mille deuxièmes", fmt.format(2002), "2002")
assertEquals("neuf mille neuf cent quatre-vingt-dix-huitièmes", fmt.format(9998), "9998")
assertEquals("neuf mille neuf cent quatre-vingt-dix-neuvièmes", fmt.format(9999), "9999")
assertEquals("dix millièmes", fmt.format(10000), "10000")
assertEquals("dix mille-et-unièmes", fmt.format(10001), "10001")
assertEquals("dix mille deuxièmes", fmt.format(10002), "10002")
assertEquals("cent millièmes", fmt.format(100000), "100000")
assertEquals("cent mille-et-unièmes", fmt.format(100001), "100001")
assertEquals("cent mille deuxièmes", fmt.format(100002), "100002")
assertEquals("deux cent millièmes", fmt.format(200000), "200000")
assertEquals("deux cent mille-et-unièmes", fmt.format(200001), "200001")
assertEquals("deux cent mille deuxièmes", fmt.format(200002), "200002")
assertEquals("un millionièmes", fmt.format(1000000), "1000000")
assertEquals("un million-et-unièmes", fmt.format(1000001), "1000001")
assertEquals("un million deuxièmes", fmt.format(1000002), "1000002")
assertEquals("deux millionièmes", fmt.format(2000000), "2000000")
assertEquals("deux million-et-unièmes", fmt.format(2000001), "2000001")
assertEquals("deux million deuxièmes", fmt.format(2000002), "2000002")
assertEquals("dix millionièmes", fmt.format(10000000), "10000000")
assertEquals("dix million-et-unièmes", fmt.format(10000001), "10000001")
assertEquals("dix million deuxièmes", fmt.format(10000002), "10000002")
assertEquals("vingt millionièmes", fmt.format(20000000), "20000000")
assertEquals("vingt million-et-unièmes", fmt.format(20000001), "20000001")
assertEquals("vingt million deuxièmes", fmt.format(20000002), "20000002")
assertEquals("cent millionièmes", fmt.format(100000000), "100000000")
assertEquals("cent million-et-unièmes", fmt.format(100000001), "100000001")
assertEquals("cent million deuxièmes", fmt.format(100000002), "100000002")
assertEquals("deux cent millionièmes", fmt.format(200000000), "200000000")
assertEquals("deux cent million-et-unièmes", fmt.format(200000001), "200000001")
assertEquals("deux cent million deuxièmes", fmt.format(200000002), "200000002")
assertEquals("un milliardièmes", fmt.format(1000000000), "1000000000")
assertEquals("un milliard-et-unièmes", fmt.format(1000000001), "1000000001")
assertEquals("un milliard deuxièmes", fmt.format(1000000002), "1000000002")
assertEquals("deux milliardièmes", fmt.format(2000000000), "2000000000")
assertEquals("deux milliard-et-unièmes", fmt.format(2000000001), "2000000001")
assertEquals("deux milliard deuxièmes", fmt.format(2000000002), "2000000002")
  }
  @Test
  fun spelloutCardinalFeminine() {
 val fmt = RBNFFr().spelloutCardinalFeminine
assertEquals("moins une", fmt.format(-1), "-1")
assertEquals("zéro", fmt.format(0), "0")
assertEquals("zéro virgule deux", fmt.format(0.2), "0.2")
assertEquals("zéro virgule deux trois quatre cinq", fmt.format(0.2345), "0.2345")
assertEquals("zéro virgule zéro deux", fmt.format(0.02), "0.02")
assertEquals("zéro virgule zéro deux une trois", fmt.format(0.0213), "0.0213")
assertEquals("quatre virgule sept cinq une", fmt.format(4.751), "4.751")
assertEquals("douze virgule zéro cinq une", fmt.format(12.051), "12.051")
assertEquals("treize virgule zéro deux cinq une", fmt.format(13.0251), "13.0251")
assertEquals("quatorze virgule zéro deux deux cinq une", fmt.format(14.02251), "14.02251")
assertEquals("une", fmt.format(1), "1")
assertEquals("deux", fmt.format(2), "2")
assertEquals("trois", fmt.format(3), "3")
assertEquals("quatre", fmt.format(4), "4")
assertEquals("cinq", fmt.format(5), "5")
assertEquals("six", fmt.format(6), "6")
assertEquals("sept", fmt.format(7), "7")
assertEquals("huit", fmt.format(8), "8")
assertEquals("neuf", fmt.format(9), "9")
assertEquals("dix", fmt.format(10), "10")
assertEquals("onze", fmt.format(11), "11")
assertEquals("douze", fmt.format(12), "12")
assertEquals("treize", fmt.format(13), "13")
assertEquals("quatorze", fmt.format(14), "14")
assertEquals("quinze", fmt.format(15), "15")
assertEquals("seize", fmt.format(16), "16")
assertEquals("dix-sept", fmt.format(17), "17")
assertEquals("dix-huit", fmt.format(18), "18")
assertEquals("dix-neuf", fmt.format(19), "19")
assertEquals("vingt", fmt.format(20), "20")
assertEquals("vingt-et-une", fmt.format(21), "21")
assertEquals("vingt-deux", fmt.format(22), "22")
assertEquals("vingt-trois", fmt.format(23), "23")
assertEquals("vingt-quatre", fmt.format(24), "24")
assertEquals("vingt-cinq", fmt.format(25), "25")
assertEquals("vingt-six", fmt.format(26), "26")
assertEquals("vingt-sept", fmt.format(27), "27")
assertEquals("vingt-huit", fmt.format(28), "28")
assertEquals("vingt-neuf", fmt.format(29), "29")
assertEquals("trente", fmt.format(30), "30")
assertEquals("trente-et-une", fmt.format(31), "31")
assertEquals("quatre-vingt-dix-huit", fmt.format(98), "98")
assertEquals("quatre-vingt-dix-neuf", fmt.format(99), "99")
assertEquals("cent", fmt.format(100), "100")
assertEquals("cent une", fmt.format(101), "101")
assertEquals("cent deux", fmt.format(102), "102")
assertEquals("neuf cent quatre-vingt-dix-huit", fmt.format(998), "998")
assertEquals("neuf cent quatre-vingt-dix-neuf", fmt.format(999), "999")
assertEquals("mille", fmt.format(1000), "1000")
assertEquals("mille une", fmt.format(1001), "1001")
assertEquals("mille deux", fmt.format(1002), "1002")
assertEquals("mille neuf cent quatre-vingt-dix-huit", fmt.format(1998), "1998")
assertEquals("mille neuf cent quatre-vingt-dix-neuf", fmt.format(1999), "1999")
assertEquals("deux mille", fmt.format(2000), "2000")
assertEquals("deux mille une", fmt.format(2001), "2001")
assertEquals("deux mille deux", fmt.format(2002), "2002")
assertEquals("neuf mille neuf cent quatre-vingt-dix-huit", fmt.format(9998), "9998")
assertEquals("neuf mille neuf cent quatre-vingt-dix-neuf", fmt.format(9999), "9999")
assertEquals("dix mille", fmt.format(10000), "10000")
assertEquals("dix mille une", fmt.format(10001), "10001")
assertEquals("dix mille deux", fmt.format(10002), "10002")
assertEquals("cent mille", fmt.format(100000), "100000")
assertEquals("cent mille une", fmt.format(100001), "100001")
assertEquals("cent mille deux", fmt.format(100002), "100002")
assertEquals("deux cent mille", fmt.format(200000), "200000")
assertEquals("deux cent mille une", fmt.format(200001), "200001")
assertEquals("deux cent mille deux", fmt.format(200002), "200002")
assertEquals("un million", fmt.format(1000000), "1000000")
assertEquals("un million une", fmt.format(1000001), "1000001")
assertEquals("un million deux", fmt.format(1000002), "1000002")
assertEquals("deux millions", fmt.format(2000000), "2000000")
assertEquals("deux millions une", fmt.format(2000001), "2000001")
assertEquals("deux millions deux", fmt.format(2000002), "2000002")
assertEquals("dix millions", fmt.format(10000000), "10000000")
assertEquals("dix millions une", fmt.format(10000001), "10000001")
assertEquals("dix millions deux", fmt.format(10000002), "10000002")
assertEquals("vingt millions", fmt.format(20000000), "20000000")
assertEquals("vingt millions une", fmt.format(20000001), "20000001")
assertEquals("vingt millions deux", fmt.format(20000002), "20000002")
assertEquals("cent millions", fmt.format(100000000), "100000000")
assertEquals("cent millions une", fmt.format(100000001), "100000001")
assertEquals("cent millions deux", fmt.format(100000002), "100000002")
assertEquals("deux cent millions", fmt.format(200000000), "200000000")
assertEquals("deux cent millions une", fmt.format(200000001), "200000001")
assertEquals("deux cent millions deux", fmt.format(200000002), "200000002")
assertEquals("un milliard", fmt.format(1000000000), "1000000000")
assertEquals("un milliard une", fmt.format(1000000001), "1000000001")
assertEquals("un milliard deux", fmt.format(1000000002), "1000000002")
assertEquals("deux milliards", fmt.format(2000000000), "2000000000")
assertEquals("deux milliards une", fmt.format(2000000001), "2000000001")
assertEquals("deux milliards deux", fmt.format(2000000002), "2000000002")
  }
  @Test
  fun spelloutCardinalMasculine() {
 val fmt = RBNFFr().spelloutCardinalMasculine
assertEquals("moins un", fmt.format(-1), "-1")
assertEquals("zéro", fmt.format(0), "0")
assertEquals("zéro virgule deux", fmt.format(0.2), "0.2")
assertEquals("zéro virgule deux trois quatre cinq", fmt.format(0.2345), "0.2345")
assertEquals("zéro virgule zéro deux", fmt.format(0.02), "0.02")
assertEquals("zéro virgule zéro deux un trois", fmt.format(0.0213), "0.0213")
assertEquals("quatre virgule sept cinq un", fmt.format(4.751), "4.751")
assertEquals("douze virgule zéro cinq un", fmt.format(12.051), "12.051")
assertEquals("treize virgule zéro deux cinq un", fmt.format(13.0251), "13.0251")
assertEquals("quatorze virgule zéro deux deux cinq un", fmt.format(14.02251), "14.02251")
assertEquals("un", fmt.format(1), "1")
assertEquals("deux", fmt.format(2), "2")
assertEquals("trois", fmt.format(3), "3")
assertEquals("quatre", fmt.format(4), "4")
assertEquals("cinq", fmt.format(5), "5")
assertEquals("six", fmt.format(6), "6")
assertEquals("sept", fmt.format(7), "7")
assertEquals("huit", fmt.format(8), "8")
assertEquals("neuf", fmt.format(9), "9")
assertEquals("dix", fmt.format(10), "10")
assertEquals("onze", fmt.format(11), "11")
assertEquals("douze", fmt.format(12), "12")
assertEquals("treize", fmt.format(13), "13")
assertEquals("quatorze", fmt.format(14), "14")
assertEquals("quinze", fmt.format(15), "15")
assertEquals("seize", fmt.format(16), "16")
assertEquals("dix-sept", fmt.format(17), "17")
assertEquals("dix-huit", fmt.format(18), "18")
assertEquals("dix-neuf", fmt.format(19), "19")
assertEquals("vingt", fmt.format(20), "20")
assertEquals("vingt-et-un", fmt.format(21), "21")
assertEquals("vingt-deux", fmt.format(22), "22")
assertEquals("vingt-trois", fmt.format(23), "23")
assertEquals("vingt-quatre", fmt.format(24), "24")
assertEquals("vingt-cinq", fmt.format(25), "25")
assertEquals("vingt-six", fmt.format(26), "26")
assertEquals("vingt-sept", fmt.format(27), "27")
assertEquals("vingt-huit", fmt.format(28), "28")
assertEquals("vingt-neuf", fmt.format(29), "29")
assertEquals("trente", fmt.format(30), "30")
assertEquals("trente-et-un", fmt.format(31), "31")
assertEquals("quatre-vingt-dix-huit", fmt.format(98), "98")
assertEquals("quatre-vingt-dix-neuf", fmt.format(99), "99")
assertEquals("cent", fmt.format(100), "100")
assertEquals("cent un", fmt.format(101), "101")
assertEquals("cent deux", fmt.format(102), "102")
assertEquals("neuf cent quatre-vingt-dix-huit", fmt.format(998), "998")
assertEquals("neuf cent quatre-vingt-dix-neuf", fmt.format(999), "999")
assertEquals("mille", fmt.format(1000), "1000")
assertEquals("mille un", fmt.format(1001), "1001")
assertEquals("mille deux", fmt.format(1002), "1002")
assertEquals("mille neuf cent quatre-vingt-dix-huit", fmt.format(1998), "1998")
assertEquals("mille neuf cent quatre-vingt-dix-neuf", fmt.format(1999), "1999")
assertEquals("deux mille", fmt.format(2000), "2000")
assertEquals("deux mille un", fmt.format(2001), "2001")
assertEquals("deux mille deux", fmt.format(2002), "2002")
assertEquals("neuf mille neuf cent quatre-vingt-dix-huit", fmt.format(9998), "9998")
assertEquals("neuf mille neuf cent quatre-vingt-dix-neuf", fmt.format(9999), "9999")
assertEquals("dix mille", fmt.format(10000), "10000")
assertEquals("dix mille un", fmt.format(10001), "10001")
assertEquals("dix mille deux", fmt.format(10002), "10002")
assertEquals("cent mille", fmt.format(100000), "100000")
assertEquals("cent mille un", fmt.format(100001), "100001")
assertEquals("cent mille deux", fmt.format(100002), "100002")
assertEquals("deux cent mille", fmt.format(200000), "200000")
assertEquals("deux cent mille un", fmt.format(200001), "200001")
assertEquals("deux cent mille deux", fmt.format(200002), "200002")
assertEquals("un million", fmt.format(1000000), "1000000")
assertEquals("un million un", fmt.format(1000001), "1000001")
assertEquals("un million deux", fmt.format(1000002), "1000002")
assertEquals("deux millions", fmt.format(2000000), "2000000")
assertEquals("deux millions un", fmt.format(2000001), "2000001")
assertEquals("deux millions deux", fmt.format(2000002), "2000002")
assertEquals("dix millions", fmt.format(10000000), "10000000")
assertEquals("dix millions un", fmt.format(10000001), "10000001")
assertEquals("dix millions deux", fmt.format(10000002), "10000002")
assertEquals("vingt millions", fmt.format(20000000), "20000000")
assertEquals("vingt millions un", fmt.format(20000001), "20000001")
assertEquals("vingt millions deux", fmt.format(20000002), "20000002")
assertEquals("cent millions", fmt.format(100000000), "100000000")
assertEquals("cent millions un", fmt.format(100000001), "100000001")
assertEquals("cent millions deux", fmt.format(100000002), "100000002")
assertEquals("deux cent millions", fmt.format(200000000), "200000000")
assertEquals("deux cent millions un", fmt.format(200000001), "200000001")
assertEquals("deux cent millions deux", fmt.format(200000002), "200000002")
assertEquals("un milliard", fmt.format(1000000000), "1000000000")
assertEquals("un milliard un", fmt.format(1000000001), "1000000001")
assertEquals("un milliard deux", fmt.format(1000000002), "1000000002")
assertEquals("deux milliards", fmt.format(2000000000), "2000000000")
assertEquals("deux milliards un", fmt.format(2000000001), "2000000001")
assertEquals("deux milliards deux", fmt.format(2000000002), "2000000002")
  }
  @Test
  fun spelloutNumbering() {
 val fmt = RBNFFr().spelloutNumbering
assertEquals("moins un", fmt.format(-1), "-1")
assertEquals("zéro", fmt.format(0), "0")
assertEquals("zéro virgule deux", fmt.format(0.2), "0.2")
assertEquals("zéro virgule deux trois quatre cinq", fmt.format(0.2345), "0.2345")
assertEquals("zéro virgule zéro deux", fmt.format(0.02), "0.02")
assertEquals("zéro virgule zéro deux un trois", fmt.format(0.0213), "0.0213")
assertEquals("quatre virgule sept cinq un", fmt.format(4.751), "4.751")
assertEquals("douze virgule zéro cinq un", fmt.format(12.051), "12.051")
assertEquals("treize virgule zéro deux cinq un", fmt.format(13.0251), "13.0251")
assertEquals("quatorze virgule zéro deux deux cinq un", fmt.format(14.02251), "14.02251")
assertEquals("un", fmt.format(1), "1")
assertEquals("deux", fmt.format(2), "2")
assertEquals("trois", fmt.format(3), "3")
assertEquals("quatre", fmt.format(4), "4")
assertEquals("cinq", fmt.format(5), "5")
assertEquals("six", fmt.format(6), "6")
assertEquals("sept", fmt.format(7), "7")
assertEquals("huit", fmt.format(8), "8")
assertEquals("neuf", fmt.format(9), "9")
assertEquals("dix", fmt.format(10), "10")
assertEquals("onze", fmt.format(11), "11")
assertEquals("douze", fmt.format(12), "12")
assertEquals("treize", fmt.format(13), "13")
assertEquals("quatorze", fmt.format(14), "14")
assertEquals("quinze", fmt.format(15), "15")
assertEquals("seize", fmt.format(16), "16")
assertEquals("dix-sept", fmt.format(17), "17")
assertEquals("dix-huit", fmt.format(18), "18")
assertEquals("dix-neuf", fmt.format(19), "19")
assertEquals("vingt", fmt.format(20), "20")
assertEquals("vingt-et-un", fmt.format(21), "21")
assertEquals("vingt-deux", fmt.format(22), "22")
assertEquals("vingt-trois", fmt.format(23), "23")
assertEquals("vingt-quatre", fmt.format(24), "24")
assertEquals("vingt-cinq", fmt.format(25), "25")
assertEquals("vingt-six", fmt.format(26), "26")
assertEquals("vingt-sept", fmt.format(27), "27")
assertEquals("vingt-huit", fmt.format(28), "28")
assertEquals("vingt-neuf", fmt.format(29), "29")
assertEquals("trente", fmt.format(30), "30")
assertEquals("trente-et-un", fmt.format(31), "31")
assertEquals("quatre-vingt-dix-huit", fmt.format(98), "98")
assertEquals("quatre-vingt-dix-neuf", fmt.format(99), "99")
assertEquals("cent", fmt.format(100), "100")
assertEquals("cent un", fmt.format(101), "101")
assertEquals("cent deux", fmt.format(102), "102")
assertEquals("neuf cent quatre-vingt-dix-huit", fmt.format(998), "998")
assertEquals("neuf cent quatre-vingt-dix-neuf", fmt.format(999), "999")
assertEquals("mille", fmt.format(1000), "1000")
assertEquals("mille un", fmt.format(1001), "1001")
assertEquals("mille deux", fmt.format(1002), "1002")
assertEquals("mille neuf cent quatre-vingt-dix-huit", fmt.format(1998), "1998")
assertEquals("mille neuf cent quatre-vingt-dix-neuf", fmt.format(1999), "1999")
assertEquals("deux mille", fmt.format(2000), "2000")
assertEquals("deux mille un", fmt.format(2001), "2001")
assertEquals("deux mille deux", fmt.format(2002), "2002")
assertEquals("neuf mille neuf cent quatre-vingt-dix-huit", fmt.format(9998), "9998")
assertEquals("neuf mille neuf cent quatre-vingt-dix-neuf", fmt.format(9999), "9999")
assertEquals("dix mille", fmt.format(10000), "10000")
assertEquals("dix mille un", fmt.format(10001), "10001")
assertEquals("dix mille deux", fmt.format(10002), "10002")
assertEquals("cent mille", fmt.format(100000), "100000")
assertEquals("cent mille un", fmt.format(100001), "100001")
assertEquals("cent mille deux", fmt.format(100002), "100002")
assertEquals("deux cent mille", fmt.format(200000), "200000")
assertEquals("deux cent mille un", fmt.format(200001), "200001")
assertEquals("deux cent mille deux", fmt.format(200002), "200002")
assertEquals("un million", fmt.format(1000000), "1000000")
assertEquals("un million un", fmt.format(1000001), "1000001")
assertEquals("un million deux", fmt.format(1000002), "1000002")
assertEquals("deux millions", fmt.format(2000000), "2000000")
assertEquals("deux millions un", fmt.format(2000001), "2000001")
assertEquals("deux millions deux", fmt.format(2000002), "2000002")
assertEquals("dix millions", fmt.format(10000000), "10000000")
assertEquals("dix millions un", fmt.format(10000001), "10000001")
assertEquals("dix millions deux", fmt.format(10000002), "10000002")
assertEquals("vingt millions", fmt.format(20000000), "20000000")
assertEquals("vingt millions un", fmt.format(20000001), "20000001")
assertEquals("vingt millions deux", fmt.format(20000002), "20000002")
assertEquals("cent millions", fmt.format(100000000), "100000000")
assertEquals("cent millions un", fmt.format(100000001), "100000001")
assertEquals("cent millions deux", fmt.format(100000002), "100000002")
assertEquals("deux cent millions", fmt.format(200000000), "200000000")
assertEquals("deux cent millions un", fmt.format(200000001), "200000001")
assertEquals("deux cent millions deux", fmt.format(200000002), "200000002")
assertEquals("un milliard", fmt.format(1000000000), "1000000000")
assertEquals("un milliard un", fmt.format(1000000001), "1000000001")
assertEquals("un milliard deux", fmt.format(1000000002), "1000000002")
assertEquals("deux milliards", fmt.format(2000000000), "2000000000")
assertEquals("deux milliards un", fmt.format(2000000001), "2000000001")
assertEquals("deux milliards deux", fmt.format(2000000002), "2000000002")
  }
  @Test
  fun spelloutNumberingYear() {
 val fmt = RBNFFr().spelloutNumberingYear
// nonsense assertEquals("moins un", fmt.format(-1), "-1")
// nonsense assertEquals("zéro", fmt.format(0), "0")
// nonsense assertEquals("0,2", fmt.format(0.2), "0.2")
// nonsense assertEquals("0,2", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0,0", fmt.format(0.02), "0.02")
// nonsense assertEquals("0,0", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4,8", fmt.format(4.751), "4.751")
// nonsense assertEquals("12,1", fmt.format(12.051), "12.051")
// nonsense assertEquals("13,0", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14,0", fmt.format(14.02251), "14.02251")
assertEquals("un", fmt.format(1), "1")
assertEquals("deux", fmt.format(2), "2")
assertEquals("trois", fmt.format(3), "3")
assertEquals("quatre", fmt.format(4), "4")
assertEquals("cinq", fmt.format(5), "5")
assertEquals("six", fmt.format(6), "6")
assertEquals("sept", fmt.format(7), "7")
assertEquals("huit", fmt.format(8), "8")
assertEquals("neuf", fmt.format(9), "9")
assertEquals("dix", fmt.format(10), "10")
assertEquals("onze", fmt.format(11), "11")
assertEquals("douze", fmt.format(12), "12")
assertEquals("treize", fmt.format(13), "13")
assertEquals("quatorze", fmt.format(14), "14")
assertEquals("quinze", fmt.format(15), "15")
assertEquals("seize", fmt.format(16), "16")
assertEquals("dix-sept", fmt.format(17), "17")
assertEquals("dix-huit", fmt.format(18), "18")
assertEquals("dix-neuf", fmt.format(19), "19")
assertEquals("vingt", fmt.format(20), "20")
assertEquals("vingt-et-un", fmt.format(21), "21")
assertEquals("vingt-deux", fmt.format(22), "22")
assertEquals("vingt-trois", fmt.format(23), "23")
assertEquals("vingt-quatre", fmt.format(24), "24")
assertEquals("vingt-cinq", fmt.format(25), "25")
assertEquals("vingt-six", fmt.format(26), "26")
assertEquals("vingt-sept", fmt.format(27), "27")
assertEquals("vingt-huit", fmt.format(28), "28")
assertEquals("vingt-neuf", fmt.format(29), "29")
assertEquals("trente", fmt.format(30), "30")
assertEquals("trente-et-un", fmt.format(31), "31")
assertEquals("quatre-vingt-dix-huit", fmt.format(98), "98")
assertEquals("quatre-vingt-dix-neuf", fmt.format(99), "99")
assertEquals("cent", fmt.format(100), "100")
assertEquals("cent un", fmt.format(101), "101")
assertEquals("cent deux", fmt.format(102), "102")
assertEquals("neuf cent quatre-vingt-dix-huit", fmt.format(998), "998")
assertEquals("neuf cent quatre-vingt-dix-neuf", fmt.format(999), "999")
assertEquals("mille", fmt.format(1000), "1000")
assertEquals("mille un", fmt.format(1001), "1001")
assertEquals("mille deux", fmt.format(1002), "1002")
assertEquals("dix-neuf-cent quatre-vingt-dix-huit", fmt.format(1998), "1998")
assertEquals("dix-neuf-cent quatre-vingt-dix-neuf", fmt.format(1999), "1999")
assertEquals("deux mille", fmt.format(2000), "2000")
assertEquals("deux mille un", fmt.format(2001), "2001")
assertEquals("deux mille deux", fmt.format(2002), "2002")
assertEquals("neuf mille neuf cent quatre-vingt-dix-huit", fmt.format(9998), "9998")
assertEquals("neuf mille neuf cent quatre-vingt-dix-neuf", fmt.format(9999), "9999")
assertEquals("dix mille", fmt.format(10000), "10000")
assertEquals("dix mille un", fmt.format(10001), "10001")
assertEquals("dix mille deux", fmt.format(10002), "10002")
assertEquals("cent mille", fmt.format(100000), "100000")
assertEquals("cent mille un", fmt.format(100001), "100001")
assertEquals("cent mille deux", fmt.format(100002), "100002")
assertEquals("deux cent mille", fmt.format(200000), "200000")
assertEquals("deux cent mille un", fmt.format(200001), "200001")
assertEquals("deux cent mille deux", fmt.format(200002), "200002")
assertEquals("un million", fmt.format(1000000), "1000000")
assertEquals("un million un", fmt.format(1000001), "1000001")
assertEquals("un million deux", fmt.format(1000002), "1000002")
assertEquals("deux millions", fmt.format(2000000), "2000000")
assertEquals("deux millions un", fmt.format(2000001), "2000001")
assertEquals("deux millions deux", fmt.format(2000002), "2000002")
assertEquals("dix millions", fmt.format(10000000), "10000000")
assertEquals("dix millions un", fmt.format(10000001), "10000001")
assertEquals("dix millions deux", fmt.format(10000002), "10000002")
assertEquals("vingt millions", fmt.format(20000000), "20000000")
assertEquals("vingt millions un", fmt.format(20000001), "20000001")
assertEquals("vingt millions deux", fmt.format(20000002), "20000002")
assertEquals("cent millions", fmt.format(100000000), "100000000")
assertEquals("cent millions un", fmt.format(100000001), "100000001")
assertEquals("cent millions deux", fmt.format(100000002), "100000002")
assertEquals("deux cent millions", fmt.format(200000000), "200000000")
assertEquals("deux cent millions un", fmt.format(200000001), "200000001")
assertEquals("deux cent millions deux", fmt.format(200000002), "200000002")
assertEquals("un milliard", fmt.format(1000000000), "1000000000")
assertEquals("un milliard un", fmt.format(1000000001), "1000000001")
assertEquals("un milliard deux", fmt.format(1000000002), "1000000002")
assertEquals("deux milliards", fmt.format(2000000000), "2000000000")
assertEquals("deux milliards un", fmt.format(2000000001), "2000000001")
assertEquals("deux milliards deux", fmt.format(2000000002), "2000000002")
  }
}
