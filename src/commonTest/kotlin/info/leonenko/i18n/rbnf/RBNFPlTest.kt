package info.leonenko.i18n.rbnf

import kotlin.test.Test
import kotlin.test.assertEquals

class RBNFPlTest {
    @Test
    fun spelloutCardinalNeuterLocative() {
        val fmt = RBNFPl().spelloutCardinalNeuterLocative
        assertEquals("minus jednym", fmt.format(-1), "-1")
        assertEquals("zerze", fmt.format(0), "0")
        assertEquals("zerze przecinek dwóch", fmt.format(0.2), "0.2")
        assertEquals("zerze przecinek dwóch trzech czterech pięciu", fmt.format(0.2345), "0.2345")
        assertEquals("zerze przecinek zerze dwóch", fmt.format(0.02), "0.02")
        assertEquals("zerze przecinek zerze dwóch jednym trzech", fmt.format(0.0213), "0.0213")
        assertEquals("czterech przecinek siedmiu pięciu jednym", fmt.format(4.751), "4.751")
        assertEquals("dwunastu przecinek zerze pięciu jednym", fmt.format(12.051), "12.051")
        assertEquals("trzynastu przecinek zerze dwóch pięciu jednym", fmt.format(13.0251), "13.0251")
        assertEquals("czternastu przecinek zerze dwóch dwóch pięciu jednym", fmt.format(14.02251), "14.02251")
        assertEquals("jednym", fmt.format(1), "1")
        assertEquals("dwóch", fmt.format(2), "2")
        assertEquals("trzech", fmt.format(3), "3")
        assertEquals("czterech", fmt.format(4), "4")
        assertEquals("pięciu", fmt.format(5), "5")
        assertEquals("sześciu", fmt.format(6), "6")
        assertEquals("siedmiu", fmt.format(7), "7")
        assertEquals("ośmiu", fmt.format(8), "8")
        assertEquals("dziewięciu", fmt.format(9), "9")
        assertEquals("dziesięciu", fmt.format(10), "10")
        assertEquals("jedenastu", fmt.format(11), "11")
        assertEquals("dwunastu", fmt.format(12), "12")
        assertEquals("trzynastu", fmt.format(13), "13")
        assertEquals("czternastu", fmt.format(14), "14")
        assertEquals("piętnastu", fmt.format(15), "15")
        assertEquals("szesnastu", fmt.format(16), "16")
        assertEquals("siedemnastu", fmt.format(17), "17")
        assertEquals("osiemnastu", fmt.format(18), "18")
        assertEquals("dziewiętnastu", fmt.format(19), "19")
        assertEquals("dwudziestu", fmt.format(20), "20")
        assertEquals("dwudziestu jeden", fmt.format(21), "21")
        assertEquals("dwudziestu dwóch", fmt.format(22), "22")
        assertEquals("dwudziestu trzech", fmt.format(23), "23")
        assertEquals("dwudziestu czterech", fmt.format(24), "24")
        assertEquals("dwudziestu pięciu", fmt.format(25), "25")
        assertEquals("dwudziestu sześciu", fmt.format(26), "26")
        assertEquals("dwudziestu siedmiu", fmt.format(27), "27")
        assertEquals("dwudziestu ośmiu", fmt.format(28), "28")
        assertEquals("dwudziestu dziewięciu", fmt.format(29), "29")
        assertEquals("trzydziestu", fmt.format(30), "30")
        assertEquals("trzydziestu jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesięciu ośmiu", fmt.format(98), "98")
        assertEquals("dziewięćdziesięciu dziewięciu", fmt.format(99), "99")
        assertEquals("stu", fmt.format(100), "100")
        assertEquals("stu jeden", fmt.format(101), "101")
        assertEquals("stu dwóch", fmt.format(102), "102")
        assertEquals("dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(998), "998")
        assertEquals("dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(999), "999")
        assertEquals("tysiącu", fmt.format(1000), "1000")
        assertEquals("tysiącu jeden", fmt.format(1001), "1001")
        assertEquals("tysiącu dwóch", fmt.format(1002), "1002")
        assertEquals("tysiącu dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(1998), "1998")
        assertEquals("tysiącu dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(1999), "1999")
        assertEquals("dwóch tysiącach", fmt.format(2000), "2000")
        assertEquals("dwóch tysiącach jeden", fmt.format(2001), "2001")
        assertEquals("dwóch tysiącach dwóch", fmt.format(2002), "2002")
        assertEquals("dziewięciu tysiącach dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(9998), "9998")
        assertEquals("dziewięciu tysiącach dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(9999), "9999")
        assertEquals("dziesięciu tysiącach", fmt.format(10000), "10000")
        assertEquals("dziesięciu tysiącach jeden", fmt.format(10001), "10001")
        assertEquals("dziesięciu tysiącach dwóch", fmt.format(10002), "10002")
        assertEquals("stu tysiącach", fmt.format(100000), "100000")
        assertEquals("stu tysiącach jeden", fmt.format(100001), "100001")
        assertEquals("stu tysiącach dwóch", fmt.format(100002), "100002")
        assertEquals("dwustu tysiącach", fmt.format(200000), "200000")
        assertEquals("dwustu tysiącach jeden", fmt.format(200001), "200001")
        assertEquals("dwustu tysiącach dwóch", fmt.format(200002), "200002")
        assertEquals("milionie", fmt.format(1000000), "1000000")
        assertEquals("milionie jeden", fmt.format(1000001), "1000001")
        assertEquals("milionie dwóch", fmt.format(1000002), "1000002")
        assertEquals("dwóch milionach", fmt.format(2000000), "2000000")
        assertEquals("dwóch milionach jeden", fmt.format(2000001), "2000001")
        assertEquals("dwóch milionach dwóch", fmt.format(2000002), "2000002")
        assertEquals("dziesięciu milionach", fmt.format(10000000), "10000000")
        assertEquals("dziesięciu milionach jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięciu milionach dwóch", fmt.format(10000002), "10000002")
        assertEquals("dwudziestu milionach", fmt.format(20000000), "20000000")
        assertEquals("dwudziestu milionach jeden", fmt.format(20000001), "20000001")
        assertEquals("dwudziestu milionach dwóch", fmt.format(20000002), "20000002")
        assertEquals("stu milionach", fmt.format(100000000), "100000000")
        assertEquals("stu milionach jeden", fmt.format(100000001), "100000001")
        assertEquals("stu milionach dwóch", fmt.format(100000002), "100000002")
        assertEquals("dwustu milionach", fmt.format(200000000), "200000000")
        assertEquals("dwustu milionach jeden", fmt.format(200000001), "200000001")
        assertEquals("dwustu milionach dwóch", fmt.format(200000002), "200000002")
        assertEquals("miliardzie", fmt.format(1000000000), "1000000000")
        assertEquals("miliardzie jeden", fmt.format(1000000001), "1000000001")
        assertEquals("miliardzie dwóch", fmt.format(1000000002), "1000000002")
        assertEquals("dwóch miliardach", fmt.format(2000000000), "2000000000")
        assertEquals("dwóch miliardach jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwóch miliardach dwóch", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalFeminineLocative() {
        val fmt = RBNFPl().spelloutCardinalFeminineLocative
        assertEquals("minus jednej", fmt.format(-1), "-1")
        assertEquals("zerze", fmt.format(0), "0")
        assertEquals("zerze przecinek dwóch", fmt.format(0.2), "0.2")
        assertEquals("zerze przecinek dwóch trzech czterech pięciu", fmt.format(0.2345), "0.2345")
        assertEquals("zerze przecinek zerze dwóch", fmt.format(0.02), "0.02")
        assertEquals("zerze przecinek zerze dwóch jednej trzech", fmt.format(0.0213), "0.0213")
        assertEquals("czterech przecinek siedmiu pięciu jednej", fmt.format(4.751), "4.751")
        assertEquals("dwunastu przecinek zerze pięciu jednej", fmt.format(12.051), "12.051")
        assertEquals("trzynastu przecinek zerze dwóch pięciu jednej", fmt.format(13.0251), "13.0251")
        assertEquals("czternastu przecinek zerze dwóch dwóch pięciu jednej", fmt.format(14.02251), "14.02251")
        assertEquals("jednej", fmt.format(1), "1")
        assertEquals("dwóch", fmt.format(2), "2")
        assertEquals("trzech", fmt.format(3), "3")
        assertEquals("czterech", fmt.format(4), "4")
        assertEquals("pięciu", fmt.format(5), "5")
        assertEquals("sześciu", fmt.format(6), "6")
        assertEquals("siedmiu", fmt.format(7), "7")
        assertEquals("ośmiu", fmt.format(8), "8")
        assertEquals("dziewięciu", fmt.format(9), "9")
        assertEquals("dziesięciu", fmt.format(10), "10")
        assertEquals("jedenastu", fmt.format(11), "11")
        assertEquals("dwunastu", fmt.format(12), "12")
        assertEquals("trzynastu", fmt.format(13), "13")
        assertEquals("czternastu", fmt.format(14), "14")
        assertEquals("piętnastu", fmt.format(15), "15")
        assertEquals("szesnastu", fmt.format(16), "16")
        assertEquals("siedemnastu", fmt.format(17), "17")
        assertEquals("osiemnastu", fmt.format(18), "18")
        assertEquals("dziewiętnastu", fmt.format(19), "19")
        assertEquals("dwudziestu", fmt.format(20), "20")
        assertEquals("dwudziestu jeden", fmt.format(21), "21")
        assertEquals("dwudziestu dwóch", fmt.format(22), "22")
        assertEquals("dwudziestu trzech", fmt.format(23), "23")
        assertEquals("dwudziestu czterech", fmt.format(24), "24")
        assertEquals("dwudziestu pięciu", fmt.format(25), "25")
        assertEquals("dwudziestu sześciu", fmt.format(26), "26")
        assertEquals("dwudziestu siedmiu", fmt.format(27), "27")
        assertEquals("dwudziestu ośmiu", fmt.format(28), "28")
        assertEquals("dwudziestu dziewięciu", fmt.format(29), "29")
        assertEquals("trzydziestu", fmt.format(30), "30")
        assertEquals("trzydziestu jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesięciu ośmiu", fmt.format(98), "98")
        assertEquals("dziewięćdziesięciu dziewięciu", fmt.format(99), "99")
        assertEquals("stu", fmt.format(100), "100")
        assertEquals("stu jeden", fmt.format(101), "101")
        assertEquals("stu dwóch", fmt.format(102), "102")
        assertEquals("dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(998), "998")
        assertEquals("dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(999), "999")
        assertEquals("tysiącu", fmt.format(1000), "1000")
        assertEquals("tysiącu jeden", fmt.format(1001), "1001")
        assertEquals("tysiącu dwóch", fmt.format(1002), "1002")
        assertEquals("tysiącu dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(1998), "1998")
        assertEquals("tysiącu dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(1999), "1999")
        assertEquals("dwóch tysiącach", fmt.format(2000), "2000")
        assertEquals("dwóch tysiącach jeden", fmt.format(2001), "2001")
        assertEquals("dwóch tysiącach dwóch", fmt.format(2002), "2002")
        assertEquals("dziewięciu tysiącach dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(9998), "9998")
        assertEquals("dziewięciu tysiącach dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(9999), "9999")
        assertEquals("dziesięciu tysiącach", fmt.format(10000), "10000")
        assertEquals("dziesięciu tysiącach jeden", fmt.format(10001), "10001")
        assertEquals("dziesięciu tysiącach dwóch", fmt.format(10002), "10002")
        assertEquals("stu tysiącach", fmt.format(100000), "100000")
        assertEquals("stu tysiącach jeden", fmt.format(100001), "100001")
        assertEquals("stu tysiącach dwóch", fmt.format(100002), "100002")
        assertEquals("dwustu tysiącach", fmt.format(200000), "200000")
        assertEquals("dwustu tysiącach jeden", fmt.format(200001), "200001")
        assertEquals("dwustu tysiącach dwóch", fmt.format(200002), "200002")
        assertEquals("milionie", fmt.format(1000000), "1000000")
        assertEquals("milionie jeden", fmt.format(1000001), "1000001")
        assertEquals("milionie dwóch", fmt.format(1000002), "1000002")
        assertEquals("dwóch milionach", fmt.format(2000000), "2000000")
        assertEquals("dwóch milionach jeden", fmt.format(2000001), "2000001")
        assertEquals("dwóch milionach dwóch", fmt.format(2000002), "2000002")
        assertEquals("dziesięciu milionach", fmt.format(10000000), "10000000")
        assertEquals("dziesięciu milionach jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięciu milionach dwóch", fmt.format(10000002), "10000002")
        assertEquals("dwudziestu milionach", fmt.format(20000000), "20000000")
        assertEquals("dwudziestu milionach jeden", fmt.format(20000001), "20000001")
        assertEquals("dwudziestu milionach dwóch", fmt.format(20000002), "20000002")
        assertEquals("stu milionach", fmt.format(100000000), "100000000")
        assertEquals("stu milionach jeden", fmt.format(100000001), "100000001")
        assertEquals("stu milionach dwóch", fmt.format(100000002), "100000002")
        assertEquals("dwustu milionach", fmt.format(200000000), "200000000")
        assertEquals("dwustu milionach jeden", fmt.format(200000001), "200000001")
        assertEquals("dwustu milionach dwóch", fmt.format(200000002), "200000002")
        assertEquals("miliardzie", fmt.format(1000000000), "1000000000")
        assertEquals("miliardzie jeden", fmt.format(1000000001), "1000000001")
        assertEquals("miliardzie dwóch", fmt.format(1000000002), "1000000002")
        assertEquals("dwóch miliardach", fmt.format(2000000000), "2000000000")
        assertEquals("dwóch miliardach jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwóch miliardach dwóch", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalMasculineLocative() {
        val fmt = RBNFPl().spelloutCardinalMasculineLocative
        assertEquals("minus jednym", fmt.format(-1), "-1")
        assertEquals("zerze", fmt.format(0), "0")
        assertEquals("zerze przecinek dwóch", fmt.format(0.2), "0.2")
        assertEquals("zerze przecinek dwóch trzech czterech pięciu", fmt.format(0.2345), "0.2345")
        assertEquals("zerze przecinek zerze dwóch", fmt.format(0.02), "0.02")
        assertEquals("zerze przecinek zerze dwóch jednym trzech", fmt.format(0.0213), "0.0213")
        assertEquals("czterech przecinek siedmiu pięciu jednym", fmt.format(4.751), "4.751")
        assertEquals("dwunastu przecinek zerze pięciu jednym", fmt.format(12.051), "12.051")
        assertEquals("trzynastu przecinek zerze dwóch pięciu jednym", fmt.format(13.0251), "13.0251")
        assertEquals("czternastu przecinek zerze dwóch dwóch pięciu jednym", fmt.format(14.02251), "14.02251")
        assertEquals("jednym", fmt.format(1), "1")
        assertEquals("dwóch", fmt.format(2), "2")
        assertEquals("trzech", fmt.format(3), "3")
        assertEquals("czterech", fmt.format(4), "4")
        assertEquals("pięciu", fmt.format(5), "5")
        assertEquals("sześciu", fmt.format(6), "6")
        assertEquals("siedmiu", fmt.format(7), "7")
        assertEquals("ośmiu", fmt.format(8), "8")
        assertEquals("dziewięciu", fmt.format(9), "9")
        assertEquals("dziesięciu", fmt.format(10), "10")
        assertEquals("jedenastu", fmt.format(11), "11")
        assertEquals("dwunastu", fmt.format(12), "12")
        assertEquals("trzynastu", fmt.format(13), "13")
        assertEquals("czternastu", fmt.format(14), "14")
        assertEquals("piętnastu", fmt.format(15), "15")
        assertEquals("szesnastu", fmt.format(16), "16")
        assertEquals("siedemnastu", fmt.format(17), "17")
        assertEquals("osiemnastu", fmt.format(18), "18")
        assertEquals("dziewiętnastu", fmt.format(19), "19")
        assertEquals("dwudziestu", fmt.format(20), "20")
        assertEquals("dwudziestu jeden", fmt.format(21), "21")
        assertEquals("dwudziestu dwóch", fmt.format(22), "22")
        assertEquals("dwudziestu trzech", fmt.format(23), "23")
        assertEquals("dwudziestu czterech", fmt.format(24), "24")
        assertEquals("dwudziestu pięciu", fmt.format(25), "25")
        assertEquals("dwudziestu sześciu", fmt.format(26), "26")
        assertEquals("dwudziestu siedmiu", fmt.format(27), "27")
        assertEquals("dwudziestu ośmiu", fmt.format(28), "28")
        assertEquals("dwudziestu dziewięciu", fmt.format(29), "29")
        assertEquals("trzydziestu", fmt.format(30), "30")
        assertEquals("trzydziestu jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesięciu ośmiu", fmt.format(98), "98")
        assertEquals("dziewięćdziesięciu dziewięciu", fmt.format(99), "99")
        assertEquals("stu", fmt.format(100), "100")
        assertEquals("stu jeden", fmt.format(101), "101")
        assertEquals("stu dwóch", fmt.format(102), "102")
        assertEquals("dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(998), "998")
        assertEquals("dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(999), "999")
        assertEquals("tysiącu", fmt.format(1000), "1000")
        assertEquals("tysiącu jeden", fmt.format(1001), "1001")
        assertEquals("tysiącu dwóch", fmt.format(1002), "1002")
        assertEquals("tysiącu dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(1998), "1998")
        assertEquals("tysiącu dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(1999), "1999")
        assertEquals("dwóch tysiącach", fmt.format(2000), "2000")
        assertEquals("dwóch tysiącach jeden", fmt.format(2001), "2001")
        assertEquals("dwóch tysiącach dwóch", fmt.format(2002), "2002")
        assertEquals("dziewięciu tysiącach dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(9998), "9998")
        assertEquals("dziewięciu tysiącach dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(9999), "9999")
        assertEquals("dziesięciu tysiącach", fmt.format(10000), "10000")
        assertEquals("dziesięciu tysiącach jeden", fmt.format(10001), "10001")
        assertEquals("dziesięciu tysiącach dwóch", fmt.format(10002), "10002")
        assertEquals("stu tysiącach", fmt.format(100000), "100000")
        assertEquals("stu tysiącach jeden", fmt.format(100001), "100001")
        assertEquals("stu tysiącach dwóch", fmt.format(100002), "100002")
        assertEquals("dwustu tysiącach", fmt.format(200000), "200000")
        assertEquals("dwustu tysiącach jeden", fmt.format(200001), "200001")
        assertEquals("dwustu tysiącach dwóch", fmt.format(200002), "200002")
        assertEquals("milionie", fmt.format(1000000), "1000000")
        assertEquals("milionie jeden", fmt.format(1000001), "1000001")
        assertEquals("milionie dwóch", fmt.format(1000002), "1000002")
        assertEquals("dwóch milionach", fmt.format(2000000), "2000000")
        assertEquals("dwóch milionach jeden", fmt.format(2000001), "2000001")
        assertEquals("dwóch milionach dwóch", fmt.format(2000002), "2000002")
        assertEquals("dziesięciu milionach", fmt.format(10000000), "10000000")
        assertEquals("dziesięciu milionach jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięciu milionach dwóch", fmt.format(10000002), "10000002")
        assertEquals("dwudziestu milionach", fmt.format(20000000), "20000000")
        assertEquals("dwudziestu milionach jeden", fmt.format(20000001), "20000001")
        assertEquals("dwudziestu milionach dwóch", fmt.format(20000002), "20000002")
        assertEquals("stu milionach", fmt.format(100000000), "100000000")
        assertEquals("stu milionach jeden", fmt.format(100000001), "100000001")
        assertEquals("stu milionach dwóch", fmt.format(100000002), "100000002")
        assertEquals("dwustu milionach", fmt.format(200000000), "200000000")
        assertEquals("dwustu milionach jeden", fmt.format(200000001), "200000001")
        assertEquals("dwustu milionach dwóch", fmt.format(200000002), "200000002")
        assertEquals("miliardzie", fmt.format(1000000000), "1000000000")
        assertEquals("miliardzie jeden", fmt.format(1000000001), "1000000001")
        assertEquals("miliardzie dwóch", fmt.format(1000000002), "1000000002")
        assertEquals("dwóch miliardach", fmt.format(2000000000), "2000000000")
        assertEquals("dwóch miliardach jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwóch miliardach dwóch", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalNeuterInstrumental() {
        val fmt = RBNFPl().spelloutCardinalNeuterInstrumental
        assertEquals("minus jednym", fmt.format(-1), "-1")
        assertEquals("zerem", fmt.format(0), "0")
        assertEquals("zerem przecinek dwoma", fmt.format(0.2), "0.2")
        assertEquals("zerem przecinek dwoma trzema czterema pięcioma", fmt.format(0.2345), "0.2345")
        assertEquals("zerem przecinek zerem dwoma", fmt.format(0.02), "0.02")
        assertEquals("zerem przecinek zerem dwoma jednym trzema", fmt.format(0.0213), "0.0213")
        assertEquals("czterema przecinek siedmioma pięcioma jednym", fmt.format(4.751), "4.751")
        assertEquals("dwunastoma przecinek zerem pięcioma jednym", fmt.format(12.051), "12.051")
        assertEquals("trzynastoma przecinek zerem dwoma pięcioma jednym", fmt.format(13.0251), "13.0251")
        assertEquals("czternastoma przecinek zerem dwoma dwoma pięcioma jednym", fmt.format(14.02251), "14.02251")
        assertEquals("jednym", fmt.format(1), "1")
        assertEquals("dwoma", fmt.format(2), "2")
        assertEquals("trzema", fmt.format(3), "3")
        assertEquals("czterema", fmt.format(4), "4")
        assertEquals("pięcioma", fmt.format(5), "5")
        assertEquals("sześcioma", fmt.format(6), "6")
        assertEquals("siedmioma", fmt.format(7), "7")
        assertEquals("ośmioma", fmt.format(8), "8")
        assertEquals("dziewięcioma", fmt.format(9), "9")
        assertEquals("dziesięcioma", fmt.format(10), "10")
        assertEquals("jedenastoma", fmt.format(11), "11")
        assertEquals("dwunastoma", fmt.format(12), "12")
        assertEquals("trzynastoma", fmt.format(13), "13")
        assertEquals("czternastoma", fmt.format(14), "14")
        assertEquals("piętnastoma", fmt.format(15), "15")
        assertEquals("szesnastoma", fmt.format(16), "16")
        assertEquals("siedemnastoma", fmt.format(17), "17")
        assertEquals("osiemnastoma", fmt.format(18), "18")
        assertEquals("dziewiętnastoma", fmt.format(19), "19")
        assertEquals("dwudziestoma", fmt.format(20), "20")
        assertEquals("dwudziestoma jeden", fmt.format(21), "21")
        assertEquals("dwudziestoma dwoma", fmt.format(22), "22")
        assertEquals("dwudziestoma trzema", fmt.format(23), "23")
        assertEquals("dwudziestoma czterema", fmt.format(24), "24")
        assertEquals("dwudziestoma pięcioma", fmt.format(25), "25")
        assertEquals("dwudziestoma sześcioma", fmt.format(26), "26")
        assertEquals("dwudziestoma siedmioma", fmt.format(27), "27")
        assertEquals("dwudziestoma ośmioma", fmt.format(28), "28")
        assertEquals("dwudziestoma dziewięcioma", fmt.format(29), "29")
        assertEquals("trzydziestoma", fmt.format(30), "30")
        assertEquals("trzydziestoma jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesięcioma ośmioma", fmt.format(98), "98")
        assertEquals("dziewięćdziesięcioma dziewięcioma", fmt.format(99), "99")
        assertEquals("stu", fmt.format(100), "100")
        assertEquals("stu jeden", fmt.format(101), "101")
        assertEquals("stu dwoma", fmt.format(102), "102")
        assertEquals("dziewięciuset dziewięćdziesięcioma ośmioma", fmt.format(998), "998")
        assertEquals("dziewięciuset dziewięćdziesięcioma dziewięcioma", fmt.format(999), "999")
        assertEquals("tysiącem", fmt.format(1000), "1000")
        assertEquals("tysiącem jeden", fmt.format(1001), "1001")
        assertEquals("tysiącem dwoma", fmt.format(1002), "1002")
        assertEquals("tysiącem dziewięciuset dziewięćdziesięcioma ośmioma", fmt.format(1998), "1998")
        assertEquals("tysiącem dziewięciuset dziewięćdziesięcioma dziewięcioma", fmt.format(1999), "1999")
        assertEquals("dwoma tysiącami", fmt.format(2000), "2000")
        assertEquals("dwoma tysiącami jeden", fmt.format(2001), "2001")
        assertEquals("dwoma tysiącami dwoma", fmt.format(2002), "2002")
        assertEquals("dziewięcioma tysiącami dziewięciuset dziewięćdziesięcioma ośmioma", fmt.format(9998), "9998")
        assertEquals("dziewięcioma tysiącami dziewięciuset dziewięćdziesięcioma dziewięcioma", fmt.format(9999), "9999")
        assertEquals("dziesięcioma tysiącami", fmt.format(10000), "10000")
        assertEquals("dziesięcioma tysiącami jeden", fmt.format(10001), "10001")
        assertEquals("dziesięcioma tysiącami dwoma", fmt.format(10002), "10002")
        assertEquals("stu tysiącami", fmt.format(100000), "100000")
        assertEquals("stu tysiącami jeden", fmt.format(100001), "100001")
        assertEquals("stu tysiącami dwoma", fmt.format(100002), "100002")
        assertEquals("dwustu tysiącami", fmt.format(200000), "200000")
        assertEquals("dwustu tysiącami jeden", fmt.format(200001), "200001")
        assertEquals("dwustu tysiącami dwoma", fmt.format(200002), "200002")
        assertEquals("milionem", fmt.format(1000000), "1000000")
        assertEquals("milionem jeden", fmt.format(1000001), "1000001")
        assertEquals("milionem dwoma", fmt.format(1000002), "1000002")
        assertEquals("dwoma milionami", fmt.format(2000000), "2000000")
        assertEquals("dwoma milionami jeden", fmt.format(2000001), "2000001")
        assertEquals("dwoma milionami dwoma", fmt.format(2000002), "2000002")
        assertEquals("dziesięcioma milionami", fmt.format(10000000), "10000000")
        assertEquals("dziesięcioma milionami jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięcioma milionami dwoma", fmt.format(10000002), "10000002")
        assertEquals("dwudziestoma milionami", fmt.format(20000000), "20000000")
        assertEquals("dwudziestoma milionami jeden", fmt.format(20000001), "20000001")
        assertEquals("dwudziestoma milionami dwoma", fmt.format(20000002), "20000002")
        assertEquals("stu milionami", fmt.format(100000000), "100000000")
        assertEquals("stu milionami jeden", fmt.format(100000001), "100000001")
        assertEquals("stu milionami dwoma", fmt.format(100000002), "100000002")
        assertEquals("dwustu milionami", fmt.format(200000000), "200000000")
        assertEquals("dwustu milionami jeden", fmt.format(200000001), "200000001")
        assertEquals("dwustu milionami dwoma", fmt.format(200000002), "200000002")
        assertEquals("miliardem", fmt.format(1000000000), "1000000000")
        assertEquals("miliardem jeden", fmt.format(1000000001), "1000000001")
        assertEquals("miliardem dwoma", fmt.format(1000000002), "1000000002")
        assertEquals("dwoma miliardami", fmt.format(2000000000), "2000000000")
        assertEquals("dwoma miliardami jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwoma miliardami dwoma", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalFeminineInstrumental() {
        val fmt = RBNFPl().spelloutCardinalFeminineInstrumental
        assertEquals("minus jedną", fmt.format(-1), "-1")
        assertEquals("zerem", fmt.format(0), "0")
        assertEquals("zerem przecinek dwiema", fmt.format(0.2), "0.2")
        assertEquals("zerem przecinek dwiema trzema czterema pięcioma", fmt.format(0.2345), "0.2345")
        assertEquals("zerem przecinek zerem dwiema", fmt.format(0.02), "0.02")
        assertEquals("zerem przecinek zerem dwiema jedną trzema", fmt.format(0.0213), "0.0213")
        assertEquals("czterema przecinek siedmioma pięcioma jedną", fmt.format(4.751), "4.751")
        assertEquals("dwunastoma przecinek zerem pięcioma jedną", fmt.format(12.051), "12.051")
        assertEquals("trzynastoma przecinek zerem dwiema pięcioma jedną", fmt.format(13.0251), "13.0251")
        assertEquals("czternastoma przecinek zerem dwiema dwiema pięcioma jedną", fmt.format(14.02251), "14.02251")
        assertEquals("jedną", fmt.format(1), "1")
        assertEquals("dwiema", fmt.format(2), "2")
        assertEquals("trzema", fmt.format(3), "3")
        assertEquals("czterema", fmt.format(4), "4")
        assertEquals("pięcioma", fmt.format(5), "5")
        assertEquals("sześcioma", fmt.format(6), "6")
        assertEquals("siedmioma", fmt.format(7), "7")
        assertEquals("ośmioma", fmt.format(8), "8")
        assertEquals("dziewięcioma", fmt.format(9), "9")
        assertEquals("dziesięcioma", fmt.format(10), "10")
        assertEquals("jedenastoma", fmt.format(11), "11")
        assertEquals("dwunastoma", fmt.format(12), "12")
        assertEquals("trzynastoma", fmt.format(13), "13")
        assertEquals("czternastoma", fmt.format(14), "14")
        assertEquals("piętnastoma", fmt.format(15), "15")
        assertEquals("szesnastoma", fmt.format(16), "16")
        assertEquals("siedemnastoma", fmt.format(17), "17")
        assertEquals("osiemnastoma", fmt.format(18), "18")
        assertEquals("dziewiętnastoma", fmt.format(19), "19")
        assertEquals("dwudziestoma", fmt.format(20), "20")
        assertEquals("dwudziestoma jeden", fmt.format(21), "21")
        assertEquals("dwudziestoma dwoma", fmt.format(22), "22")
        assertEquals("dwudziestoma trzema", fmt.format(23), "23")
        assertEquals("dwudziestoma czterema", fmt.format(24), "24")
        assertEquals("dwudziestoma pięcioma", fmt.format(25), "25")
        assertEquals("dwudziestoma sześcioma", fmt.format(26), "26")
        assertEquals("dwudziestoma siedmioma", fmt.format(27), "27")
        assertEquals("dwudziestoma ośmioma", fmt.format(28), "28")
        assertEquals("dwudziestoma dziewięcioma", fmt.format(29), "29")
        assertEquals("trzydziestoma", fmt.format(30), "30")
        assertEquals("trzydziestoma jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesięcioma ośmioma", fmt.format(98), "98")
        assertEquals("dziewięćdziesięcioma dziewięcioma", fmt.format(99), "99")
        assertEquals("stu", fmt.format(100), "100")
        assertEquals("stu jeden", fmt.format(101), "101")
        assertEquals("stu dwoma", fmt.format(102), "102")
        assertEquals("dziewięciuset dziewięćdziesięcioma ośmioma", fmt.format(998), "998")
        assertEquals("dziewięciuset dziewięćdziesięcioma dziewięcioma", fmt.format(999), "999")
        assertEquals("tysiącem", fmt.format(1000), "1000")
        assertEquals("tysiącem jeden", fmt.format(1001), "1001")
        assertEquals("tysiącem dwoma", fmt.format(1002), "1002")
        assertEquals("tysiącem dziewięciuset dziewięćdziesięcioma ośmioma", fmt.format(1998), "1998")
        assertEquals("tysiącem dziewięciuset dziewięćdziesięcioma dziewięcioma", fmt.format(1999), "1999")
        assertEquals("dwoma tysiącami", fmt.format(2000), "2000")
        assertEquals("dwoma tysiącami jeden", fmt.format(2001), "2001")
        assertEquals("dwoma tysiącami dwoma", fmt.format(2002), "2002")
        assertEquals("dziewięcioma tysiącami dziewięciuset dziewięćdziesięcioma ośmioma", fmt.format(9998), "9998")
        assertEquals("dziewięcioma tysiącami dziewięciuset dziewięćdziesięcioma dziewięcioma", fmt.format(9999), "9999")
        assertEquals("dziesięcioma tysiącami", fmt.format(10000), "10000")
        assertEquals("dziesięcioma tysiącami jeden", fmt.format(10001), "10001")
        assertEquals("dziesięcioma tysiącami dwoma", fmt.format(10002), "10002")
        assertEquals("stu tysiącami", fmt.format(100000), "100000")
        assertEquals("stu tysiącami jeden", fmt.format(100001), "100001")
        assertEquals("stu tysiącami dwoma", fmt.format(100002), "100002")
        assertEquals("dwustu tysiącami", fmt.format(200000), "200000")
        assertEquals("dwustu tysiącami jeden", fmt.format(200001), "200001")
        assertEquals("dwustu tysiącami dwoma", fmt.format(200002), "200002")
        assertEquals("milionem", fmt.format(1000000), "1000000")
        assertEquals("milionem jeden", fmt.format(1000001), "1000001")
        assertEquals("milionem dwoma", fmt.format(1000002), "1000002")
        assertEquals("dwoma milionami", fmt.format(2000000), "2000000")
        assertEquals("dwoma milionami jeden", fmt.format(2000001), "2000001")
        assertEquals("dwoma milionami dwoma", fmt.format(2000002), "2000002")
        assertEquals("dziesięcioma milionami", fmt.format(10000000), "10000000")
        assertEquals("dziesięcioma milionami jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięcioma milionami dwoma", fmt.format(10000002), "10000002")
        assertEquals("dwudziestoma milionami", fmt.format(20000000), "20000000")
        assertEquals("dwudziestoma milionami jeden", fmt.format(20000001), "20000001")
        assertEquals("dwudziestoma milionami dwoma", fmt.format(20000002), "20000002")
        assertEquals("stu milionami", fmt.format(100000000), "100000000")
        assertEquals("stu milionami jeden", fmt.format(100000001), "100000001")
        assertEquals("stu milionami dwoma", fmt.format(100000002), "100000002")
        assertEquals("dwustu milionami", fmt.format(200000000), "200000000")
        assertEquals("dwustu milionami jeden", fmt.format(200000001), "200000001")
        assertEquals("dwustu milionami dwoma", fmt.format(200000002), "200000002")
        assertEquals("miliardem", fmt.format(1000000000), "1000000000")
        assertEquals("miliardem jeden", fmt.format(1000000001), "1000000001")
        assertEquals("miliardem dwoma", fmt.format(1000000002), "1000000002")
        assertEquals("dwoma miliardami", fmt.format(2000000000), "2000000000")
        assertEquals("dwoma miliardami jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwoma miliardami dwoma", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalMasculineInstrumental() {
        val fmt = RBNFPl().spelloutCardinalMasculineInstrumental
        assertEquals("minus jednym", fmt.format(-1), "-1")
        assertEquals("zerem", fmt.format(0), "0")
        assertEquals("zerem przecinek dwoma", fmt.format(0.2), "0.2")
        assertEquals("zerem przecinek dwoma trzema czterema pięcioma", fmt.format(0.2345), "0.2345")
        assertEquals("zerem przecinek zerem dwoma", fmt.format(0.02), "0.02")
        assertEquals("zerem przecinek zerem dwoma jednym trzema", fmt.format(0.0213), "0.0213")
        assertEquals("czterema przecinek siedmioma pięcioma jednym", fmt.format(4.751), "4.751")
        assertEquals("dwunastoma przecinek zerem pięcioma jednym", fmt.format(12.051), "12.051")
        assertEquals("trzynastoma przecinek zerem dwoma pięcioma jednym", fmt.format(13.0251), "13.0251")
        assertEquals("czternastoma przecinek zerem dwoma dwoma pięcioma jednym", fmt.format(14.02251), "14.02251")
        assertEquals("jednym", fmt.format(1), "1")
        assertEquals("dwoma", fmt.format(2), "2")
        assertEquals("trzema", fmt.format(3), "3")
        assertEquals("czterema", fmt.format(4), "4")
        assertEquals("pięcioma", fmt.format(5), "5")
        assertEquals("sześcioma", fmt.format(6), "6")
        assertEquals("siedmioma", fmt.format(7), "7")
        assertEquals("ośmioma", fmt.format(8), "8")
        assertEquals("dziewięcioma", fmt.format(9), "9")
        assertEquals("dziesięcioma", fmt.format(10), "10")
        assertEquals("jedenastoma", fmt.format(11), "11")
        assertEquals("dwunastoma", fmt.format(12), "12")
        assertEquals("trzynastoma", fmt.format(13), "13")
        assertEquals("czternastoma", fmt.format(14), "14")
        assertEquals("piętnastoma", fmt.format(15), "15")
        assertEquals("szesnastoma", fmt.format(16), "16")
        assertEquals("siedemnastoma", fmt.format(17), "17")
        assertEquals("osiemnastoma", fmt.format(18), "18")
        assertEquals("dziewiętnastoma", fmt.format(19), "19")
        assertEquals("dwudziestoma", fmt.format(20), "20")
        assertEquals("dwudziestoma jeden", fmt.format(21), "21")
        assertEquals("dwudziestoma dwoma", fmt.format(22), "22")
        assertEquals("dwudziestoma trzema", fmt.format(23), "23")
        assertEquals("dwudziestoma czterema", fmt.format(24), "24")
        assertEquals("dwudziestoma pięcioma", fmt.format(25), "25")
        assertEquals("dwudziestoma sześcioma", fmt.format(26), "26")
        assertEquals("dwudziestoma siedmioma", fmt.format(27), "27")
        assertEquals("dwudziestoma ośmioma", fmt.format(28), "28")
        assertEquals("dwudziestoma dziewięcioma", fmt.format(29), "29")
        assertEquals("trzydziestoma", fmt.format(30), "30")
        assertEquals("trzydziestoma jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesięcioma ośmioma", fmt.format(98), "98")
        assertEquals("dziewięćdziesięcioma dziewięcioma", fmt.format(99), "99")
        assertEquals("stu", fmt.format(100), "100")
        assertEquals("stu jeden", fmt.format(101), "101")
        assertEquals("stu dwoma", fmt.format(102), "102")
        assertEquals("dziewięciuset dziewięćdziesięcioma ośmioma", fmt.format(998), "998")
        assertEquals("dziewięciuset dziewięćdziesięcioma dziewięcioma", fmt.format(999), "999")
        assertEquals("tysiącem", fmt.format(1000), "1000")
        assertEquals("tysiącem jeden", fmt.format(1001), "1001")
        assertEquals("tysiącem dwoma", fmt.format(1002), "1002")
        assertEquals("tysiącem dziewięciuset dziewięćdziesięcioma ośmioma", fmt.format(1998), "1998")
        assertEquals("tysiącem dziewięciuset dziewięćdziesięcioma dziewięcioma", fmt.format(1999), "1999")
        assertEquals("dwoma tysiącami", fmt.format(2000), "2000")
        assertEquals("dwoma tysiącami jeden", fmt.format(2001), "2001")
        assertEquals("dwoma tysiącami dwoma", fmt.format(2002), "2002")
        assertEquals("dziewięcioma tysiącami dziewięciuset dziewięćdziesięcioma ośmioma", fmt.format(9998), "9998")
        assertEquals("dziewięcioma tysiącami dziewięciuset dziewięćdziesięcioma dziewięcioma", fmt.format(9999), "9999")
        assertEquals("dziesięcioma tysiącami", fmt.format(10000), "10000")
        assertEquals("dziesięcioma tysiącami jeden", fmt.format(10001), "10001")
        assertEquals("dziesięcioma tysiącami dwoma", fmt.format(10002), "10002")
        assertEquals("stu tysiącami", fmt.format(100000), "100000")
        assertEquals("stu tysiącami jeden", fmt.format(100001), "100001")
        assertEquals("stu tysiącami dwoma", fmt.format(100002), "100002")
        assertEquals("dwustu tysiącami", fmt.format(200000), "200000")
        assertEquals("dwustu tysiącami jeden", fmt.format(200001), "200001")
        assertEquals("dwustu tysiącami dwoma", fmt.format(200002), "200002")
        assertEquals("milionem", fmt.format(1000000), "1000000")
        assertEquals("milionem jeden", fmt.format(1000001), "1000001")
        assertEquals("milionem dwoma", fmt.format(1000002), "1000002")
        assertEquals("dwoma milionami", fmt.format(2000000), "2000000")
        assertEquals("dwoma milionami jeden", fmt.format(2000001), "2000001")
        assertEquals("dwoma milionami dwoma", fmt.format(2000002), "2000002")
        assertEquals("dziesięcioma milionami", fmt.format(10000000), "10000000")
        assertEquals("dziesięcioma milionami jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięcioma milionami dwoma", fmt.format(10000002), "10000002")
        assertEquals("dwudziestoma milionami", fmt.format(20000000), "20000000")
        assertEquals("dwudziestoma milionami jeden", fmt.format(20000001), "20000001")
        assertEquals("dwudziestoma milionami dwoma", fmt.format(20000002), "20000002")
        assertEquals("stu milionami", fmt.format(100000000), "100000000")
        assertEquals("stu milionami jeden", fmt.format(100000001), "100000001")
        assertEquals("stu milionami dwoma", fmt.format(100000002), "100000002")
        assertEquals("dwustu milionami", fmt.format(200000000), "200000000")
        assertEquals("dwustu milionami jeden", fmt.format(200000001), "200000001")
        assertEquals("dwustu milionami dwoma", fmt.format(200000002), "200000002")
        assertEquals("miliardem", fmt.format(1000000000), "1000000000")
        assertEquals("miliardem jeden", fmt.format(1000000001), "1000000001")
        assertEquals("miliardem dwoma", fmt.format(1000000002), "1000000002")
        assertEquals("dwoma miliardami", fmt.format(2000000000), "2000000000")
        assertEquals("dwoma miliardami jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwoma miliardami dwoma", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalNeuterAccusative() {
        val fmt = RBNFPl().spelloutCardinalNeuterAccusative
        assertEquals("minus jedno", fmt.format(-1), "-1")
        assertEquals("zero", fmt.format(0), "0")
        assertEquals("zero przecinek dwa", fmt.format(0.2), "0.2")
        assertEquals("zero przecinek dwa trzy cztery pięć", fmt.format(0.2345), "0.2345")
        assertEquals("zero przecinek zero dwa", fmt.format(0.02), "0.02")
        assertEquals("zero przecinek zero dwa jedno trzy", fmt.format(0.0213), "0.0213")
        assertEquals("cztery przecinek siedem pięć jedno", fmt.format(4.751), "4.751")
        assertEquals("dwanaście przecinek zero pięć jedno", fmt.format(12.051), "12.051")
        assertEquals("trzynaście przecinek zero dwa pięć jedno", fmt.format(13.0251), "13.0251")
        assertEquals("czternaście przecinek zero dwa dwa pięć jedno", fmt.format(14.02251), "14.02251")
        assertEquals("jedno", fmt.format(1), "1")
        assertEquals("dwa", fmt.format(2), "2")
        assertEquals("trzy", fmt.format(3), "3")
        assertEquals("cztery", fmt.format(4), "4")
        assertEquals("pięć", fmt.format(5), "5")
        assertEquals("sześć", fmt.format(6), "6")
        assertEquals("siedem", fmt.format(7), "7")
        assertEquals("osiem", fmt.format(8), "8")
        assertEquals("dziewięć", fmt.format(9), "9")
        assertEquals("dziesięć", fmt.format(10), "10")
        assertEquals("jedenaście", fmt.format(11), "11")
        assertEquals("dwanaście", fmt.format(12), "12")
        assertEquals("trzynaście", fmt.format(13), "13")
        assertEquals("czternaście", fmt.format(14), "14")
        assertEquals("piętnaście", fmt.format(15), "15")
        assertEquals("szesnaście", fmt.format(16), "16")
        assertEquals("siedemnaście", fmt.format(17), "17")
        assertEquals("osiemnaście", fmt.format(18), "18")
        assertEquals("dziewiętnaście", fmt.format(19), "19")
        assertEquals("dwadzieścia", fmt.format(20), "20")
        assertEquals("dwadzieścia jeden", fmt.format(21), "21")
        assertEquals("dwadzieścia dwa", fmt.format(22), "22")
        assertEquals("dwadzieścia trzy", fmt.format(23), "23")
        assertEquals("dwadzieścia cztery", fmt.format(24), "24")
        assertEquals("dwadzieścia pięć", fmt.format(25), "25")
        assertEquals("dwadzieścia sześć", fmt.format(26), "26")
        assertEquals("dwadzieścia siedem", fmt.format(27), "27")
        assertEquals("dwadzieścia osiem", fmt.format(28), "28")
        assertEquals("dwadzieścia dziewięć", fmt.format(29), "29")
        assertEquals("trzydzieści", fmt.format(30), "30")
        assertEquals("trzydzieści jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesiąt osiem", fmt.format(98), "98")
        assertEquals("dziewięćdziesiąt dziewięć", fmt.format(99), "99")
        assertEquals("sto", fmt.format(100), "100")
        assertEquals("sto jeden", fmt.format(101), "101")
        assertEquals("sto dwa", fmt.format(102), "102")
        assertEquals("dziewięćset dziewięćdziesiąt osiem", fmt.format(998), "998")
        assertEquals("dziewięćset dziewięćdziesiąt dziewięć", fmt.format(999), "999")
        assertEquals("tysiąc", fmt.format(1000), "1000")
        assertEquals("tysiąc jeden", fmt.format(1001), "1001")
        assertEquals("tysiąc dwa", fmt.format(1002), "1002")
        assertEquals("tysiąc dziewięćset dziewięćdziesiąt osiem", fmt.format(1998), "1998")
        assertEquals("tysiąc dziewięćset dziewięćdziesiąt dziewięć", fmt.format(1999), "1999")
        assertEquals("dwa tysiące", fmt.format(2000), "2000")
        assertEquals("dwa tysiące jeden", fmt.format(2001), "2001")
        assertEquals("dwa tysiące dwa", fmt.format(2002), "2002")
        assertEquals("dziewięć tysięcy dziewięćset dziewięćdziesiąt osiem", fmt.format(9998), "9998")
        assertEquals("dziewięć tysięcy dziewięćset dziewięćdziesiąt dziewięć", fmt.format(9999), "9999")
        assertEquals("dziesięć tysięcy", fmt.format(10000), "10000")
        assertEquals("dziesięć tysięcy jeden", fmt.format(10001), "10001")
        assertEquals("dziesięć tysięcy dwa", fmt.format(10002), "10002")
        assertEquals("sto tysięcy", fmt.format(100000), "100000")
        assertEquals("sto tysięcy jeden", fmt.format(100001), "100001")
        assertEquals("sto tysięcy dwa", fmt.format(100002), "100002")
        assertEquals("dwieście tysięcy", fmt.format(200000), "200000")
        assertEquals("dwieście tysięcy jeden", fmt.format(200001), "200001")
        assertEquals("dwieście tysięcy dwa", fmt.format(200002), "200002")
        assertEquals("milion", fmt.format(1000000), "1000000")
        assertEquals("milion jeden", fmt.format(1000001), "1000001")
        assertEquals("milion dwa", fmt.format(1000002), "1000002")
        assertEquals("dwa miliony", fmt.format(2000000), "2000000")
        assertEquals("dwa miliony jeden", fmt.format(2000001), "2000001")
        assertEquals("dwa miliony dwa", fmt.format(2000002), "2000002")
        assertEquals("dziesięć milionów", fmt.format(10000000), "10000000")
        assertEquals("dziesięć milionów jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięć milionów dwa", fmt.format(10000002), "10000002")
        assertEquals("dwadzieścia milionów", fmt.format(20000000), "20000000")
        assertEquals("dwadzieścia milionów jeden", fmt.format(20000001), "20000001")
        assertEquals("dwadzieścia milionów dwa", fmt.format(20000002), "20000002")
        assertEquals("sto milionów", fmt.format(100000000), "100000000")
        assertEquals("sto milionów jeden", fmt.format(100000001), "100000001")
        assertEquals("sto milionów dwa", fmt.format(100000002), "100000002")
        assertEquals("dwieście milionów", fmt.format(200000000), "200000000")
        assertEquals("dwieście milionów jeden", fmt.format(200000001), "200000001")
        assertEquals("dwieście milionów dwa", fmt.format(200000002), "200000002")
        assertEquals("miliard", fmt.format(1000000000), "1000000000")
        assertEquals("miliard jeden", fmt.format(1000000001), "1000000001")
        assertEquals("miliard dwa", fmt.format(1000000002), "1000000002")
        assertEquals("dwa miliardy", fmt.format(2000000000), "2000000000")
        assertEquals("dwa miliardy jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwa miliardy dwa", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalFeminineAccusative() {
        val fmt = RBNFPl().spelloutCardinalFeminineAccusative
        assertEquals("minus jedną", fmt.format(-1), "-1")
        assertEquals("zero", fmt.format(0), "0")
        assertEquals("zero przecinek dwie", fmt.format(0.2), "0.2")
        assertEquals("zero przecinek dwie trzy cztery pięć", fmt.format(0.2345), "0.2345")
        assertEquals("zero przecinek zero dwie", fmt.format(0.02), "0.02")
        assertEquals("zero przecinek zero dwie jedną trzy", fmt.format(0.0213), "0.0213")
        assertEquals("cztery przecinek siedem pięć jedną", fmt.format(4.751), "4.751")
        assertEquals("dwanaście przecinek zero pięć jedną", fmt.format(12.051), "12.051")
        assertEquals("trzynaście przecinek zero dwie pięć jedną", fmt.format(13.0251), "13.0251")
        assertEquals("czternaście przecinek zero dwie dwie pięć jedną", fmt.format(14.02251), "14.02251")
        assertEquals("jedną", fmt.format(1), "1")
        assertEquals("dwie", fmt.format(2), "2")
        assertEquals("trzy", fmt.format(3), "3")
        assertEquals("cztery", fmt.format(4), "4")
        assertEquals("pięć", fmt.format(5), "5")
        assertEquals("sześć", fmt.format(6), "6")
        assertEquals("siedem", fmt.format(7), "7")
        assertEquals("osiem", fmt.format(8), "8")
        assertEquals("dziewięć", fmt.format(9), "9")
        assertEquals("dziesięć", fmt.format(10), "10")
        assertEquals("jedenaście", fmt.format(11), "11")
        assertEquals("dwanaście", fmt.format(12), "12")
        assertEquals("trzynaście", fmt.format(13), "13")
        assertEquals("czternaście", fmt.format(14), "14")
        assertEquals("piętnaście", fmt.format(15), "15")
        assertEquals("szesnaście", fmt.format(16), "16")
        assertEquals("siedemnaście", fmt.format(17), "17")
        assertEquals("osiemnaście", fmt.format(18), "18")
        assertEquals("dziewiętnaście", fmt.format(19), "19")
        assertEquals("dwadzieścia", fmt.format(20), "20")
        assertEquals("dwadzieścia jeden", fmt.format(21), "21")
        assertEquals("dwadzieścia dwie", fmt.format(22), "22")
        assertEquals("dwadzieścia trzy", fmt.format(23), "23")
        assertEquals("dwadzieścia cztery", fmt.format(24), "24")
        assertEquals("dwadzieścia pięć", fmt.format(25), "25")
        assertEquals("dwadzieścia sześć", fmt.format(26), "26")
        assertEquals("dwadzieścia siedem", fmt.format(27), "27")
        assertEquals("dwadzieścia osiem", fmt.format(28), "28")
        assertEquals("dwadzieścia dziewięć", fmt.format(29), "29")
        assertEquals("trzydzieści", fmt.format(30), "30")
        assertEquals("trzydzieści jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesiąt osiem", fmt.format(98), "98")
        assertEquals("dziewięćdziesiąt dziewięć", fmt.format(99), "99")
        assertEquals("sto", fmt.format(100), "100")
        assertEquals("sto jeden", fmt.format(101), "101")
        assertEquals("sto dwie", fmt.format(102), "102")
        assertEquals("dziewięćset dziewięćdziesiąt osiem", fmt.format(998), "998")
        assertEquals("dziewięćset dziewięćdziesiąt dziewięć", fmt.format(999), "999")
        assertEquals("tysiąc", fmt.format(1000), "1000")
        assertEquals("tysiąc jeden", fmt.format(1001), "1001")
        assertEquals("tysiąc dwie", fmt.format(1002), "1002")
        assertEquals("tysiąc dziewięćset dziewięćdziesiąt osiem", fmt.format(1998), "1998")
        assertEquals("tysiąc dziewięćset dziewięćdziesiąt dziewięć", fmt.format(1999), "1999")
        assertEquals("dwa tysiące", fmt.format(2000), "2000")
        assertEquals("dwa tysiące jeden", fmt.format(2001), "2001")
        assertEquals("dwa tysiące dwie", fmt.format(2002), "2002")
        assertEquals("dziewięć tysięcy dziewięćset dziewięćdziesiąt osiem", fmt.format(9998), "9998")
        assertEquals("dziewięć tysięcy dziewięćset dziewięćdziesiąt dziewięć", fmt.format(9999), "9999")
        assertEquals("dziesięć tysięcy", fmt.format(10000), "10000")
        assertEquals("dziesięć tysięcy jeden", fmt.format(10001), "10001")
        assertEquals("dziesięć tysięcy dwie", fmt.format(10002), "10002")
        assertEquals("sto tysięcy", fmt.format(100000), "100000")
        assertEquals("sto tysięcy jeden", fmt.format(100001), "100001")
        assertEquals("sto tysięcy dwie", fmt.format(100002), "100002")
        assertEquals("dwieście tysięcy", fmt.format(200000), "200000")
        assertEquals("dwieście tysięcy jeden", fmt.format(200001), "200001")
        assertEquals("dwieście tysięcy dwie", fmt.format(200002), "200002")
        assertEquals("milion", fmt.format(1000000), "1000000")
        assertEquals("milion jeden", fmt.format(1000001), "1000001")
        assertEquals("milion dwie", fmt.format(1000002), "1000002")
        assertEquals("dwa miliony", fmt.format(2000000), "2000000")
        assertEquals("dwa miliony jeden", fmt.format(2000001), "2000001")
        assertEquals("dwa miliony dwie", fmt.format(2000002), "2000002")
        assertEquals("dziesięć milionów", fmt.format(10000000), "10000000")
        assertEquals("dziesięć milionów jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięć milionów dwie", fmt.format(10000002), "10000002")
        assertEquals("dwadzieścia milionów", fmt.format(20000000), "20000000")
        assertEquals("dwadzieścia milionów jeden", fmt.format(20000001), "20000001")
        assertEquals("dwadzieścia milionów dwie", fmt.format(20000002), "20000002")
        assertEquals("sto milionów", fmt.format(100000000), "100000000")
        assertEquals("sto milionów jeden", fmt.format(100000001), "100000001")
        assertEquals("sto milionów dwie", fmt.format(100000002), "100000002")
        assertEquals("dwieście milionów", fmt.format(200000000), "200000000")
        assertEquals("dwieście milionów jeden", fmt.format(200000001), "200000001")
        assertEquals("dwieście milionów dwie", fmt.format(200000002), "200000002")
        assertEquals("miliard", fmt.format(1000000000), "1000000000")
        assertEquals("miliard jedna", fmt.format(1000000001), "1000000001")
        assertEquals("miliard dwie", fmt.format(1000000002), "1000000002")
        assertEquals("dwa miliardy", fmt.format(2000000000), "2000000000")
        assertEquals("dwa miliardy jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwa miliardy dwie", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalMasculineAccusativePersonal() {
        val fmt = RBNFPl().spelloutCardinalMasculineAccusativePersonal
        assertEquals("minus jednego", fmt.format(-1), "-1")
        assertEquals("zera", fmt.format(0), "0")
        assertEquals("zera przecinek dwóch", fmt.format(0.2), "0.2")
        assertEquals("zera przecinek dwóch trzech czterech pięciu", fmt.format(0.2345), "0.2345")
        assertEquals("zera przecinek zera dwóch", fmt.format(0.02), "0.02")
        assertEquals("zera przecinek zera dwóch jednego trzech", fmt.format(0.0213), "0.0213")
        assertEquals("czterech przecinek siedmiu pięciu jednego", fmt.format(4.751), "4.751")
        assertEquals("dwunastu przecinek zera pięciu jednego", fmt.format(12.051), "12.051")
        assertEquals("trzynastu przecinek zera dwóch pięciu jednego", fmt.format(13.0251), "13.0251")
        assertEquals("czternastu przecinek zera dwóch dwóch pięciu jednego", fmt.format(14.02251), "14.02251")
        assertEquals("jednego", fmt.format(1), "1")
        assertEquals("dwóch", fmt.format(2), "2")
        assertEquals("trzech", fmt.format(3), "3")
        assertEquals("czterech", fmt.format(4), "4")
        assertEquals("pięciu", fmt.format(5), "5")
        assertEquals("sześciu", fmt.format(6), "6")
        assertEquals("siedmiu", fmt.format(7), "7")
        assertEquals("ośmiu", fmt.format(8), "8")
        assertEquals("dziewięciu", fmt.format(9), "9")
        assertEquals("dziesięciu", fmt.format(10), "10")
        assertEquals("jedenastu", fmt.format(11), "11")
        assertEquals("dwunastu", fmt.format(12), "12")
        assertEquals("trzynastu", fmt.format(13), "13")
        assertEquals("czternastu", fmt.format(14), "14")
        assertEquals("piętnastu", fmt.format(15), "15")
        assertEquals("szesnastu", fmt.format(16), "16")
        assertEquals("siedemnastu", fmt.format(17), "17")
        assertEquals("osiemnastu", fmt.format(18), "18")
        assertEquals("dziewiętnastu", fmt.format(19), "19")
        assertEquals("dwudziestu", fmt.format(20), "20")
        assertEquals("dwudziestu jeden", fmt.format(21), "21")
        assertEquals("dwudziestu dwóch", fmt.format(22), "22")
        assertEquals("dwudziestu trzech", fmt.format(23), "23")
        assertEquals("dwudziestu czterech", fmt.format(24), "24")
        assertEquals("dwudziestu pięciu", fmt.format(25), "25")
        assertEquals("dwudziestu sześciu", fmt.format(26), "26")
        assertEquals("dwudziestu siedmiu", fmt.format(27), "27")
        assertEquals("dwudziestu ośmiu", fmt.format(28), "28")
        assertEquals("dwudziestu dziewięciu", fmt.format(29), "29")
        assertEquals("trzydziestu", fmt.format(30), "30")
        assertEquals("trzydziestu jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesięciu ośmiu", fmt.format(98), "98")
        assertEquals("dziewięćdziesięciu dziewięciu", fmt.format(99), "99")
        assertEquals("stu", fmt.format(100), "100")
        assertEquals("stu jeden", fmt.format(101), "101")
        assertEquals("stu dwóch", fmt.format(102), "102")
        assertEquals("dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(998), "998")
        assertEquals("dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(999), "999")
        assertEquals("tysiąc", fmt.format(1000), "1000")
        assertEquals("tysiąc jeden", fmt.format(1001), "1001")
        assertEquals("tysiąc dwóch", fmt.format(1002), "1002")
        assertEquals("tysiąc dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(1998), "1998")
        assertEquals("tysiąc dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(1999), "1999")
        assertEquals("dwa tysiące", fmt.format(2000), "2000")
        assertEquals("dwa tysiące jeden", fmt.format(2001), "2001")
        assertEquals("dwa tysiące dwóch", fmt.format(2002), "2002")
        assertEquals("dziewięć tysięcy dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(9998), "9998")
        assertEquals("dziewięć tysięcy dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(9999), "9999")
        assertEquals("dziesięć tysięcy", fmt.format(10000), "10000")
        assertEquals("dziesięć tysięcy jeden", fmt.format(10001), "10001")
        assertEquals("dziesięć tysięcy dwóch", fmt.format(10002), "10002")
        assertEquals("sto tysięcy", fmt.format(100000), "100000")
        assertEquals("sto tysięcy jeden", fmt.format(100001), "100001")
        assertEquals("sto tysięcy dwóch", fmt.format(100002), "100002")
        assertEquals("dwieście tysięcy", fmt.format(200000), "200000")
        assertEquals("dwieście tysięcy jeden", fmt.format(200001), "200001")
        assertEquals("dwieście tysięcy dwóch", fmt.format(200002), "200002")
        assertEquals("milion", fmt.format(1000000), "1000000")
        assertEquals("milion jednego", fmt.format(1000001), "1000001")
        assertEquals("milion dwóch", fmt.format(1000002), "1000002")
        assertEquals("dwa miliony", fmt.format(2000000), "2000000")
        assertEquals("dwa miliony jednego", fmt.format(2000001), "2000001")
        assertEquals("dwa miliony dwóch", fmt.format(2000002), "2000002")
        assertEquals("dziesięć milionów", fmt.format(10000000), "10000000")
        assertEquals("dziesięć milionów jednego", fmt.format(10000001), "10000001")
        assertEquals("dziesięć milionów dwóch", fmt.format(10000002), "10000002")
        assertEquals("dwadzieścia milionów", fmt.format(20000000), "20000000")
        assertEquals("dwadzieścia milionów jednego", fmt.format(20000001), "20000001")
        assertEquals("dwadzieścia milionów dwóch", fmt.format(20000002), "20000002")
        assertEquals("sto milionów", fmt.format(100000000), "100000000")
        assertEquals("sto milionów jednego", fmt.format(100000001), "100000001")
        assertEquals("sto milionów dwóch", fmt.format(100000002), "100000002")
        assertEquals("dwieście milionów", fmt.format(200000000), "200000000")
        assertEquals("dwieście milionów jednego", fmt.format(200000001), "200000001")
        assertEquals("dwieście milionów dwóch", fmt.format(200000002), "200000002")
        assertEquals("miliard", fmt.format(1000000000), "1000000000")
        assertEquals("miliard jednego", fmt.format(1000000001), "1000000001")
        assertEquals("miliard dwóch", fmt.format(1000000002), "1000000002")
        assertEquals("dwa miliardy", fmt.format(2000000000), "2000000000")
        assertEquals("dwa miliardy jednego", fmt.format(2000000001), "2000000001")
        assertEquals("dwa miliardy dwóch", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalMasculineAccusativeAnimate() {
        val fmt = RBNFPl().spelloutCardinalMasculineAccusativeAnimate
        assertEquals("minus jednego", fmt.format(-1), "-1")
        assertEquals("zero", fmt.format(0), "0")
        assertEquals("zero przecinek dwa", fmt.format(0.2), "0.2")
        assertEquals("zero przecinek dwa trzy cztery pięć", fmt.format(0.2345), "0.2345")
        assertEquals("zero przecinek zero dwa", fmt.format(0.02), "0.02")
        assertEquals("zero przecinek zero dwa jednego trzy", fmt.format(0.0213), "0.0213")
        assertEquals("cztery przecinek siedem pięć jednego", fmt.format(4.751), "4.751")
        assertEquals("dwanaście przecinek zero pięć jednego", fmt.format(12.051), "12.051")
        assertEquals("trzynaście przecinek zero dwa pięć jednego", fmt.format(13.0251), "13.0251")
        assertEquals("czternaście przecinek zero dwa dwa pięć jednego", fmt.format(14.02251), "14.02251")
        assertEquals("jednego", fmt.format(1), "1")
        assertEquals("dwa", fmt.format(2), "2")
        assertEquals("trzy", fmt.format(3), "3")
        assertEquals("cztery", fmt.format(4), "4")
        assertEquals("pięć", fmt.format(5), "5")
        assertEquals("sześć", fmt.format(6), "6")
        assertEquals("siedem", fmt.format(7), "7")
        assertEquals("osiem", fmt.format(8), "8")
        assertEquals("dziewięć", fmt.format(9), "9")
        assertEquals("dziesięć", fmt.format(10), "10")
        assertEquals("jedenaście", fmt.format(11), "11")
        assertEquals("dwanaście", fmt.format(12), "12")
        assertEquals("trzynaście", fmt.format(13), "13")
        assertEquals("czternaście", fmt.format(14), "14")
        assertEquals("piętnaście", fmt.format(15), "15")
        assertEquals("szesnaście", fmt.format(16), "16")
        assertEquals("siedemnaście", fmt.format(17), "17")
        assertEquals("osiemnaście", fmt.format(18), "18")
        assertEquals("dziewiętnaście", fmt.format(19), "19")
        assertEquals("dwadzieścia", fmt.format(20), "20")
        assertEquals("dwadzieścia jeden", fmt.format(21), "21")
        assertEquals("dwadzieścia dwa", fmt.format(22), "22")
        assertEquals("dwadzieścia trzy", fmt.format(23), "23")
        assertEquals("dwadzieścia cztery", fmt.format(24), "24")
        assertEquals("dwadzieścia pięć", fmt.format(25), "25")
        assertEquals("dwadzieścia sześć", fmt.format(26), "26")
        assertEquals("dwadzieścia siedem", fmt.format(27), "27")
        assertEquals("dwadzieścia osiem", fmt.format(28), "28")
        assertEquals("dwadzieścia dziewięć", fmt.format(29), "29")
        assertEquals("trzydzieści", fmt.format(30), "30")
        assertEquals("trzydzieści jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesiąt osiem", fmt.format(98), "98")
        assertEquals("dziewięćdziesiąt dziewięć", fmt.format(99), "99")
        assertEquals("sto", fmt.format(100), "100")
        assertEquals("sto jeden", fmt.format(101), "101")
        assertEquals("sto dwa", fmt.format(102), "102")
        assertEquals("dziewięćset dziewięćdziesiąt osiem", fmt.format(998), "998")
        assertEquals("dziewięćset dziewięćdziesiąt dziewięć", fmt.format(999), "999")
        assertEquals("tysiąc", fmt.format(1000), "1000")
        assertEquals("tysiąc jeden", fmt.format(1001), "1001")
        assertEquals("tysiąc dwa", fmt.format(1002), "1002")
        assertEquals("tysiąc dziewięćset dziewięćdziesiąt osiem", fmt.format(1998), "1998")
        assertEquals("tysiąc dziewięćset dziewięćdziesiąt dziewięć", fmt.format(1999), "1999")
        assertEquals("dwa tysiące", fmt.format(2000), "2000")
        assertEquals("dwa tysiące jeden", fmt.format(2001), "2001")
        assertEquals("dwa tysiące dwa", fmt.format(2002), "2002")
        assertEquals("dziewięć tysięcy dziewięćset dziewięćdziesiąt osiem", fmt.format(9998), "9998")
        assertEquals("dziewięć tysięcy dziewięćset dziewięćdziesiąt dziewięć", fmt.format(9999), "9999")
        assertEquals("dziesięć tysięcy", fmt.format(10000), "10000")
        assertEquals("dziesięć tysięcy jeden", fmt.format(10001), "10001")
        assertEquals("dziesięć tysięcy dwa", fmt.format(10002), "10002")
        assertEquals("sto tysięcy", fmt.format(100000), "100000")
        assertEquals("sto tysięcy jeden", fmt.format(100001), "100001")
        assertEquals("sto tysięcy dwa", fmt.format(100002), "100002")
        assertEquals("dwieście tysięcy", fmt.format(200000), "200000")
        assertEquals("dwieście tysięcy jeden", fmt.format(200001), "200001")
        assertEquals("dwieście tysięcy dwa", fmt.format(200002), "200002")
        assertEquals("milion", fmt.format(1000000), "1000000")
        assertEquals("milion jeden", fmt.format(1000001), "1000001")
        assertEquals("milion dwa", fmt.format(1000002), "1000002")
        assertEquals("dwa miliony", fmt.format(2000000), "2000000")
        assertEquals("dwa miliony jeden", fmt.format(2000001), "2000001")
        assertEquals("dwa miliony dwa", fmt.format(2000002), "2000002")
        assertEquals("dziesięć milionów", fmt.format(10000000), "10000000")
        assertEquals("dziesięć milionów jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięć milionów dwa", fmt.format(10000002), "10000002")
        assertEquals("dwadzieścia milionów", fmt.format(20000000), "20000000")
        assertEquals("dwadzieścia milionów jeden", fmt.format(20000001), "20000001")
        assertEquals("dwadzieścia milionów dwa", fmt.format(20000002), "20000002")
        assertEquals("sto milionów", fmt.format(100000000), "100000000")
        assertEquals("sto milionów jeden", fmt.format(100000001), "100000001")
        assertEquals("sto milionów dwa", fmt.format(100000002), "100000002")
        assertEquals("dwieście milionów", fmt.format(200000000), "200000000")
        assertEquals("dwieście milionów jeden", fmt.format(200000001), "200000001")
        assertEquals("dwieście milionów dwa", fmt.format(200000002), "200000002")
        assertEquals("miliard", fmt.format(1000000000), "1000000000")
        assertEquals("miliard jeden", fmt.format(1000000001), "1000000001")
        assertEquals("miliard dwa", fmt.format(1000000002), "1000000002")
        assertEquals("dwa miliardy", fmt.format(2000000000), "2000000000")
        assertEquals("dwa miliardy jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwa miliardy dwa", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalMasculineAccusative() {
        val fmt = RBNFPl().spelloutCardinalMasculineAccusative
        assertEquals("minus jeden", fmt.format(-1), "-1")
        assertEquals("zero", fmt.format(0), "0")
        assertEquals("zero przecinek dwa", fmt.format(0.2), "0.2")
        assertEquals("zero przecinek dwa trzy cztery pięć", fmt.format(0.2345), "0.2345")
        assertEquals("zero przecinek zero dwa", fmt.format(0.02), "0.02")
        assertEquals("zero przecinek zero dwa jeden trzy", fmt.format(0.0213), "0.0213")
        assertEquals("cztery przecinek siedemset pięćdziesiąt jeden", fmt.format(4.751), "4.751")
        assertEquals("dwanaście przecinek zero pięćdziesiąt jeden", fmt.format(12.051), "12.051")
        assertEquals("trzynaście przecinek zero dwa pięć jeden", fmt.format(13.0251), "13.0251")
        assertEquals("czternaście przecinek zero dwa dwa pięć jeden", fmt.format(14.02251), "14.02251")
        assertEquals("jeden", fmt.format(1), "1")
        assertEquals("dwa", fmt.format(2), "2")
        assertEquals("trzy", fmt.format(3), "3")
        assertEquals("cztery", fmt.format(4), "4")
        assertEquals("pięć", fmt.format(5), "5")
        assertEquals("sześć", fmt.format(6), "6")
        assertEquals("siedem", fmt.format(7), "7")
        assertEquals("osiem", fmt.format(8), "8")
        assertEquals("dziewięć", fmt.format(9), "9")
        assertEquals("dziesięć", fmt.format(10), "10")
        assertEquals("jedenaście", fmt.format(11), "11")
        assertEquals("dwanaście", fmt.format(12), "12")
        assertEquals("trzynaście", fmt.format(13), "13")
        assertEquals("czternaście", fmt.format(14), "14")
        assertEquals("piętnaście", fmt.format(15), "15")
        assertEquals("szesnaście", fmt.format(16), "16")
        assertEquals("siedemnaście", fmt.format(17), "17")
        assertEquals("osiemnaście", fmt.format(18), "18")
        assertEquals("dziewiętnaście", fmt.format(19), "19")
        assertEquals("dwadzieścia", fmt.format(20), "20")
        assertEquals("dwadzieścia jeden", fmt.format(21), "21")
        assertEquals("dwadzieścia dwa", fmt.format(22), "22")
        assertEquals("dwadzieścia trzy", fmt.format(23), "23")
        assertEquals("dwadzieścia cztery", fmt.format(24), "24")
        assertEquals("dwadzieścia pięć", fmt.format(25), "25")
        assertEquals("dwadzieścia sześć", fmt.format(26), "26")
        assertEquals("dwadzieścia siedem", fmt.format(27), "27")
        assertEquals("dwadzieścia osiem", fmt.format(28), "28")
        assertEquals("dwadzieścia dziewięć", fmt.format(29), "29")
        assertEquals("trzydzieści", fmt.format(30), "30")
        assertEquals("trzydzieści jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesiąt osiem", fmt.format(98), "98")
        assertEquals("dziewięćdziesiąt dziewięć", fmt.format(99), "99")
        assertEquals("sto", fmt.format(100), "100")
        assertEquals("sto jeden", fmt.format(101), "101")
        assertEquals("sto dwa", fmt.format(102), "102")
        assertEquals("dziewięćset dziewięćdziesiąt osiem", fmt.format(998), "998")
        assertEquals("dziewięćset dziewięćdziesiąt dziewięć", fmt.format(999), "999")
        assertEquals("tysiąc", fmt.format(1000), "1000")
        assertEquals("tysiąc jeden", fmt.format(1001), "1001")
        assertEquals("tysiąc dwa", fmt.format(1002), "1002")
        assertEquals("tysiąc dziewięćset dziewięćdziesiąt osiem", fmt.format(1998), "1998")
        assertEquals("tysiąc dziewięćset dziewięćdziesiąt dziewięć", fmt.format(1999), "1999")
        assertEquals("dwa tysiące", fmt.format(2000), "2000")
        assertEquals("dwa tysiące jeden", fmt.format(2001), "2001")
        assertEquals("dwa tysiące dwa", fmt.format(2002), "2002")
        assertEquals("dziewięć tysięcy dziewięćset dziewięćdziesiąt osiem", fmt.format(9998), "9998")
        assertEquals("dziewięć tysięcy dziewięćset dziewięćdziesiąt dziewięć", fmt.format(9999), "9999")
        assertEquals("dziesięć tysięcy", fmt.format(10000), "10000")
        assertEquals("dziesięć tysięcy jeden", fmt.format(10001), "10001")
        assertEquals("dziesięć tysięcy dwa", fmt.format(10002), "10002")
        assertEquals("sto tysięcy", fmt.format(100000), "100000")
        assertEquals("sto tysięcy jeden", fmt.format(100001), "100001")
        assertEquals("sto tysięcy dwa", fmt.format(100002), "100002")
        assertEquals("dwieście tysięcy", fmt.format(200000), "200000")
        assertEquals("dwieście tysięcy jeden", fmt.format(200001), "200001")
        assertEquals("dwieście tysięcy dwa", fmt.format(200002), "200002")
        assertEquals("milion", fmt.format(1000000), "1000000")
        assertEquals("milion jeden", fmt.format(1000001), "1000001")
        assertEquals("milion dwa", fmt.format(1000002), "1000002")
        assertEquals("dwa miliony", fmt.format(2000000), "2000000")
        assertEquals("dwa miliony jeden", fmt.format(2000001), "2000001")
        assertEquals("dwa miliony dwa", fmt.format(2000002), "2000002")
        assertEquals("dziesięć milionów", fmt.format(10000000), "10000000")
        assertEquals("dziesięć milionów jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięć milionów dwa", fmt.format(10000002), "10000002")
        assertEquals("dwadzieścia milionów", fmt.format(20000000), "20000000")
        assertEquals("dwadzieścia milionów jeden", fmt.format(20000001), "20000001")
        assertEquals("dwadzieścia milionów dwa", fmt.format(20000002), "20000002")
        assertEquals("sto milionów", fmt.format(100000000), "100000000")
        assertEquals("sto milionów jeden", fmt.format(100000001), "100000001")
        assertEquals("sto milionów dwa", fmt.format(100000002), "100000002")
        assertEquals("dwieście milionów", fmt.format(200000000), "200000000")
        assertEquals("dwieście milionów jeden", fmt.format(200000001), "200000001")
        assertEquals("dwieście milionów dwa", fmt.format(200000002), "200000002")
        assertEquals("miliard", fmt.format(1000000000), "1000000000")
        assertEquals("miliard jeden", fmt.format(1000000001), "1000000001")
        assertEquals("miliard dwa", fmt.format(1000000002), "1000000002")
        assertEquals("dwa miliardy", fmt.format(2000000000), "2000000000")
        assertEquals("dwa miliardy jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwa miliardy dwa", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalNeuterDative() {
        val fmt = RBNFPl().spelloutCardinalNeuterDative
        assertEquals("minus jednemu", fmt.format(-1), "-1")
        assertEquals("zeru", fmt.format(0), "0")
        assertEquals("zeru przecinek dwóm", fmt.format(0.2), "0.2")
        assertEquals("zeru przecinek dwóm trzem czterem pięciu", fmt.format(0.2345), "0.2345")
        assertEquals("zeru przecinek zeru dwóm", fmt.format(0.02), "0.02")
        assertEquals("zeru przecinek zeru dwóm jednemu trzem", fmt.format(0.0213), "0.0213")
        assertEquals("czterem przecinek siedmiu pięciu jednemu", fmt.format(4.751), "4.751")
        assertEquals("dwunastu przecinek zeru pięciu jednemu", fmt.format(12.051), "12.051")
        assertEquals("trzynastu przecinek zeru dwóm pięciu jednemu", fmt.format(13.0251), "13.0251")
        assertEquals("czternastu przecinek zeru dwóm dwóm pięciu jednemu", fmt.format(14.02251), "14.02251")
        assertEquals("jednemu", fmt.format(1), "1")
        assertEquals("dwóm", fmt.format(2), "2")
        assertEquals("trzem", fmt.format(3), "3")
        assertEquals("czterem", fmt.format(4), "4")
        assertEquals("pięciu", fmt.format(5), "5")
        assertEquals("sześciu", fmt.format(6), "6")
        assertEquals("siedmiu", fmt.format(7), "7")
        assertEquals("ośmiu", fmt.format(8), "8")
        assertEquals("dziewięciu", fmt.format(9), "9")
        assertEquals("dziesięciu", fmt.format(10), "10")
        assertEquals("jedenastu", fmt.format(11), "11")
        assertEquals("dwunastu", fmt.format(12), "12")
        assertEquals("trzynastu", fmt.format(13), "13")
        assertEquals("czternastu", fmt.format(14), "14")
        assertEquals("piętnastu", fmt.format(15), "15")
        assertEquals("szesnastu", fmt.format(16), "16")
        assertEquals("siedemnastu", fmt.format(17), "17")
        assertEquals("osiemnastu", fmt.format(18), "18")
        assertEquals("dziewiętnastu", fmt.format(19), "19")
        assertEquals("dwudziestu", fmt.format(20), "20")
        assertEquals("dwudziestu jeden", fmt.format(21), "21")
        assertEquals("dwudziestu dwóm", fmt.format(22), "22")
        assertEquals("dwudziestu trzem", fmt.format(23), "23")
        assertEquals("dwudziestu czterem", fmt.format(24), "24")
        assertEquals("dwudziestu pięciu", fmt.format(25), "25")
        assertEquals("dwudziestu sześciu", fmt.format(26), "26")
        assertEquals("dwudziestu siedmiu", fmt.format(27), "27")
        assertEquals("dwudziestu ośmiu", fmt.format(28), "28")
        assertEquals("dwudziestu dziewięciu", fmt.format(29), "29")
        assertEquals("trzydziestu", fmt.format(30), "30")
        assertEquals("trzydziestu jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesięciu ośmiu", fmt.format(98), "98")
        assertEquals("dziewięćdziesięciu dziewięciu", fmt.format(99), "99")
        assertEquals("stu", fmt.format(100), "100")
        assertEquals("stu jeden", fmt.format(101), "101")
        assertEquals("stu dwóm", fmt.format(102), "102")
        assertEquals("dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(998), "998")
        assertEquals("dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(999), "999")
        assertEquals("tysiącowi", fmt.format(1000), "1000")
        assertEquals("tysiącowi jeden", fmt.format(1001), "1001")
        assertEquals("tysiącowi dwóm", fmt.format(1002), "1002")
        assertEquals("tysiącowi dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(1998), "1998")
        assertEquals("tysiącowi dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(1999), "1999")
        assertEquals("dwóm tysiącom", fmt.format(2000), "2000")
        assertEquals("dwóm tysiącom jeden", fmt.format(2001), "2001")
        assertEquals("dwóm tysiącom dwóm", fmt.format(2002), "2002")
        assertEquals("dziewięciu tysiącom dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(9998), "9998")
        assertEquals("dziewięciu tysiącom dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(9999), "9999")
        assertEquals("dziesięciu tysiącom", fmt.format(10000), "10000")
        assertEquals("dziesięciu tysiącom jeden", fmt.format(10001), "10001")
        assertEquals("dziesięciu tysiącom dwóm", fmt.format(10002), "10002")
        assertEquals("stu tysiącom", fmt.format(100000), "100000")
        assertEquals("stu tysiącom jeden", fmt.format(100001), "100001")
        assertEquals("stu tysiącom dwóm", fmt.format(100002), "100002")
        assertEquals("dwustu tysiącom", fmt.format(200000), "200000")
        assertEquals("dwustu tysiącom jeden", fmt.format(200001), "200001")
        assertEquals("dwustu tysiącom dwóm", fmt.format(200002), "200002")
        assertEquals("milionowi", fmt.format(1000000), "1000000")
        assertEquals("milionowi jeden", fmt.format(1000001), "1000001")
        assertEquals("milionowi dwóm", fmt.format(1000002), "1000002")
        assertEquals("dwóm milionom", fmt.format(2000000), "2000000")
        assertEquals("dwóm milionom jeden", fmt.format(2000001), "2000001")
        assertEquals("dwóm milionom dwóm", fmt.format(2000002), "2000002")
        assertEquals("dziesięciu milionom", fmt.format(10000000), "10000000")
        assertEquals("dziesięciu milionom jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięciu milionom dwóm", fmt.format(10000002), "10000002")
        assertEquals("dwudziestu milionom", fmt.format(20000000), "20000000")
        assertEquals("dwudziestu milionom jeden", fmt.format(20000001), "20000001")
        assertEquals("dwudziestu milionom dwóm", fmt.format(20000002), "20000002")
        assertEquals("stu milionom", fmt.format(100000000), "100000000")
        assertEquals("stu milionom jeden", fmt.format(100000001), "100000001")
        assertEquals("stu milionom dwóm", fmt.format(100000002), "100000002")
        assertEquals("dwustu milionom", fmt.format(200000000), "200000000")
        assertEquals("dwustu milionom jeden", fmt.format(200000001), "200000001")
        assertEquals("dwustu milionom dwóm", fmt.format(200000002), "200000002")
        assertEquals("miliardowi", fmt.format(1000000000), "1000000000")
        assertEquals("miliardowi jeden", fmt.format(1000000001), "1000000001")
        assertEquals("miliardowi dwóm", fmt.format(1000000002), "1000000002")
        assertEquals("dwóm miliardom", fmt.format(2000000000), "2000000000")
        assertEquals("dwóm miliardom jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwóm miliardom dwóm", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalFeminineDative() {
        val fmt = RBNFPl().spelloutCardinalFeminineDative
        assertEquals("minus jednej", fmt.format(-1), "-1")
        assertEquals("zeru", fmt.format(0), "0")
        assertEquals("zeru przecinek dwóm", fmt.format(0.2), "0.2")
        assertEquals("zeru przecinek dwóm trzem czterem pięciu", fmt.format(0.2345), "0.2345")
        assertEquals("zeru przecinek zeru dwóm", fmt.format(0.02), "0.02")
        assertEquals("zeru przecinek zeru dwóm jednej trzem", fmt.format(0.0213), "0.0213")
        assertEquals("czterem przecinek siedmiu pięciu jednej", fmt.format(4.751), "4.751")
        assertEquals("dwunastu przecinek zeru pięciu jednej", fmt.format(12.051), "12.051")
        assertEquals("trzynastu przecinek zeru dwóm pięciu jednej", fmt.format(13.0251), "13.0251")
        assertEquals("czternastu przecinek zeru dwóm dwóm pięciu jednej", fmt.format(14.02251), "14.02251")
        assertEquals("jednej", fmt.format(1), "1")
        assertEquals("dwóm", fmt.format(2), "2")
        assertEquals("trzem", fmt.format(3), "3")
        assertEquals("czterem", fmt.format(4), "4")
        assertEquals("pięciu", fmt.format(5), "5")
        assertEquals("sześciu", fmt.format(6), "6")
        assertEquals("siedmiu", fmt.format(7), "7")
        assertEquals("ośmiu", fmt.format(8), "8")
        assertEquals("dziewięciu", fmt.format(9), "9")
        assertEquals("dziesięciu", fmt.format(10), "10")
        assertEquals("jedenastu", fmt.format(11), "11")
        assertEquals("dwunastu", fmt.format(12), "12")
        assertEquals("trzynastu", fmt.format(13), "13")
        assertEquals("czternastu", fmt.format(14), "14")
        assertEquals("piętnastu", fmt.format(15), "15")
        assertEquals("szesnastu", fmt.format(16), "16")
        assertEquals("siedemnastu", fmt.format(17), "17")
        assertEquals("osiemnastu", fmt.format(18), "18")
        assertEquals("dziewiętnastu", fmt.format(19), "19")
        assertEquals("dwudziestu", fmt.format(20), "20")
        assertEquals("dwudziestu jeden", fmt.format(21), "21")
        assertEquals("dwudziestu dwóm", fmt.format(22), "22")
        assertEquals("dwudziestu trzem", fmt.format(23), "23")
        assertEquals("dwudziestu czterem", fmt.format(24), "24")
        assertEquals("dwudziestu pięciu", fmt.format(25), "25")
        assertEquals("dwudziestu sześciu", fmt.format(26), "26")
        assertEquals("dwudziestu siedmiu", fmt.format(27), "27")
        assertEquals("dwudziestu ośmiu", fmt.format(28), "28")
        assertEquals("dwudziestu dziewięciu", fmt.format(29), "29")
        assertEquals("trzydziestu", fmt.format(30), "30")
        assertEquals("trzydziestu jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesięciu ośmiu", fmt.format(98), "98")
        assertEquals("dziewięćdziesięciu dziewięciu", fmt.format(99), "99")
        assertEquals("stu", fmt.format(100), "100")
        assertEquals("stu jeden", fmt.format(101), "101")
        assertEquals("stu dwóm", fmt.format(102), "102")
        assertEquals("dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(998), "998")
        assertEquals("dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(999), "999")
        assertEquals("tysiącowi", fmt.format(1000), "1000")
        assertEquals("tysiącowi jeden", fmt.format(1001), "1001")
        assertEquals("tysiącowi dwóm", fmt.format(1002), "1002")
        assertEquals("tysiącowi dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(1998), "1998")
        assertEquals("tysiącowi dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(1999), "1999")
        assertEquals("dwóm tysiącom", fmt.format(2000), "2000")
        assertEquals("dwóm tysiącom jeden", fmt.format(2001), "2001")
        assertEquals("dwóm tysiącom dwóm", fmt.format(2002), "2002")
        assertEquals("dziewięciu tysiącom dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(9998), "9998")
        assertEquals("dziewięciu tysiącom dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(9999), "9999")
        assertEquals("dziesięciu tysiącom", fmt.format(10000), "10000")
        assertEquals("dziesięciu tysiącom jeden", fmt.format(10001), "10001")
        assertEquals("dziesięciu tysiącom dwóm", fmt.format(10002), "10002")
        assertEquals("stu tysiącom", fmt.format(100000), "100000")
        assertEquals("stu tysiącom jeden", fmt.format(100001), "100001")
        assertEquals("stu tysiącom dwóm", fmt.format(100002), "100002")
        assertEquals("dwustu tysiącom", fmt.format(200000), "200000")
        assertEquals("dwustu tysiącom jeden", fmt.format(200001), "200001")
        assertEquals("dwustu tysiącom dwóm", fmt.format(200002), "200002")
        assertEquals("milionowi", fmt.format(1000000), "1000000")
        assertEquals("milionowi jeden", fmt.format(1000001), "1000001")
        assertEquals("milionowi dwóm", fmt.format(1000002), "1000002")
        assertEquals("dwóm milionom", fmt.format(2000000), "2000000")
        assertEquals("dwóm milionom jeden", fmt.format(2000001), "2000001")
        assertEquals("dwóm milionom dwóm", fmt.format(2000002), "2000002")
        assertEquals("dziesięciu milionom", fmt.format(10000000), "10000000")
        assertEquals("dziesięciu milionom jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięciu milionom dwóm", fmt.format(10000002), "10000002")
        assertEquals("dwudziestu milionom", fmt.format(20000000), "20000000")
        assertEquals("dwudziestu milionom jeden", fmt.format(20000001), "20000001")
        assertEquals("dwudziestu milionom dwóm", fmt.format(20000002), "20000002")
        assertEquals("stu milionom", fmt.format(100000000), "100000000")
        assertEquals("stu milionom jeden", fmt.format(100000001), "100000001")
        assertEquals("stu milionom dwóm", fmt.format(100000002), "100000002")
        assertEquals("dwustu milionom", fmt.format(200000000), "200000000")
        assertEquals("dwustu milionom jeden", fmt.format(200000001), "200000001")
        assertEquals("dwustu milionom dwóm", fmt.format(200000002), "200000002")
        assertEquals("miliardowi", fmt.format(1000000000), "1000000000")
        assertEquals("miliardowi jeden", fmt.format(1000000001), "1000000001")
        assertEquals("miliardowi dwóm", fmt.format(1000000002), "1000000002")
        assertEquals("dwóm miliardom", fmt.format(2000000000), "2000000000")
        assertEquals("dwóm miliardom jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwóm miliardom dwóm", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalMasculineDative() {
        val fmt = RBNFPl().spelloutCardinalMasculineDative
        assertEquals("minus jednemu", fmt.format(-1), "-1")
        assertEquals("zeru", fmt.format(0), "0")
        assertEquals("zeru przecinek dwóm", fmt.format(0.2), "0.2")
        assertEquals("zeru przecinek dwóm trzem czterem pięciu", fmt.format(0.2345), "0.2345")
        assertEquals("zeru przecinek zeru dwóm", fmt.format(0.02), "0.02")
        assertEquals("zeru przecinek zeru dwóm jednemu trzem", fmt.format(0.0213), "0.0213")
        assertEquals("czterem przecinek siedmiu pięciu jednemu", fmt.format(4.751), "4.751")
        assertEquals("dwunastu przecinek zeru pięciu jednemu", fmt.format(12.051), "12.051")
        assertEquals("trzynastu przecinek zeru dwóm pięciu jednemu", fmt.format(13.0251), "13.0251")
        assertEquals("czternastu przecinek zeru dwóm dwóm pięciu jednemu", fmt.format(14.02251), "14.02251")
        assertEquals("jednemu", fmt.format(1), "1")
        assertEquals("dwóm", fmt.format(2), "2")
        assertEquals("trzem", fmt.format(3), "3")
        assertEquals("czterem", fmt.format(4), "4")
        assertEquals("pięciu", fmt.format(5), "5")
        assertEquals("sześciu", fmt.format(6), "6")
        assertEquals("siedmiu", fmt.format(7), "7")
        assertEquals("ośmiu", fmt.format(8), "8")
        assertEquals("dziewięciu", fmt.format(9), "9")
        assertEquals("dziesięciu", fmt.format(10), "10")
        assertEquals("jedenastu", fmt.format(11), "11")
        assertEquals("dwunastu", fmt.format(12), "12")
        assertEquals("trzynastu", fmt.format(13), "13")
        assertEquals("czternastu", fmt.format(14), "14")
        assertEquals("piętnastu", fmt.format(15), "15")
        assertEquals("szesnastu", fmt.format(16), "16")
        assertEquals("siedemnastu", fmt.format(17), "17")
        assertEquals("osiemnastu", fmt.format(18), "18")
        assertEquals("dziewiętnastu", fmt.format(19), "19")
        assertEquals("dwudziestu", fmt.format(20), "20")
        assertEquals("dwudziestu jeden", fmt.format(21), "21")
        assertEquals("dwudziestu dwóm", fmt.format(22), "22")
        assertEquals("dwudziestu trzem", fmt.format(23), "23")
        assertEquals("dwudziestu czterem", fmt.format(24), "24")
        assertEquals("dwudziestu pięciu", fmt.format(25), "25")
        assertEquals("dwudziestu sześciu", fmt.format(26), "26")
        assertEquals("dwudziestu siedmiu", fmt.format(27), "27")
        assertEquals("dwudziestu ośmiu", fmt.format(28), "28")
        assertEquals("dwudziestu dziewięciu", fmt.format(29), "29")
        assertEquals("trzydziestu", fmt.format(30), "30")
        assertEquals("trzydziestu jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesięciu ośmiu", fmt.format(98), "98")
        assertEquals("dziewięćdziesięciu dziewięciu", fmt.format(99), "99")
        assertEquals("stu", fmt.format(100), "100")
        assertEquals("stu jeden", fmt.format(101), "101")
        assertEquals("stu dwóm", fmt.format(102), "102")
        assertEquals("dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(998), "998")
        assertEquals("dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(999), "999")
        assertEquals("tysiącowi", fmt.format(1000), "1000")
        assertEquals("tysiącowi jeden", fmt.format(1001), "1001")
        assertEquals("tysiącowi dwóm", fmt.format(1002), "1002")
        assertEquals("tysiącowi dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(1998), "1998")
        assertEquals("tysiącowi dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(1999), "1999")
        assertEquals("dwóm tysiącom", fmt.format(2000), "2000")
        assertEquals("dwóm tysiącom jeden", fmt.format(2001), "2001")
        assertEquals("dwóm tysiącom dwóm", fmt.format(2002), "2002")
        assertEquals("dziewięciu tysiącom dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(9998), "9998")
        assertEquals("dziewięciu tysiącom dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(9999), "9999")
        assertEquals("dziesięciu tysiącom", fmt.format(10000), "10000")
        assertEquals("dziesięciu tysiącom jeden", fmt.format(10001), "10001")
        assertEquals("dziesięciu tysiącom dwóm", fmt.format(10002), "10002")
        assertEquals("stu tysiącom", fmt.format(100000), "100000")
        assertEquals("stu tysiącom jeden", fmt.format(100001), "100001")
        assertEquals("stu tysiącom dwóm", fmt.format(100002), "100002")
        assertEquals("dwustu tysiącom", fmt.format(200000), "200000")
        assertEquals("dwustu tysiącom jeden", fmt.format(200001), "200001")
        assertEquals("dwustu tysiącom dwóm", fmt.format(200002), "200002")
        assertEquals("milionowi", fmt.format(1000000), "1000000")
        assertEquals("milionowi jeden", fmt.format(1000001), "1000001")
        assertEquals("milionowi dwóm", fmt.format(1000002), "1000002")
        assertEquals("dwóm milionom", fmt.format(2000000), "2000000")
        assertEquals("dwóm milionom jeden", fmt.format(2000001), "2000001")
        assertEquals("dwóm milionom dwóm", fmt.format(2000002), "2000002")
        assertEquals("dziesięciu milionom", fmt.format(10000000), "10000000")
        assertEquals("dziesięciu milionom jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięciu milionom dwóm", fmt.format(10000002), "10000002")
        assertEquals("dwudziestu milionom", fmt.format(20000000), "20000000")
        assertEquals("dwudziestu milionom jeden", fmt.format(20000001), "20000001")
        assertEquals("dwudziestu milionom dwóm", fmt.format(20000002), "20000002")
        assertEquals("stu milionom", fmt.format(100000000), "100000000")
        assertEquals("stu milionom jeden", fmt.format(100000001), "100000001")
        assertEquals("stu milionom dwóm", fmt.format(100000002), "100000002")
        assertEquals("dwustu milionom", fmt.format(200000000), "200000000")
        assertEquals("dwustu milionom jeden", fmt.format(200000001), "200000001")
        assertEquals("dwustu milionom dwóm", fmt.format(200000002), "200000002")
        assertEquals("miliardowi", fmt.format(1000000000), "1000000000")
        assertEquals("miliardowi jeden", fmt.format(1000000001), "1000000001")
        assertEquals("miliardowi dwóm", fmt.format(1000000002), "1000000002")
        assertEquals("dwóm miliardom", fmt.format(2000000000), "2000000000")
        assertEquals("dwóm miliardom jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwóm miliardom dwóm", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalNeuterGenitive() {
        val fmt = RBNFPl().spelloutCardinalNeuterGenitive
        assertEquals("minus jednego", fmt.format(-1), "-1")
        assertEquals("zera", fmt.format(0), "0")
        assertEquals("zera przecinek dwóch", fmt.format(0.2), "0.2")
        assertEquals("zera przecinek dwóch trzech czterech pięciu", fmt.format(0.2345), "0.2345")
        assertEquals("zera przecinek zera dwóch", fmt.format(0.02), "0.02")
        assertEquals("zera przecinek zera dwóch jednego trzech", fmt.format(0.0213), "0.0213")
        assertEquals("czterech przecinek siedmiu pięciu jednego", fmt.format(4.751), "4.751")
        assertEquals("dwunastu przecinek zera pięciu jednego", fmt.format(12.051), "12.051")
        assertEquals("trzynastu przecinek zera dwóch pięciu jednego", fmt.format(13.0251), "13.0251")
        assertEquals("czternastu przecinek zera dwóch dwóch pięciu jednego", fmt.format(14.02251), "14.02251")
        assertEquals("jednego", fmt.format(1), "1")
        assertEquals("dwóch", fmt.format(2), "2")
        assertEquals("trzech", fmt.format(3), "3")
        assertEquals("czterech", fmt.format(4), "4")
        assertEquals("pięciu", fmt.format(5), "5")
        assertEquals("sześciu", fmt.format(6), "6")
        assertEquals("siedmiu", fmt.format(7), "7")
        assertEquals("ośmiu", fmt.format(8), "8")
        assertEquals("dziewięciu", fmt.format(9), "9")
        assertEquals("dziesięciu", fmt.format(10), "10")
        assertEquals("jedenastu", fmt.format(11), "11")
        assertEquals("dwunastu", fmt.format(12), "12")
        assertEquals("trzynastu", fmt.format(13), "13")
        assertEquals("czternastu", fmt.format(14), "14")
        assertEquals("piętnastu", fmt.format(15), "15")
        assertEquals("szesnastu", fmt.format(16), "16")
        assertEquals("siedemnastu", fmt.format(17), "17")
        assertEquals("osiemnastu", fmt.format(18), "18")
        assertEquals("dziewiętnastu", fmt.format(19), "19")
        assertEquals("dwudziestu", fmt.format(20), "20")
        assertEquals("dwudziestu jeden", fmt.format(21), "21")
        assertEquals("dwudziestu dwóch", fmt.format(22), "22")
        assertEquals("dwudziestu trzech", fmt.format(23), "23")
        assertEquals("dwudziestu czterech", fmt.format(24), "24")
        assertEquals("dwudziestu pięciu", fmt.format(25), "25")
        assertEquals("dwudziestu sześciu", fmt.format(26), "26")
        assertEquals("dwudziestu siedmiu", fmt.format(27), "27")
        assertEquals("dwudziestu ośmiu", fmt.format(28), "28")
        assertEquals("dwudziestu dziewięciu", fmt.format(29), "29")
        assertEquals("trzydziestu", fmt.format(30), "30")
        assertEquals("trzydziestu jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesięciu ośmiu", fmt.format(98), "98")
        assertEquals("dziewięćdziesięciu dziewięciu", fmt.format(99), "99")
        assertEquals("stu", fmt.format(100), "100")
        assertEquals("stu jeden", fmt.format(101), "101")
        assertEquals("stu dwóch", fmt.format(102), "102")
        assertEquals("dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(998), "998")
        assertEquals("dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(999), "999")
        assertEquals("tysiąca", fmt.format(1000), "1000")
        assertEquals("tysiąca jeden", fmt.format(1001), "1001")
        assertEquals("tysiąca dwóch", fmt.format(1002), "1002")
        assertEquals("tysiąca dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(1998), "1998")
        assertEquals("tysiąca dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(1999), "1999")
        assertEquals("dwóch tysięcy", fmt.format(2000), "2000")
        assertEquals("dwóch tysięcy jeden", fmt.format(2001), "2001")
        assertEquals("dwóch tysięcy dwóch", fmt.format(2002), "2002")
        assertEquals("dziewięciu tysięcy dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(9998), "9998")
        assertEquals("dziewięciu tysięcy dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(9999), "9999")
        assertEquals("dziesięciu tysięcy", fmt.format(10000), "10000")
        assertEquals("dziesięciu tysięcy jeden", fmt.format(10001), "10001")
        assertEquals("dziesięciu tysięcy dwóch", fmt.format(10002), "10002")
        assertEquals("stu tysięcy", fmt.format(100000), "100000")
        assertEquals("stu tysięcy jeden", fmt.format(100001), "100001")
        assertEquals("stu tysięcy dwóch", fmt.format(100002), "100002")
        assertEquals("dwustu tysięcy", fmt.format(200000), "200000")
        assertEquals("dwustu tysięcy jeden", fmt.format(200001), "200001")
        assertEquals("dwustu tysięcy dwóch", fmt.format(200002), "200002")
        assertEquals("miliona", fmt.format(1000000), "1000000")
        assertEquals("miliona jeden", fmt.format(1000001), "1000001")
        assertEquals("miliona dwóch", fmt.format(1000002), "1000002")
        assertEquals("dwóch milionów", fmt.format(2000000), "2000000")
        assertEquals("dwóch milionów jeden", fmt.format(2000001), "2000001")
        assertEquals("dwóch milionów dwóch", fmt.format(2000002), "2000002")
        assertEquals("dziesięciu milionów", fmt.format(10000000), "10000000")
        assertEquals("dziesięciu milionów jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięciu milionów dwóch", fmt.format(10000002), "10000002")
        assertEquals("dwudziestu milionów", fmt.format(20000000), "20000000")
        assertEquals("dwudziestu milionów jeden", fmt.format(20000001), "20000001")
        assertEquals("dwudziestu milionów dwóch", fmt.format(20000002), "20000002")
        assertEquals("stu milionów", fmt.format(100000000), "100000000")
        assertEquals("stu milionów jeden", fmt.format(100000001), "100000001")
        assertEquals("stu milionów dwóch", fmt.format(100000002), "100000002")
        assertEquals("dwustu milionów", fmt.format(200000000), "200000000")
        assertEquals("dwustu milionów jeden", fmt.format(200000001), "200000001")
        assertEquals("dwustu milionów dwóch", fmt.format(200000002), "200000002")
        assertEquals("miliarda", fmt.format(1000000000), "1000000000")
        assertEquals("miliarda jeden", fmt.format(1000000001), "1000000001")
        assertEquals("miliarda dwóch", fmt.format(1000000002), "1000000002")
        assertEquals("dwóch miliardów", fmt.format(2000000000), "2000000000")
        assertEquals("dwóch miliardów jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwóch miliardów dwóch", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalFeminineGenitive() {
        val fmt = RBNFPl().spelloutCardinalFeminineGenitive
        assertEquals("minus jednej", fmt.format(-1), "-1")
        assertEquals("zera", fmt.format(0), "0")
        assertEquals("zera przecinek dwóch", fmt.format(0.2), "0.2")
        assertEquals("zera przecinek dwóch trzech czterech pięciu", fmt.format(0.2345), "0.2345")
        assertEquals("zera przecinek zera dwóch", fmt.format(0.02), "0.02")
        assertEquals("zera przecinek zera dwóch jednej trzech", fmt.format(0.0213), "0.0213")
        assertEquals("czterech przecinek siedmiu pięciu jednej", fmt.format(4.751), "4.751")
        assertEquals("dwunastu przecinek zera pięciu jednej", fmt.format(12.051), "12.051")
        assertEquals("trzynastu przecinek zera dwóch pięciu jednej", fmt.format(13.0251), "13.0251")
        assertEquals("czternastu przecinek zera dwóch dwóch pięciu jednej", fmt.format(14.02251), "14.02251")
        assertEquals("jednej", fmt.format(1), "1")
        assertEquals("dwóch", fmt.format(2), "2")
        assertEquals("trzech", fmt.format(3), "3")
        assertEquals("czterech", fmt.format(4), "4")
        assertEquals("pięciu", fmt.format(5), "5")
        assertEquals("sześciu", fmt.format(6), "6")
        assertEquals("siedmiu", fmt.format(7), "7")
        assertEquals("ośmiu", fmt.format(8), "8")
        assertEquals("dziewięciu", fmt.format(9), "9")
        assertEquals("dziesięciu", fmt.format(10), "10")
        assertEquals("jedenastu", fmt.format(11), "11")
        assertEquals("dwunastu", fmt.format(12), "12")
        assertEquals("trzynastu", fmt.format(13), "13")
        assertEquals("czternastu", fmt.format(14), "14")
        assertEquals("piętnastu", fmt.format(15), "15")
        assertEquals("szesnastu", fmt.format(16), "16")
        assertEquals("siedemnastu", fmt.format(17), "17")
        assertEquals("osiemnastu", fmt.format(18), "18")
        assertEquals("dziewiętnastu", fmt.format(19), "19")
        assertEquals("dwudziestu", fmt.format(20), "20")
        assertEquals("dwudziestu jeden", fmt.format(21), "21")
        assertEquals("dwudziestu dwóch", fmt.format(22), "22")
        assertEquals("dwudziestu trzech", fmt.format(23), "23")
        assertEquals("dwudziestu czterech", fmt.format(24), "24")
        assertEquals("dwudziestu pięciu", fmt.format(25), "25")
        assertEquals("dwudziestu sześciu", fmt.format(26), "26")
        assertEquals("dwudziestu siedmiu", fmt.format(27), "27")
        assertEquals("dwudziestu ośmiu", fmt.format(28), "28")
        assertEquals("dwudziestu dziewięciu", fmt.format(29), "29")
        assertEquals("trzydziestu", fmt.format(30), "30")
        assertEquals("trzydziestu jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesięciu ośmiu", fmt.format(98), "98")
        assertEquals("dziewięćdziesięciu dziewięciu", fmt.format(99), "99")
        assertEquals("stu", fmt.format(100), "100")
        assertEquals("stu jeden", fmt.format(101), "101")
        assertEquals("stu dwóch", fmt.format(102), "102")
        assertEquals("dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(998), "998")
        assertEquals("dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(999), "999")
        assertEquals("tysiąca", fmt.format(1000), "1000")
        assertEquals("tysiąca jeden", fmt.format(1001), "1001")
        assertEquals("tysiąca dwóch", fmt.format(1002), "1002")
        assertEquals("tysiąca dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(1998), "1998")
        assertEquals("tysiąca dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(1999), "1999")
        assertEquals("dwóch tysięcy", fmt.format(2000), "2000")
        assertEquals("dwóch tysięcy jeden", fmt.format(2001), "2001")
        assertEquals("dwóch tysięcy dwóch", fmt.format(2002), "2002")
        assertEquals("dziewięciu tysięcy dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(9998), "9998")
        assertEquals("dziewięciu tysięcy dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(9999), "9999")
        assertEquals("dziesięciu tysięcy", fmt.format(10000), "10000")
        assertEquals("dziesięciu tysięcy jeden", fmt.format(10001), "10001")
        assertEquals("dziesięciu tysięcy dwóch", fmt.format(10002), "10002")
        assertEquals("stu tysięcy", fmt.format(100000), "100000")
        assertEquals("stu tysięcy jeden", fmt.format(100001), "100001")
        assertEquals("stu tysięcy dwóch", fmt.format(100002), "100002")
        assertEquals("dwustu tysięcy", fmt.format(200000), "200000")
        assertEquals("dwustu tysięcy jeden", fmt.format(200001), "200001")
        assertEquals("dwustu tysięcy dwóch", fmt.format(200002), "200002")
        assertEquals("miliona", fmt.format(1000000), "1000000")
        assertEquals("miliona jeden", fmt.format(1000001), "1000001")
        assertEquals("miliona dwóch", fmt.format(1000002), "1000002")
        assertEquals("dwóch milionów", fmt.format(2000000), "2000000")
        assertEquals("dwóch milionów jeden", fmt.format(2000001), "2000001")
        assertEquals("dwóch milionów dwóch", fmt.format(2000002), "2000002")
        assertEquals("dziesięciu milionów", fmt.format(10000000), "10000000")
        assertEquals("dziesięciu milionów jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięciu milionów dwóch", fmt.format(10000002), "10000002")
        assertEquals("dwudziestu milionów", fmt.format(20000000), "20000000")
        assertEquals("dwudziestu milionów jeden", fmt.format(20000001), "20000001")
        assertEquals("dwudziestu milionów dwóch", fmt.format(20000002), "20000002")
        assertEquals("stu milionów", fmt.format(100000000), "100000000")
        assertEquals("stu milionów jeden", fmt.format(100000001), "100000001")
        assertEquals("stu milionów dwóch", fmt.format(100000002), "100000002")
        assertEquals("dwustu milionów", fmt.format(200000000), "200000000")
        assertEquals("dwustu milionów jeden", fmt.format(200000001), "200000001")
        assertEquals("dwustu milionów dwóch", fmt.format(200000002), "200000002")
        assertEquals("miliarda", fmt.format(1000000000), "1000000000")
        assertEquals("miliarda jeden", fmt.format(1000000001), "1000000001")
        assertEquals("miliarda dwóch", fmt.format(1000000002), "1000000002")
        assertEquals("dwóch miliardów", fmt.format(2000000000), "2000000000")
        assertEquals("dwóch miliardów jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwóch miliardów dwóch", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalMasculineGenitive() {
        val fmt = RBNFPl().spelloutCardinalMasculineGenitive
        assertEquals("minus jednego", fmt.format(-1), "-1")
        assertEquals("zera", fmt.format(0), "0")
        assertEquals("zera przecinek dwóch", fmt.format(0.2), "0.2")
        assertEquals("zera przecinek dwóch trzech czterech pięciu", fmt.format(0.2345), "0.2345")
        assertEquals("zera przecinek zera dwóch", fmt.format(0.02), "0.02")
        assertEquals("zera przecinek zera dwóch jednego trzech", fmt.format(0.0213), "0.0213")
        assertEquals("czterech przecinek siedmiu pięciu jednego", fmt.format(4.751), "4.751")
        assertEquals("dwunastu przecinek zera pięciu jednego", fmt.format(12.051), "12.051")
        assertEquals("trzynastu przecinek zera dwóch pięciu jednego", fmt.format(13.0251), "13.0251")
        assertEquals("czternastu przecinek zera dwóch dwóch pięciu jednego", fmt.format(14.02251), "14.02251")
        assertEquals("jednego", fmt.format(1), "1")
        assertEquals("dwóch", fmt.format(2), "2")
        assertEquals("trzech", fmt.format(3), "3")
        assertEquals("czterech", fmt.format(4), "4")
        assertEquals("pięciu", fmt.format(5), "5")
        assertEquals("sześciu", fmt.format(6), "6")
        assertEquals("siedmiu", fmt.format(7), "7")
        assertEquals("ośmiu", fmt.format(8), "8")
        assertEquals("dziewięciu", fmt.format(9), "9")
        assertEquals("dziesięciu", fmt.format(10), "10")
        assertEquals("jedenastu", fmt.format(11), "11")
        assertEquals("dwunastu", fmt.format(12), "12")
        assertEquals("trzynastu", fmt.format(13), "13")
        assertEquals("czternastu", fmt.format(14), "14")
        assertEquals("piętnastu", fmt.format(15), "15")
        assertEquals("szesnastu", fmt.format(16), "16")
        assertEquals("siedemnastu", fmt.format(17), "17")
        assertEquals("osiemnastu", fmt.format(18), "18")
        assertEquals("dziewiętnastu", fmt.format(19), "19")
        assertEquals("dwudziestu", fmt.format(20), "20")
        assertEquals("dwudziestu jeden", fmt.format(21), "21")
        assertEquals("dwudziestu dwóch", fmt.format(22), "22")
        assertEquals("dwudziestu trzech", fmt.format(23), "23")
        assertEquals("dwudziestu czterech", fmt.format(24), "24")
        assertEquals("dwudziestu pięciu", fmt.format(25), "25")
        assertEquals("dwudziestu sześciu", fmt.format(26), "26")
        assertEquals("dwudziestu siedmiu", fmt.format(27), "27")
        assertEquals("dwudziestu ośmiu", fmt.format(28), "28")
        assertEquals("dwudziestu dziewięciu", fmt.format(29), "29")
        assertEquals("trzydziestu", fmt.format(30), "30")
        assertEquals("trzydziestu jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesięciu ośmiu", fmt.format(98), "98")
        assertEquals("dziewięćdziesięciu dziewięciu", fmt.format(99), "99")
        assertEquals("stu", fmt.format(100), "100")
        assertEquals("stu jeden", fmt.format(101), "101")
        assertEquals("stu dwóch", fmt.format(102), "102")
        assertEquals("dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(998), "998")
        assertEquals("dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(999), "999")
        assertEquals("tysiąca", fmt.format(1000), "1000")
        assertEquals("tysiąca jeden", fmt.format(1001), "1001")
        assertEquals("tysiąca dwóch", fmt.format(1002), "1002")
        assertEquals("tysiąca dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(1998), "1998")
        assertEquals("tysiąca dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(1999), "1999")
        assertEquals("dwóch tysięcy", fmt.format(2000), "2000")
        assertEquals("dwóch tysięcy jeden", fmt.format(2001), "2001")
        assertEquals("dwóch tysięcy dwóch", fmt.format(2002), "2002")
        assertEquals("dziewięciu tysięcy dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(9998), "9998")
        assertEquals("dziewięciu tysięcy dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(9999), "9999")
        assertEquals("dziesięciu tysięcy", fmt.format(10000), "10000")
        assertEquals("dziesięciu tysięcy jeden", fmt.format(10001), "10001")
        assertEquals("dziesięciu tysięcy dwóch", fmt.format(10002), "10002")
        assertEquals("stu tysięcy", fmt.format(100000), "100000")
        assertEquals("stu tysięcy jeden", fmt.format(100001), "100001")
        assertEquals("stu tysięcy dwóch", fmt.format(100002), "100002")
        assertEquals("dwustu tysięcy", fmt.format(200000), "200000")
        assertEquals("dwustu tysięcy jeden", fmt.format(200001), "200001")
        assertEquals("dwustu tysięcy dwóch", fmt.format(200002), "200002")
        assertEquals("miliona", fmt.format(1000000), "1000000")
        assertEquals("miliona jeden", fmt.format(1000001), "1000001")
        assertEquals("miliona dwóch", fmt.format(1000002), "1000002")
        assertEquals("dwóch milionów", fmt.format(2000000), "2000000")
        assertEquals("dwóch milionów jeden", fmt.format(2000001), "2000001")
        assertEquals("dwóch milionów dwóch", fmt.format(2000002), "2000002")
        assertEquals("dziesięciu milionów", fmt.format(10000000), "10000000")
        assertEquals("dziesięciu milionów jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięciu milionów dwóch", fmt.format(10000002), "10000002")
        assertEquals("dwudziestu milionów", fmt.format(20000000), "20000000")
        assertEquals("dwudziestu milionów jeden", fmt.format(20000001), "20000001")
        assertEquals("dwudziestu milionów dwóch", fmt.format(20000002), "20000002")
        assertEquals("stu milionów", fmt.format(100000000), "100000000")
        assertEquals("stu milionów jeden", fmt.format(100000001), "100000001")
        assertEquals("stu milionów dwóch", fmt.format(100000002), "100000002")
        assertEquals("dwustu milionów", fmt.format(200000000), "200000000")
        assertEquals("dwustu milionów jeden", fmt.format(200000001), "200000001")
        assertEquals("dwustu milionów dwóch", fmt.format(200000002), "200000002")
        assertEquals("miliarda", fmt.format(1000000000), "1000000000")
        assertEquals("miliarda jeden", fmt.format(1000000001), "1000000001")
        assertEquals("miliarda dwóch", fmt.format(1000000002), "1000000002")
        assertEquals("dwóch miliardów", fmt.format(2000000000), "2000000000")
        assertEquals("dwóch miliardów jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwóch miliardów dwóch", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalNeuter() {
        val fmt = RBNFPl().spelloutCardinalNeuter
        assertEquals("minus jedno", fmt.format(-1), "-1")
        assertEquals("zero", fmt.format(0), "0")
        assertEquals("zero przecinek dwa", fmt.format(0.2), "0.2")
        assertEquals("zero przecinek dwa trzy cztery pięć", fmt.format(0.2345), "0.2345")
        assertEquals("zero przecinek zero dwa", fmt.format(0.02), "0.02")
        assertEquals("zero przecinek zero dwa jeden trzy", fmt.format(0.0213), "0.0213")
        assertEquals("cztery przecinek siedemset pięćdziesiąt jeden", fmt.format(4.751), "4.751")
        assertEquals("dwanaście przecinek zero pięćdziesiąt jeden", fmt.format(12.051), "12.051")
        assertEquals("trzynaście przecinek zero dwa pięć jeden", fmt.format(13.0251), "13.0251")
        assertEquals("czternaście przecinek zero dwa dwa pięć jeden", fmt.format(14.02251), "14.02251")
        assertEquals("jedno", fmt.format(1), "1")
        assertEquals("dwa", fmt.format(2), "2")
        assertEquals("trzy", fmt.format(3), "3")
        assertEquals("cztery", fmt.format(4), "4")
        assertEquals("pięć", fmt.format(5), "5")
        assertEquals("sześć", fmt.format(6), "6")
        assertEquals("siedem", fmt.format(7), "7")
        assertEquals("osiem", fmt.format(8), "8")
        assertEquals("dziewięć", fmt.format(9), "9")
        assertEquals("dziesięć", fmt.format(10), "10")
        assertEquals("jedenaście", fmt.format(11), "11")
        assertEquals("dwanaście", fmt.format(12), "12")
        assertEquals("trzynaście", fmt.format(13), "13")
        assertEquals("czternaście", fmt.format(14), "14")
        assertEquals("piętnaście", fmt.format(15), "15")
        assertEquals("szesnaście", fmt.format(16), "16")
        assertEquals("siedemnaście", fmt.format(17), "17")
        assertEquals("osiemnaście", fmt.format(18), "18")
        assertEquals("dziewiętnaście", fmt.format(19), "19")
        assertEquals("dwadzieścia", fmt.format(20), "20")
        assertEquals("dwadzieścia jeden", fmt.format(21), "21")
        assertEquals("dwadzieścia dwa", fmt.format(22), "22")
        assertEquals("dwadzieścia trzy", fmt.format(23), "23")
        assertEquals("dwadzieścia cztery", fmt.format(24), "24")
        assertEquals("dwadzieścia pięć", fmt.format(25), "25")
        assertEquals("dwadzieścia sześć", fmt.format(26), "26")
        assertEquals("dwadzieścia siedem", fmt.format(27), "27")
        assertEquals("dwadzieścia osiem", fmt.format(28), "28")
        assertEquals("dwadzieścia dziewięć", fmt.format(29), "29")
        assertEquals("trzydzieści", fmt.format(30), "30")
        assertEquals("trzydzieści jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesiąt osiem", fmt.format(98), "98")
        assertEquals("dziewięćdziesiąt dziewięć", fmt.format(99), "99")
        assertEquals("sto", fmt.format(100), "100")
        assertEquals("sto jeden", fmt.format(101), "101")
        assertEquals("sto dwa", fmt.format(102), "102")
        assertEquals("dziewięćset dziewięćdziesiąt osiem", fmt.format(998), "998")
        assertEquals("dziewięćset dziewięćdziesiąt dziewięć", fmt.format(999), "999")
        assertEquals("tysiąc", fmt.format(1000), "1000")
        assertEquals("tysiąc jeden", fmt.format(1001), "1001")
        assertEquals("tysiąc dwa", fmt.format(1002), "1002")
        assertEquals("tysiąc dziewięćset dziewięćdziesiąt osiem", fmt.format(1998), "1998")
        assertEquals("tysiąc dziewięćset dziewięćdziesiąt dziewięć", fmt.format(1999), "1999")
        assertEquals("dwa tysiące", fmt.format(2000), "2000")
        assertEquals("dwa tysiące jeden", fmt.format(2001), "2001")
        assertEquals("dwa tysiące dwa", fmt.format(2002), "2002")
        assertEquals("dziewięć tysięcy dziewięćset dziewięćdziesiąt osiem", fmt.format(9998), "9998")
        assertEquals("dziewięć tysięcy dziewięćset dziewięćdziesiąt dziewięć", fmt.format(9999), "9999")
        assertEquals("dziesięć tysięcy", fmt.format(10000), "10000")
        assertEquals("dziesięć tysięcy jeden", fmt.format(10001), "10001")
        assertEquals("dziesięć tysięcy dwa", fmt.format(10002), "10002")
        assertEquals("sto tysięcy", fmt.format(100000), "100000")
        assertEquals("sto tysięcy jeden", fmt.format(100001), "100001")
        assertEquals("sto tysięcy dwa", fmt.format(100002), "100002")
        assertEquals("dwieście tysięcy", fmt.format(200000), "200000")
        assertEquals("dwieście tysięcy jeden", fmt.format(200001), "200001")
        assertEquals("dwieście tysięcy dwa", fmt.format(200002), "200002")
        assertEquals("milion", fmt.format(1000000), "1000000")
        assertEquals("milion jeden", fmt.format(1000001), "1000001")
        assertEquals("milion dwa", fmt.format(1000002), "1000002")
        assertEquals("dwa miliony", fmt.format(2000000), "2000000")
        assertEquals("dwa miliony jeden", fmt.format(2000001), "2000001")
        assertEquals("dwa miliony dwa", fmt.format(2000002), "2000002")
        assertEquals("dziesięć milionów", fmt.format(10000000), "10000000")
        assertEquals("dziesięć milionów jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięć milionów dwa", fmt.format(10000002), "10000002")
        assertEquals("dwadzieścia milionów", fmt.format(20000000), "20000000")
        assertEquals("dwadzieścia milionów jeden", fmt.format(20000001), "20000001")
        assertEquals("dwadzieścia milionów dwa", fmt.format(20000002), "20000002")
        assertEquals("sto milionów", fmt.format(100000000), "100000000")
        assertEquals("sto milionów jeden", fmt.format(100000001), "100000001")
        assertEquals("sto milionów dwa", fmt.format(100000002), "100000002")
        assertEquals("dwieście milionów", fmt.format(200000000), "200000000")
        assertEquals("dwieście milionów jeden", fmt.format(200000001), "200000001")
        assertEquals("dwieście milionów dwa", fmt.format(200000002), "200000002")
        assertEquals("miliard", fmt.format(1000000000), "1000000000")
        assertEquals("miliard jeden", fmt.format(1000000001), "1000000001")
        assertEquals("miliard dwa", fmt.format(1000000002), "1000000002")
        assertEquals("dwa miliardy", fmt.format(2000000000), "2000000000")
        assertEquals("dwa miliardy jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwa miliardy dwa", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalFeminine() {
        val fmt = RBNFPl().spelloutCardinalFeminine
        assertEquals("minus jedna", fmt.format(-1), "-1")
        assertEquals("zero", fmt.format(0), "0")
        assertEquals("zero przecinek dwa", fmt.format(0.2), "0.2")
        assertEquals("zero przecinek dwa trzy cztery pięć", fmt.format(0.2345), "0.2345")
        assertEquals("zero przecinek zero dwa", fmt.format(0.02), "0.02")
        assertEquals("zero przecinek zero dwa jeden trzy", fmt.format(0.0213), "0.0213")
        assertEquals("cztery przecinek siedemset pięćdziesiąt jeden", fmt.format(4.751), "4.751")
        assertEquals("dwanaście przecinek zero pięćdziesiąt jeden", fmt.format(12.051), "12.051")
        assertEquals("trzynaście przecinek zero dwa pięć jeden", fmt.format(13.0251), "13.0251")
        assertEquals("czternaście przecinek zero dwa dwa pięć jeden", fmt.format(14.02251), "14.02251")
        assertEquals("jedna", fmt.format(1), "1")
        assertEquals("dwie", fmt.format(2), "2")
        assertEquals("trzy", fmt.format(3), "3")
        assertEquals("cztery", fmt.format(4), "4")
        assertEquals("pięć", fmt.format(5), "5")
        assertEquals("sześć", fmt.format(6), "6")
        assertEquals("siedem", fmt.format(7), "7")
        assertEquals("osiem", fmt.format(8), "8")
        assertEquals("dziewięć", fmt.format(9), "9")
        assertEquals("dziesięć", fmt.format(10), "10")
        assertEquals("jedenaście", fmt.format(11), "11")
        assertEquals("dwanaście", fmt.format(12), "12")
        assertEquals("trzynaście", fmt.format(13), "13")
        assertEquals("czternaście", fmt.format(14), "14")
        assertEquals("piętnaście", fmt.format(15), "15")
        assertEquals("szesnaście", fmt.format(16), "16")
        assertEquals("siedemnaście", fmt.format(17), "17")
        assertEquals("osiemnaście", fmt.format(18), "18")
        assertEquals("dziewiętnaście", fmt.format(19), "19")
        assertEquals("dwadzieścia", fmt.format(20), "20")
        assertEquals("dwadzieścia jeden", fmt.format(21), "21")
        assertEquals("dwadzieścia dwie", fmt.format(22), "22")
        assertEquals("dwadzieścia trzy", fmt.format(23), "23")
        assertEquals("dwadzieścia cztery", fmt.format(24), "24")
        assertEquals("dwadzieścia pięć", fmt.format(25), "25")
        assertEquals("dwadzieścia sześć", fmt.format(26), "26")
        assertEquals("dwadzieścia siedem", fmt.format(27), "27")
        assertEquals("dwadzieścia osiem", fmt.format(28), "28")
        assertEquals("dwadzieścia dziewięć", fmt.format(29), "29")
        assertEquals("trzydzieści", fmt.format(30), "30")
        assertEquals("trzydzieści jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesiąt osiem", fmt.format(98), "98")
        assertEquals("dziewięćdziesiąt dziewięć", fmt.format(99), "99")
        assertEquals("sto", fmt.format(100), "100")
        assertEquals("sto jeden", fmt.format(101), "101")
        assertEquals("sto dwie", fmt.format(102), "102")
        assertEquals("dziewięćset dziewięćdziesiąt osiem", fmt.format(998), "998")
        assertEquals("dziewięćset dziewięćdziesiąt dziewięć", fmt.format(999), "999")
        assertEquals("tysiąc", fmt.format(1000), "1000")
        assertEquals("tysiąc jeden", fmt.format(1001), "1001")
        assertEquals("tysiąc dwie", fmt.format(1002), "1002")
        assertEquals("tysiąc dziewięćset dziewięćdziesiąt osiem", fmt.format(1998), "1998")
        assertEquals("tysiąc dziewięćset dziewięćdziesiąt dziewięć", fmt.format(1999), "1999")
        assertEquals("dwa tysiące", fmt.format(2000), "2000")
        assertEquals("dwa tysiące jeden", fmt.format(2001), "2001")
        assertEquals("dwa tysiące dwie", fmt.format(2002), "2002")
        assertEquals("dziewięć tysięcy dziewięćset dziewięćdziesiąt osiem", fmt.format(9998), "9998")
        assertEquals("dziewięć tysięcy dziewięćset dziewięćdziesiąt dziewięć", fmt.format(9999), "9999")
        assertEquals("dziesięć tysięcy", fmt.format(10000), "10000")
        assertEquals("dziesięć tysięcy jeden", fmt.format(10001), "10001")
        assertEquals("dziesięć tysięcy dwie", fmt.format(10002), "10002")
        assertEquals("sto tysięcy", fmt.format(100000), "100000")
        assertEquals("sto tysięcy jeden", fmt.format(100001), "100001")
        assertEquals("sto tysięcy dwie", fmt.format(100002), "100002")
        assertEquals("dwieście tysięcy", fmt.format(200000), "200000")
        assertEquals("dwieście tysięcy jeden", fmt.format(200001), "200001")
        assertEquals("dwieście tysięcy dwie", fmt.format(200002), "200002")
        assertEquals("milion", fmt.format(1000000), "1000000")
        assertEquals("milion jeden", fmt.format(1000001), "1000001")
        assertEquals("milion dwie", fmt.format(1000002), "1000002")
        assertEquals("dwa miliony", fmt.format(2000000), "2000000")
        assertEquals("dwa miliony jeden", fmt.format(2000001), "2000001")
        assertEquals("dwa miliony dwie", fmt.format(2000002), "2000002")
        assertEquals("dziesięć milionów", fmt.format(10000000), "10000000")
        assertEquals("dziesięć milionów jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięć milionów dwie", fmt.format(10000002), "10000002")
        assertEquals("dwadzieścia milionów", fmt.format(20000000), "20000000")
        assertEquals("dwadzieścia milionów jeden", fmt.format(20000001), "20000001")
        assertEquals("dwadzieścia milionów dwie", fmt.format(20000002), "20000002")
        assertEquals("sto milionów", fmt.format(100000000), "100000000")
        assertEquals("sto milionów jeden", fmt.format(100000001), "100000001")
        assertEquals("sto milionów dwie", fmt.format(100000002), "100000002")
        assertEquals("dwieście milionów", fmt.format(200000000), "200000000")
        assertEquals("dwieście milionów jeden", fmt.format(200000001), "200000001")
        assertEquals("dwieście milionów dwie", fmt.format(200000002), "200000002")
        assertEquals("miliard", fmt.format(1000000000), "1000000000")
        assertEquals("miliard jedna", fmt.format(1000000001), "1000000001")
        assertEquals("miliard dwie", fmt.format(1000000002), "1000000002")
        assertEquals("dwa miliardy", fmt.format(2000000000), "2000000000")
        assertEquals("dwa miliardy jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwa miliardy dwie", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalMasculinePersonal() {
        val fmt = RBNFPl().spelloutCardinalMasculinePersonal
        assertEquals("minus jeden", fmt.format(-1), "-1")
        assertEquals("zero", fmt.format(0), "0")
        assertEquals("zero przecinek dwaj", fmt.format(0.2), "0.2")
        assertEquals("zero przecinek dwaj trzej czterej pięciu", fmt.format(0.2345), "0.2345")
        assertEquals("zero przecinek zero dwaj", fmt.format(0.02), "0.02")
        assertEquals("zero przecinek zero dwaj jeden trzej", fmt.format(0.0213), "0.0213")
        assertEquals("czterej przecinek siedmiu pięciu jeden", fmt.format(4.751), "4.751")
        assertEquals("dwunastu przecinek zero pięciu jeden", fmt.format(12.051), "12.051")
        assertEquals("trzynastu przecinek zero dwaj pięciu jeden", fmt.format(13.0251), "13.0251")
        assertEquals("czternastu przecinek zero dwaj dwaj pięciu jeden", fmt.format(14.02251), "14.02251")
        assertEquals("jeden", fmt.format(1), "1")
        assertEquals("dwaj", fmt.format(2), "2")
        assertEquals("trzej", fmt.format(3), "3")
        assertEquals("czterej", fmt.format(4), "4")
        assertEquals("pięciu", fmt.format(5), "5")
        assertEquals("sześciu", fmt.format(6), "6")
        assertEquals("siedmiu", fmt.format(7), "7")
        assertEquals("ośmiu", fmt.format(8), "8")
        assertEquals("dziewięciu", fmt.format(9), "9")
        assertEquals("dziesięciu", fmt.format(10), "10")
        assertEquals("jedenastu", fmt.format(11), "11")
        assertEquals("dwunastu", fmt.format(12), "12")
        assertEquals("trzynastu", fmt.format(13), "13")
        assertEquals("czternastu", fmt.format(14), "14")
        assertEquals("piętnastu", fmt.format(15), "15")
        assertEquals("szesnastu", fmt.format(16), "16")
        assertEquals("siedemnastu", fmt.format(17), "17")
        assertEquals("osiemnastu", fmt.format(18), "18")
        assertEquals("dziewiętnastu", fmt.format(19), "19")
        assertEquals("dwudziestu", fmt.format(20), "20")
        assertEquals("dwudziestu jeden", fmt.format(21), "21")
        assertEquals("dwudziestu dwóch", fmt.format(22), "22")
        assertEquals("dwudziestu trzech", fmt.format(23), "23")
        assertEquals("dwudziestu czterech", fmt.format(24), "24")
        assertEquals("dwudziestu pięciu", fmt.format(25), "25")
        assertEquals("dwudziestu sześciu", fmt.format(26), "26")
        assertEquals("dwudziestu siedmiu", fmt.format(27), "27")
        assertEquals("dwudziestu ośmiu", fmt.format(28), "28")
        assertEquals("dwudziestu dziewięciu", fmt.format(29), "29")
        assertEquals("trzydziestu", fmt.format(30), "30")
        assertEquals("trzydziestu jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesięciu ośmiu", fmt.format(98), "98")
        assertEquals("dziewięćdziesięciu dziewięciu", fmt.format(99), "99")
        assertEquals("stu", fmt.format(100), "100")
        assertEquals("stu jeden", fmt.format(101), "101")
        assertEquals("stu dwóch", fmt.format(102), "102")
        assertEquals("dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(998), "998")
        assertEquals("dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(999), "999")
        assertEquals("tysiąc", fmt.format(1000), "1000")
        assertEquals("tysiąc jeden", fmt.format(1001), "1001")
        assertEquals("tysiąc dwóch", fmt.format(1002), "1002")
        assertEquals("tysiąc dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(1998), "1998")
        assertEquals("tysiąc dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(1999), "1999")
        assertEquals("dwa tysiące", fmt.format(2000), "2000")
        assertEquals("dwa tysiące jeden", fmt.format(2001), "2001")
        assertEquals("dwa tysiące dwóch", fmt.format(2002), "2002")
        assertEquals("dziewięć tysięcy dziewięciuset dziewięćdziesięciu ośmiu", fmt.format(9998), "9998")
        assertEquals("dziewięć tysięcy dziewięciuset dziewięćdziesięciu dziewięciu", fmt.format(9999), "9999")
        assertEquals("dziesięć tysięcy", fmt.format(10000), "10000")
        assertEquals("dziesięć tysięcy jeden", fmt.format(10001), "10001")
        assertEquals("dziesięć tysięcy dwóch", fmt.format(10002), "10002")
        assertEquals("sto tysięcy", fmt.format(100000), "100000")
        assertEquals("sto tysięcy jeden", fmt.format(100001), "100001")
        assertEquals("sto tysięcy dwóch", fmt.format(100002), "100002")
        assertEquals("dwieście tysięcy", fmt.format(200000), "200000")
        assertEquals("dwieście tysięcy jeden", fmt.format(200001), "200001")
        assertEquals("dwieście tysięcy dwóch", fmt.format(200002), "200002")
        assertEquals("milion", fmt.format(1000000), "1000000")
        assertEquals("milion jeden", fmt.format(1000001), "1000001")
        assertEquals("milion dwaj", fmt.format(1000002), "1000002")
        assertEquals("dwa miliony", fmt.format(2000000), "2000000")
        assertEquals("dwa miliony jeden", fmt.format(2000001), "2000001")
        assertEquals("dwa miliony dwaj", fmt.format(2000002), "2000002")
        assertEquals("dziesięć milionów", fmt.format(10000000), "10000000")
        assertEquals("dziesięć milionów jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięć milionów dwaj", fmt.format(10000002), "10000002")
        assertEquals("dwadzieścia milionów", fmt.format(20000000), "20000000")
        assertEquals("dwadzieścia milionów jeden", fmt.format(20000001), "20000001")
        assertEquals("dwadzieścia milionów dwaj", fmt.format(20000002), "20000002")
        assertEquals("sto milionów", fmt.format(100000000), "100000000")
        assertEquals("sto milionów jeden", fmt.format(100000001), "100000001")
        assertEquals("sto milionów dwaj", fmt.format(100000002), "100000002")
        assertEquals("dwieście milionów", fmt.format(200000000), "200000000")
        assertEquals("dwieście milionów jeden", fmt.format(200000001), "200000001")
        assertEquals("dwieście milionów dwaj", fmt.format(200000002), "200000002")
        assertEquals("miliard", fmt.format(1000000000), "1000000000")
        assertEquals("miliard jeden", fmt.format(1000000001), "1000000001")
        assertEquals("miliard dwóch", fmt.format(1000000002), "1000000002")
        assertEquals("dwa miliardy", fmt.format(2000000000), "2000000000")
        assertEquals("dwa miliardy jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwa miliardy dwaj", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalMasculine() {
        val fmt = RBNFPl().spelloutCardinalMasculine
        assertEquals("minus jeden", fmt.format(-1), "-1")
        assertEquals("zero", fmt.format(0), "0")
        assertEquals("zero przecinek dwa", fmt.format(0.2), "0.2")
        assertEquals("zero przecinek dwa trzy cztery pięć", fmt.format(0.2345), "0.2345")
        assertEquals("zero przecinek zero dwa", fmt.format(0.02), "0.02")
        assertEquals("zero przecinek zero dwa jeden trzy", fmt.format(0.0213), "0.0213")
        assertEquals("cztery przecinek siedemset pięćdziesiąt jeden", fmt.format(4.751), "4.751")
        assertEquals("dwanaście przecinek zero pięćdziesiąt jeden", fmt.format(12.051), "12.051")
        assertEquals("trzynaście przecinek zero dwa pięć jeden", fmt.format(13.0251), "13.0251")
        assertEquals("czternaście przecinek zero dwa dwa pięć jeden", fmt.format(14.02251), "14.02251")
        assertEquals("jeden", fmt.format(1), "1")
        assertEquals("dwa", fmt.format(2), "2")
        assertEquals("trzy", fmt.format(3), "3")
        assertEquals("cztery", fmt.format(4), "4")
        assertEquals("pięć", fmt.format(5), "5")
        assertEquals("sześć", fmt.format(6), "6")
        assertEquals("siedem", fmt.format(7), "7")
        assertEquals("osiem", fmt.format(8), "8")
        assertEquals("dziewięć", fmt.format(9), "9")
        assertEquals("dziesięć", fmt.format(10), "10")
        assertEquals("jedenaście", fmt.format(11), "11")
        assertEquals("dwanaście", fmt.format(12), "12")
        assertEquals("trzynaście", fmt.format(13), "13")
        assertEquals("czternaście", fmt.format(14), "14")
        assertEquals("piętnaście", fmt.format(15), "15")
        assertEquals("szesnaście", fmt.format(16), "16")
        assertEquals("siedemnaście", fmt.format(17), "17")
        assertEquals("osiemnaście", fmt.format(18), "18")
        assertEquals("dziewiętnaście", fmt.format(19), "19")
        assertEquals("dwadzieścia", fmt.format(20), "20")
        assertEquals("dwadzieścia jeden", fmt.format(21), "21")
        assertEquals("dwadzieścia dwa", fmt.format(22), "22")
        assertEquals("dwadzieścia trzy", fmt.format(23), "23")
        assertEquals("dwadzieścia cztery", fmt.format(24), "24")
        assertEquals("dwadzieścia pięć", fmt.format(25), "25")
        assertEquals("dwadzieścia sześć", fmt.format(26), "26")
        assertEquals("dwadzieścia siedem", fmt.format(27), "27")
        assertEquals("dwadzieścia osiem", fmt.format(28), "28")
        assertEquals("dwadzieścia dziewięć", fmt.format(29), "29")
        assertEquals("trzydzieści", fmt.format(30), "30")
        assertEquals("trzydzieści jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesiąt osiem", fmt.format(98), "98")
        assertEquals("dziewięćdziesiąt dziewięć", fmt.format(99), "99")
        assertEquals("sto", fmt.format(100), "100")
        assertEquals("sto jeden", fmt.format(101), "101")
        assertEquals("sto dwa", fmt.format(102), "102")
        assertEquals("dziewięćset dziewięćdziesiąt osiem", fmt.format(998), "998")
        assertEquals("dziewięćset dziewięćdziesiąt dziewięć", fmt.format(999), "999")
        assertEquals("tysiąc", fmt.format(1000), "1000")
        assertEquals("tysiąc jeden", fmt.format(1001), "1001")
        assertEquals("tysiąc dwa", fmt.format(1002), "1002")
        assertEquals("tysiąc dziewięćset dziewięćdziesiąt osiem", fmt.format(1998), "1998")
        assertEquals("tysiąc dziewięćset dziewięćdziesiąt dziewięć", fmt.format(1999), "1999")
        assertEquals("dwa tysiące", fmt.format(2000), "2000")
        assertEquals("dwa tysiące jeden", fmt.format(2001), "2001")
        assertEquals("dwa tysiące dwa", fmt.format(2002), "2002")
        assertEquals("dziewięć tysięcy dziewięćset dziewięćdziesiąt osiem", fmt.format(9998), "9998")
        assertEquals("dziewięć tysięcy dziewięćset dziewięćdziesiąt dziewięć", fmt.format(9999), "9999")
        assertEquals("dziesięć tysięcy", fmt.format(10000), "10000")
        assertEquals("dziesięć tysięcy jeden", fmt.format(10001), "10001")
        assertEquals("dziesięć tysięcy dwa", fmt.format(10002), "10002")
        assertEquals("sto tysięcy", fmt.format(100000), "100000")
        assertEquals("sto tysięcy jeden", fmt.format(100001), "100001")
        assertEquals("sto tysięcy dwa", fmt.format(100002), "100002")
        assertEquals("dwieście tysięcy", fmt.format(200000), "200000")
        assertEquals("dwieście tysięcy jeden", fmt.format(200001), "200001")
        assertEquals("dwieście tysięcy dwa", fmt.format(200002), "200002")
        assertEquals("milion", fmt.format(1000000), "1000000")
        assertEquals("milion jeden", fmt.format(1000001), "1000001")
        assertEquals("milion dwa", fmt.format(1000002), "1000002")
        assertEquals("dwa miliony", fmt.format(2000000), "2000000")
        assertEquals("dwa miliony jeden", fmt.format(2000001), "2000001")
        assertEquals("dwa miliony dwa", fmt.format(2000002), "2000002")
        assertEquals("dziesięć milionów", fmt.format(10000000), "10000000")
        assertEquals("dziesięć milionów jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięć milionów dwa", fmt.format(10000002), "10000002")
        assertEquals("dwadzieścia milionów", fmt.format(20000000), "20000000")
        assertEquals("dwadzieścia milionów jeden", fmt.format(20000001), "20000001")
        assertEquals("dwadzieścia milionów dwa", fmt.format(20000002), "20000002")
        assertEquals("sto milionów", fmt.format(100000000), "100000000")
        assertEquals("sto milionów jeden", fmt.format(100000001), "100000001")
        assertEquals("sto milionów dwa", fmt.format(100000002), "100000002")
        assertEquals("dwieście milionów", fmt.format(200000000), "200000000")
        assertEquals("dwieście milionów jeden", fmt.format(200000001), "200000001")
        assertEquals("dwieście milionów dwa", fmt.format(200000002), "200000002")
        assertEquals("miliard", fmt.format(1000000000), "1000000000")
        assertEquals("miliard jeden", fmt.format(1000000001), "1000000001")
        assertEquals("miliard dwa", fmt.format(1000000002), "1000000002")
        assertEquals("dwa miliardy", fmt.format(2000000000), "2000000000")
        assertEquals("dwa miliardy jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwa miliardy dwa", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutNumbering() {
        val fmt = RBNFPl().spelloutNumbering
        assertEquals("minus jeden", fmt.format(-1), "-1")
        assertEquals("zero", fmt.format(0), "0")
        assertEquals("zero przecinek dwa", fmt.format(0.2), "0.2")
        assertEquals("zero przecinek dwa trzy cztery pięć", fmt.format(0.2345), "0.2345")
        assertEquals("zero przecinek zero dwa", fmt.format(0.02), "0.02")
        assertEquals("zero przecinek zero dwa jeden trzy", fmt.format(0.0213), "0.0213")
        assertEquals("cztery przecinek siedemset pięćdziesiąt jeden", fmt.format(4.751), "4.751")
        assertEquals("dwanaście przecinek zero pięćdziesiąt jeden", fmt.format(12.051), "12.051")
        assertEquals("trzynaście przecinek zero dwa pięć jeden", fmt.format(13.0251), "13.0251")
        assertEquals("czternaście przecinek zero dwa dwa pięć jeden", fmt.format(14.02251), "14.02251")
        assertEquals("jeden", fmt.format(1), "1")
        assertEquals("dwa", fmt.format(2), "2")
        assertEquals("trzy", fmt.format(3), "3")
        assertEquals("cztery", fmt.format(4), "4")
        assertEquals("pięć", fmt.format(5), "5")
        assertEquals("sześć", fmt.format(6), "6")
        assertEquals("siedem", fmt.format(7), "7")
        assertEquals("osiem", fmt.format(8), "8")
        assertEquals("dziewięć", fmt.format(9), "9")
        assertEquals("dziesięć", fmt.format(10), "10")
        assertEquals("jedenaście", fmt.format(11), "11")
        assertEquals("dwanaście", fmt.format(12), "12")
        assertEquals("trzynaście", fmt.format(13), "13")
        assertEquals("czternaście", fmt.format(14), "14")
        assertEquals("piętnaście", fmt.format(15), "15")
        assertEquals("szesnaście", fmt.format(16), "16")
        assertEquals("siedemnaście", fmt.format(17), "17")
        assertEquals("osiemnaście", fmt.format(18), "18")
        assertEquals("dziewiętnaście", fmt.format(19), "19")
        assertEquals("dwadzieścia", fmt.format(20), "20")
        assertEquals("dwadzieścia jeden", fmt.format(21), "21")
        assertEquals("dwadzieścia dwa", fmt.format(22), "22")
        assertEquals("dwadzieścia trzy", fmt.format(23), "23")
        assertEquals("dwadzieścia cztery", fmt.format(24), "24")
        assertEquals("dwadzieścia pięć", fmt.format(25), "25")
        assertEquals("dwadzieścia sześć", fmt.format(26), "26")
        assertEquals("dwadzieścia siedem", fmt.format(27), "27")
        assertEquals("dwadzieścia osiem", fmt.format(28), "28")
        assertEquals("dwadzieścia dziewięć", fmt.format(29), "29")
        assertEquals("trzydzieści", fmt.format(30), "30")
        assertEquals("trzydzieści jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesiąt osiem", fmt.format(98), "98")
        assertEquals("dziewięćdziesiąt dziewięć", fmt.format(99), "99")
        assertEquals("sto", fmt.format(100), "100")
        assertEquals("sto jeden", fmt.format(101), "101")
        assertEquals("sto dwa", fmt.format(102), "102")
        assertEquals("dziewięćset dziewięćdziesiąt osiem", fmt.format(998), "998")
        assertEquals("dziewięćset dziewięćdziesiąt dziewięć", fmt.format(999), "999")
        assertEquals("tysiąc", fmt.format(1000), "1000")
        assertEquals("tysiąc jeden", fmt.format(1001), "1001")
        assertEquals("tysiąc dwa", fmt.format(1002), "1002")
        assertEquals("tysiąc dziewięćset dziewięćdziesiąt osiem", fmt.format(1998), "1998")
        assertEquals("tysiąc dziewięćset dziewięćdziesiąt dziewięć", fmt.format(1999), "1999")
        assertEquals("dwa tysiące", fmt.format(2000), "2000")
        assertEquals("dwa tysiące jeden", fmt.format(2001), "2001")
        assertEquals("dwa tysiące dwa", fmt.format(2002), "2002")
        assertEquals("dziewięć tysięcy dziewięćset dziewięćdziesiąt osiem", fmt.format(9998), "9998")
        assertEquals("dziewięć tysięcy dziewięćset dziewięćdziesiąt dziewięć", fmt.format(9999), "9999")
        assertEquals("dziesięć tysięcy", fmt.format(10000), "10000")
        assertEquals("dziesięć tysięcy jeden", fmt.format(10001), "10001")
        assertEquals("dziesięć tysięcy dwa", fmt.format(10002), "10002")
        assertEquals("sto tysięcy", fmt.format(100000), "100000")
        assertEquals("sto tysięcy jeden", fmt.format(100001), "100001")
        assertEquals("sto tysięcy dwa", fmt.format(100002), "100002")
        assertEquals("dwieście tysięcy", fmt.format(200000), "200000")
        assertEquals("dwieście tysięcy jeden", fmt.format(200001), "200001")
        assertEquals("dwieście tysięcy dwa", fmt.format(200002), "200002")
        assertEquals("milion", fmt.format(1000000), "1000000")
        assertEquals("milion jeden", fmt.format(1000001), "1000001")
        assertEquals("milion dwa", fmt.format(1000002), "1000002")
        assertEquals("dwa miliony", fmt.format(2000000), "2000000")
        assertEquals("dwa miliony jeden", fmt.format(2000001), "2000001")
        assertEquals("dwa miliony dwa", fmt.format(2000002), "2000002")
        assertEquals("dziesięć milionów", fmt.format(10000000), "10000000")
        assertEquals("dziesięć milionów jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięć milionów dwa", fmt.format(10000002), "10000002")
        assertEquals("dwadzieścia milionów", fmt.format(20000000), "20000000")
        assertEquals("dwadzieścia milionów jeden", fmt.format(20000001), "20000001")
        assertEquals("dwadzieścia milionów dwa", fmt.format(20000002), "20000002")
        assertEquals("sto milionów", fmt.format(100000000), "100000000")
        assertEquals("sto milionów jeden", fmt.format(100000001), "100000001")
        assertEquals("sto milionów dwa", fmt.format(100000002), "100000002")
        assertEquals("dwieście milionów", fmt.format(200000000), "200000000")
        assertEquals("dwieście milionów jeden", fmt.format(200000001), "200000001")
        assertEquals("dwieście milionów dwa", fmt.format(200000002), "200000002")
        assertEquals("miliard", fmt.format(1000000000), "1000000000")
        assertEquals("miliard jeden", fmt.format(1000000001), "1000000001")
        assertEquals("miliard dwa", fmt.format(1000000002), "1000000002")
        assertEquals("dwa miliardy", fmt.format(2000000000), "2000000000")
        assertEquals("dwa miliardy jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwa miliardy dwa", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutNumberingYear() {
        val fmt = RBNFPl().spelloutNumberingYear
// nonsense assertEquals("minus jeden", fmt.format(-1), "-1")
// nonsense assertEquals("zero", fmt.format(0), "0")
// nonsense assertEquals("0,2", fmt.format(0.2), "0.2")
// nonsense assertEquals("0,2", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0,0", fmt.format(0.02), "0.02")
// nonsense assertEquals("0,0", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4,8", fmt.format(4.751), "4.751")
// nonsense assertEquals("12,1", fmt.format(12.051), "12.051")
// nonsense assertEquals("13,0", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14,0", fmt.format(14.02251), "14.02251")
        assertEquals("jeden", fmt.format(1), "1")
        assertEquals("dwa", fmt.format(2), "2")
        assertEquals("trzy", fmt.format(3), "3")
        assertEquals("cztery", fmt.format(4), "4")
        assertEquals("pięć", fmt.format(5), "5")
        assertEquals("sześć", fmt.format(6), "6")
        assertEquals("siedem", fmt.format(7), "7")
        assertEquals("osiem", fmt.format(8), "8")
        assertEquals("dziewięć", fmt.format(9), "9")
        assertEquals("dziesięć", fmt.format(10), "10")
        assertEquals("jedenaście", fmt.format(11), "11")
        assertEquals("dwanaście", fmt.format(12), "12")
        assertEquals("trzynaście", fmt.format(13), "13")
        assertEquals("czternaście", fmt.format(14), "14")
        assertEquals("piętnaście", fmt.format(15), "15")
        assertEquals("szesnaście", fmt.format(16), "16")
        assertEquals("siedemnaście", fmt.format(17), "17")
        assertEquals("osiemnaście", fmt.format(18), "18")
        assertEquals("dziewiętnaście", fmt.format(19), "19")
        assertEquals("dwadzieścia", fmt.format(20), "20")
        assertEquals("dwadzieścia jeden", fmt.format(21), "21")
        assertEquals("dwadzieścia dwa", fmt.format(22), "22")
        assertEquals("dwadzieścia trzy", fmt.format(23), "23")
        assertEquals("dwadzieścia cztery", fmt.format(24), "24")
        assertEquals("dwadzieścia pięć", fmt.format(25), "25")
        assertEquals("dwadzieścia sześć", fmt.format(26), "26")
        assertEquals("dwadzieścia siedem", fmt.format(27), "27")
        assertEquals("dwadzieścia osiem", fmt.format(28), "28")
        assertEquals("dwadzieścia dziewięć", fmt.format(29), "29")
        assertEquals("trzydzieści", fmt.format(30), "30")
        assertEquals("trzydzieści jeden", fmt.format(31), "31")
        assertEquals("dziewięćdziesiąt osiem", fmt.format(98), "98")
        assertEquals("dziewięćdziesiąt dziewięć", fmt.format(99), "99")
        assertEquals("sto", fmt.format(100), "100")
        assertEquals("sto jeden", fmt.format(101), "101")
        assertEquals("sto dwa", fmt.format(102), "102")
        assertEquals("dziewięćset dziewięćdziesiąt osiem", fmt.format(998), "998")
        assertEquals("dziewięćset dziewięćdziesiąt dziewięć", fmt.format(999), "999")
        assertEquals("tysiąc", fmt.format(1000), "1000")
        assertEquals("tysiąc jeden", fmt.format(1001), "1001")
        assertEquals("tysiąc dwa", fmt.format(1002), "1002")
        assertEquals("tysiąc dziewięćset dziewięćdziesiąt osiem", fmt.format(1998), "1998")
        assertEquals("tysiąc dziewięćset dziewięćdziesiąt dziewięć", fmt.format(1999), "1999")
        assertEquals("dwa tysiące", fmt.format(2000), "2000")
        assertEquals("dwa tysiące jeden", fmt.format(2001), "2001")
        assertEquals("dwa tysiące dwa", fmt.format(2002), "2002")
        assertEquals("dziewięć tysięcy dziewięćset dziewięćdziesiąt osiem", fmt.format(9998), "9998")
        assertEquals("dziewięć tysięcy dziewięćset dziewięćdziesiąt dziewięć", fmt.format(9999), "9999")
        assertEquals("dziesięć tysięcy", fmt.format(10000), "10000")
        assertEquals("dziesięć tysięcy jeden", fmt.format(10001), "10001")
        assertEquals("dziesięć tysięcy dwa", fmt.format(10002), "10002")
        assertEquals("sto tysięcy", fmt.format(100000), "100000")
        assertEquals("sto tysięcy jeden", fmt.format(100001), "100001")
        assertEquals("sto tysięcy dwa", fmt.format(100002), "100002")
        assertEquals("dwieście tysięcy", fmt.format(200000), "200000")
        assertEquals("dwieście tysięcy jeden", fmt.format(200001), "200001")
        assertEquals("dwieście tysięcy dwa", fmt.format(200002), "200002")
        assertEquals("milion", fmt.format(1000000), "1000000")
        assertEquals("milion jeden", fmt.format(1000001), "1000001")
        assertEquals("milion dwa", fmt.format(1000002), "1000002")
        assertEquals("dwa miliony", fmt.format(2000000), "2000000")
        assertEquals("dwa miliony jeden", fmt.format(2000001), "2000001")
        assertEquals("dwa miliony dwa", fmt.format(2000002), "2000002")
        assertEquals("dziesięć milionów", fmt.format(10000000), "10000000")
        assertEquals("dziesięć milionów jeden", fmt.format(10000001), "10000001")
        assertEquals("dziesięć milionów dwa", fmt.format(10000002), "10000002")
        assertEquals("dwadzieścia milionów", fmt.format(20000000), "20000000")
        assertEquals("dwadzieścia milionów jeden", fmt.format(20000001), "20000001")
        assertEquals("dwadzieścia milionów dwa", fmt.format(20000002), "20000002")
        assertEquals("sto milionów", fmt.format(100000000), "100000000")
        assertEquals("sto milionów jeden", fmt.format(100000001), "100000001")
        assertEquals("sto milionów dwa", fmt.format(100000002), "100000002")
        assertEquals("dwieście milionów", fmt.format(200000000), "200000000")
        assertEquals("dwieście milionów jeden", fmt.format(200000001), "200000001")
        assertEquals("dwieście milionów dwa", fmt.format(200000002), "200000002")
        assertEquals("miliard", fmt.format(1000000000), "1000000000")
        assertEquals("miliard jeden", fmt.format(1000000001), "1000000001")
        assertEquals("miliard dwa", fmt.format(1000000002), "1000000002")
        assertEquals("dwa miliardy", fmt.format(2000000000), "2000000000")
        assertEquals("dwa miliardy jeden", fmt.format(2000000001), "2000000001")
        assertEquals("dwa miliardy dwa", fmt.format(2000000002), "2000000002")
    }
}
