package info.leonenko.i18n.rbnf

import kotlin.test.Test
import kotlin.test.assertEquals

class RBNFDeTest {
    @Test
    fun spelloutOrdinalM() {
        val fmt = RBNFDe().spelloutOrdinalM
// nonsense assertEquals("minus erstem", fmt.format(-1), "-1")
// nonsense assertEquals("nulltem", fmt.format(0), "0")
// nonsense assertEquals("0,2", fmt.format(0.2), "0.2")
// nonsense assertEquals("0,2", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0", fmt.format(0.02), "0.02")
// nonsense assertEquals("0", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4,8", fmt.format(4.751), "4.751")
// nonsense assertEquals("12,1", fmt.format(12.051), "12.051")
// nonsense assertEquals("13", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14", fmt.format(14.02251), "14.02251")
        assertEquals("erstem", fmt.format(1), "1")
        assertEquals("zweitem", fmt.format(2), "2")
        assertEquals("drittem", fmt.format(3), "3")
        assertEquals("viertem", fmt.format(4), "4")
        assertEquals("fünftem", fmt.format(5), "5")
        assertEquals("sechstem", fmt.format(6), "6")
        assertEquals("siebtem", fmt.format(7), "7")
        assertEquals("achtem", fmt.format(8), "8")
        assertEquals("neuntem", fmt.format(9), "9")
        assertEquals("zehntem", fmt.format(10), "10")
        assertEquals("elftem", fmt.format(11), "11")
        assertEquals("zwölftem", fmt.format(12), "12")
        assertEquals("dreizehntem", fmt.format(13), "13")
        assertEquals("vierzehntem", fmt.format(14), "14")
        assertEquals("fünfzehntem", fmt.format(15), "15")
        assertEquals("sechzehntem", fmt.format(16), "16")
        assertEquals("siebzehntem", fmt.format(17), "17")
        assertEquals("achtzehntem", fmt.format(18), "18")
        assertEquals("neunzehntem", fmt.format(19), "19")
        assertEquals("zwanzigstem", fmt.format(20), "20")
        assertEquals("ein­und­zwanzigstem", fmt.format(21), "21")
        assertEquals("zwei­und­zwanzigstem", fmt.format(22), "22")
        assertEquals("drei­und­zwanzigstem", fmt.format(23), "23")
        assertEquals("vier­und­zwanzigstem", fmt.format(24), "24")
        assertEquals("fünf­und­zwanzigstem", fmt.format(25), "25")
        assertEquals("sechs­und­zwanzigstem", fmt.format(26), "26")
        assertEquals("sieben­und­zwanzigstem", fmt.format(27), "27")
        assertEquals("acht­und­zwanzigstem", fmt.format(28), "28")
        assertEquals("neun­und­zwanzigstem", fmt.format(29), "29")
        assertEquals("dreißigstem", fmt.format(30), "30")
        assertEquals("ein­und­dreißigstem", fmt.format(31), "31")
        assertEquals("acht­und­neunzigstem", fmt.format(98), "98")
        assertEquals("neun­und­neunzigstem", fmt.format(99), "99")
        assertEquals("ein­hundertstem", fmt.format(100), "100")
        assertEquals("ein­hundert­erstem", fmt.format(101), "101")
        assertEquals("ein­hundert­zweitem", fmt.format(102), "102")
        assertEquals("neun­hundert­acht­und­neunzigstem", fmt.format(998), "998")
        assertEquals("neun­hundert­neun­und­neunzigstem", fmt.format(999), "999")
        assertEquals("ein­tausendstem", fmt.format(1000), "1000")
        assertEquals("ein­tausend­erstem", fmt.format(1001), "1001")
        assertEquals("ein­tausend­zweitem", fmt.format(1002), "1002")
        assertEquals("ein­tausend­neun­hundert­acht­und­neunzigstem", fmt.format(1998), "1998")
        assertEquals("ein­tausend­neun­hundert­neun­und­neunzigstem", fmt.format(1999), "1999")
        assertEquals("zwei­tausendstem", fmt.format(2000), "2000")
        assertEquals("zwei­tausend­erstem", fmt.format(2001), "2001")
        assertEquals("zwei­tausend­zweitem", fmt.format(2002), "2002")
        assertEquals("neun­tausend­neun­hundert­acht­und­neunzigstem", fmt.format(9998), "9998")
        assertEquals("neun­tausend­neun­hundert­neun­und­neunzigstem", fmt.format(9999), "9999")
        assertEquals("zehn­tausendstem", fmt.format(10000), "10000")
        assertEquals("zehn­tausend­erstem", fmt.format(10001), "10001")
        assertEquals("zehn­tausend­zweitem", fmt.format(10002), "10002")
        assertEquals("ein­hundert­tausendstem", fmt.format(100000), "100000")
        assertEquals("ein­hundert­tausend­erstem", fmt.format(100001), "100001")
        assertEquals("ein­hundert­tausend­zweitem", fmt.format(100002), "100002")
        assertEquals("zwei­hundert­tausendstem", fmt.format(200000), "200000")
        assertEquals("zwei­hundert­tausend­erstem", fmt.format(200001), "200001")
        assertEquals("zwei­hundert­tausend­zweitem", fmt.format(200002), "200002")
        assertEquals("eine Millionstem", fmt.format(1000000), "1000000")
        assertEquals("eine Million erstem", fmt.format(1000001), "1000001")
        assertEquals("eine Million zweitem", fmt.format(1000002), "1000002")
        assertEquals("zwei Millionenstem", fmt.format(2000000), "2000000")
        assertEquals("zwei Millionen erstem", fmt.format(2000001), "2000001")
        assertEquals("zwei Millionen zweitem", fmt.format(2000002), "2000002")
        assertEquals("zehn Millionenstem", fmt.format(10000000), "10000000")
        assertEquals("zehn Millionen erstem", fmt.format(10000001), "10000001")
        assertEquals("zehn Millionen zweitem", fmt.format(10000002), "10000002")
        assertEquals("zwanzig Millionenstem", fmt.format(20000000), "20000000")
        assertEquals("zwanzig Millionen erstem", fmt.format(20000001), "20000001")
        assertEquals("zwanzig Millionen zweitem", fmt.format(20000002), "20000002")
        assertEquals("ein­hundert Millionenstem", fmt.format(100000000), "100000000")
        assertEquals("ein­hundert Millionen erstem", fmt.format(100000001), "100000001")
        assertEquals("ein­hundert Millionen zweitem", fmt.format(100000002), "100000002")
        assertEquals("zwei­hundert Millionenstem", fmt.format(200000000), "200000000")
        assertEquals("zwei­hundert Millionen erstem", fmt.format(200000001), "200000001")
        assertEquals("zwei­hundert Millionen zweitem", fmt.format(200000002), "200000002")
        assertEquals("eine Milliardestem", fmt.format(1000000000), "1000000000")
        assertEquals("eine Milliarde erstem", fmt.format(1000000001), "1000000001")
        assertEquals("eine Milliarde zweitem", fmt.format(1000000002), "1000000002")
        assertEquals("zwei Milliardenstem", fmt.format(2000000000), "2000000000")
        assertEquals("zwei Milliarden erstem", fmt.format(2000000001), "2000000001")
        assertEquals("zwei Milliarden zweitem", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutOrdinalS() {
        val fmt = RBNFDe().spelloutOrdinalS
// nonsense assertEquals("minus erstes", fmt.format(-1), "-1")
// nonsense assertEquals("nulltes", fmt.format(0), "0")
// nonsense assertEquals("0,2", fmt.format(0.2), "0.2")
// nonsense assertEquals("0,2", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0", fmt.format(0.02), "0.02")
// nonsense assertEquals("0", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4,8", fmt.format(4.751), "4.751")
// nonsense assertEquals("12,1", fmt.format(12.051), "12.051")
// nonsense assertEquals("13", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14", fmt.format(14.02251), "14.02251")
        assertEquals("erstes", fmt.format(1), "1")
        assertEquals("zweites", fmt.format(2), "2")
        assertEquals("drittes", fmt.format(3), "3")
        assertEquals("viertes", fmt.format(4), "4")
        assertEquals("fünftes", fmt.format(5), "5")
        assertEquals("sechstes", fmt.format(6), "6")
        assertEquals("siebtes", fmt.format(7), "7")
        assertEquals("achtes", fmt.format(8), "8")
        assertEquals("neuntes", fmt.format(9), "9")
        assertEquals("zehntes", fmt.format(10), "10")
        assertEquals("elftes", fmt.format(11), "11")
        assertEquals("zwölftes", fmt.format(12), "12")
        assertEquals("dreizehntes", fmt.format(13), "13")
        assertEquals("vierzehntes", fmt.format(14), "14")
        assertEquals("fünfzehntes", fmt.format(15), "15")
        assertEquals("sechzehntes", fmt.format(16), "16")
        assertEquals("siebzehntes", fmt.format(17), "17")
        assertEquals("achtzehntes", fmt.format(18), "18")
        assertEquals("neunzehntes", fmt.format(19), "19")
        assertEquals("zwanzigstes", fmt.format(20), "20")
        assertEquals("ein­und­zwanzigstes", fmt.format(21), "21")
        assertEquals("zwei­und­zwanzigstes", fmt.format(22), "22")
        assertEquals("drei­und­zwanzigstes", fmt.format(23), "23")
        assertEquals("vier­und­zwanzigstes", fmt.format(24), "24")
        assertEquals("fünf­und­zwanzigstes", fmt.format(25), "25")
        assertEquals("sechs­und­zwanzigstes", fmt.format(26), "26")
        assertEquals("sieben­und­zwanzigstes", fmt.format(27), "27")
        assertEquals("acht­und­zwanzigstes", fmt.format(28), "28")
        assertEquals("neun­und­zwanzigstes", fmt.format(29), "29")
        assertEquals("dreißigstes", fmt.format(30), "30")
        assertEquals("ein­und­dreißigstes", fmt.format(31), "31")
        assertEquals("acht­und­neunzigstes", fmt.format(98), "98")
        assertEquals("neun­und­neunzigstes", fmt.format(99), "99")
        assertEquals("ein­hundertstes", fmt.format(100), "100")
        assertEquals("ein­hundert­erstes", fmt.format(101), "101")
        assertEquals("ein­hundert­zweites", fmt.format(102), "102")
        assertEquals("neun­hundert­acht­und­neunzigstes", fmt.format(998), "998")
        assertEquals("neun­hundert­neun­und­neunzigstes", fmt.format(999), "999")
        assertEquals("ein­tausendstes", fmt.format(1000), "1000")
        assertEquals("ein­tausend­erstes", fmt.format(1001), "1001")
        assertEquals("ein­tausend­zweites", fmt.format(1002), "1002")
        assertEquals("ein­tausend­neun­hundert­acht­und­neunzigstes", fmt.format(1998), "1998")
        assertEquals("ein­tausend­neun­hundert­neun­und­neunzigstes", fmt.format(1999), "1999")
        assertEquals("zwei­tausendstes", fmt.format(2000), "2000")
        assertEquals("zwei­tausend­erstes", fmt.format(2001), "2001")
        assertEquals("zwei­tausend­zweites", fmt.format(2002), "2002")
        assertEquals("neun­tausend­neun­hundert­acht­und­neunzigstes", fmt.format(9998), "9998")
        assertEquals("neun­tausend­neun­hundert­neun­und­neunzigstes", fmt.format(9999), "9999")
        assertEquals("zehn­tausendstes", fmt.format(10000), "10000")
        assertEquals("zehn­tausend­erstes", fmt.format(10001), "10001")
        assertEquals("zehn­tausend­zweites", fmt.format(10002), "10002")
        assertEquals("ein­hundert­tausendstes", fmt.format(100000), "100000")
        assertEquals("ein­hundert­tausend­erstes", fmt.format(100001), "100001")
        assertEquals("ein­hundert­tausend­zweites", fmt.format(100002), "100002")
        assertEquals("zwei­hundert­tausendstes", fmt.format(200000), "200000")
        assertEquals("zwei­hundert­tausend­erstes", fmt.format(200001), "200001")
        assertEquals("zwei­hundert­tausend­zweites", fmt.format(200002), "200002")
        assertEquals("eine Millionstes", fmt.format(1000000), "1000000")
        assertEquals("eine Million erstes", fmt.format(1000001), "1000001")
        assertEquals("eine Million zweites", fmt.format(1000002), "1000002")
        assertEquals("zwei Millionenstes", fmt.format(2000000), "2000000")
        assertEquals("zwei Millionen erstes", fmt.format(2000001), "2000001")
        assertEquals("zwei Millionen zweites", fmt.format(2000002), "2000002")
        assertEquals("zehn Millionenstes", fmt.format(10000000), "10000000")
        assertEquals("zehn Millionen erstes", fmt.format(10000001), "10000001")
        assertEquals("zehn Millionen zweites", fmt.format(10000002), "10000002")
        assertEquals("zwanzig Millionenstes", fmt.format(20000000), "20000000")
        assertEquals("zwanzig Millionen erstes", fmt.format(20000001), "20000001")
        assertEquals("zwanzig Millionen zweites", fmt.format(20000002), "20000002")
        assertEquals("ein­hundert Millionenstes", fmt.format(100000000), "100000000")
        assertEquals("ein­hundert Millionen erstes", fmt.format(100000001), "100000001")
        assertEquals("ein­hundert Millionen zweites", fmt.format(100000002), "100000002")
        assertEquals("zwei­hundert Millionenstes", fmt.format(200000000), "200000000")
        assertEquals("zwei­hundert Millionen erstes", fmt.format(200000001), "200000001")
        assertEquals("zwei­hundert Millionen zweites", fmt.format(200000002), "200000002")
        assertEquals("eine Milliardestes", fmt.format(1000000000), "1000000000")
        assertEquals("eine Milliarde erstes", fmt.format(1000000001), "1000000001")
        assertEquals("eine Milliarde zweites", fmt.format(1000000002), "1000000002")
        assertEquals("zwei Milliardenstes", fmt.format(2000000000), "2000000000")
        assertEquals("zwei Milliarden erstes", fmt.format(2000000001), "2000000001")
        assertEquals("zwei Milliarden zweites", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutOrdinalR() {
        val fmt = RBNFDe().spelloutOrdinalR
// nonsense assertEquals("minus erster", fmt.format(-1), "-1")
// nonsense assertEquals("nullter", fmt.format(0), "0")
// nonsense assertEquals("0,2", fmt.format(0.2), "0.2")
// nonsense assertEquals("0,2", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0", fmt.format(0.02), "0.02")
// nonsense assertEquals("0", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4,8", fmt.format(4.751), "4.751")
// nonsense assertEquals("12,1", fmt.format(12.051), "12.051")
// nonsense assertEquals("13", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14", fmt.format(14.02251), "14.02251")
        assertEquals("erster", fmt.format(1), "1")
        assertEquals("zweiter", fmt.format(2), "2")
        assertEquals("dritter", fmt.format(3), "3")
        assertEquals("vierter", fmt.format(4), "4")
        assertEquals("fünfter", fmt.format(5), "5")
        assertEquals("sechster", fmt.format(6), "6")
        assertEquals("siebter", fmt.format(7), "7")
        assertEquals("achter", fmt.format(8), "8")
        assertEquals("neunter", fmt.format(9), "9")
        assertEquals("zehnter", fmt.format(10), "10")
        assertEquals("elfter", fmt.format(11), "11")
        assertEquals("zwölfter", fmt.format(12), "12")
        assertEquals("dreizehnter", fmt.format(13), "13")
        assertEquals("vierzehnter", fmt.format(14), "14")
        assertEquals("fünfzehnter", fmt.format(15), "15")
        assertEquals("sechzehnter", fmt.format(16), "16")
        assertEquals("siebzehnter", fmt.format(17), "17")
        assertEquals("achtzehnter", fmt.format(18), "18")
        assertEquals("neunzehnter", fmt.format(19), "19")
        assertEquals("zwanzigster", fmt.format(20), "20")
        assertEquals("ein­und­zwanzigster", fmt.format(21), "21")
        assertEquals("zwei­und­zwanzigster", fmt.format(22), "22")
        assertEquals("drei­und­zwanzigster", fmt.format(23), "23")
        assertEquals("vier­und­zwanzigster", fmt.format(24), "24")
        assertEquals("fünf­und­zwanzigster", fmt.format(25), "25")
        assertEquals("sechs­und­zwanzigster", fmt.format(26), "26")
        assertEquals("sieben­und­zwanzigster", fmt.format(27), "27")
        assertEquals("acht­und­zwanzigster", fmt.format(28), "28")
        assertEquals("neun­und­zwanzigster", fmt.format(29), "29")
        assertEquals("dreißigster", fmt.format(30), "30")
        assertEquals("ein­und­dreißigster", fmt.format(31), "31")
        assertEquals("acht­und­neunzigster", fmt.format(98), "98")
        assertEquals("neun­und­neunzigster", fmt.format(99), "99")
        assertEquals("ein­hundertster", fmt.format(100), "100")
        assertEquals("ein­hundert­erster", fmt.format(101), "101")
        assertEquals("ein­hundert­zweiter", fmt.format(102), "102")
        assertEquals("neun­hundert­acht­und­neunzigster", fmt.format(998), "998")
        assertEquals("neun­hundert­neun­und­neunzigster", fmt.format(999), "999")
        assertEquals("ein­tausendster", fmt.format(1000), "1000")
        assertEquals("ein­tausend­erster", fmt.format(1001), "1001")
        assertEquals("ein­tausend­zweiter", fmt.format(1002), "1002")
        assertEquals("ein­tausend­neun­hundert­acht­und­neunzigster", fmt.format(1998), "1998")
        assertEquals("ein­tausend­neun­hundert­neun­und­neunzigster", fmt.format(1999), "1999")
        assertEquals("zwei­tausendster", fmt.format(2000), "2000")
        assertEquals("zwei­tausend­erster", fmt.format(2001), "2001")
        assertEquals("zwei­tausend­zweiter", fmt.format(2002), "2002")
        assertEquals("neun­tausend­neun­hundert­acht­und­neunzigster", fmt.format(9998), "9998")
        assertEquals("neun­tausend­neun­hundert­neun­und­neunzigster", fmt.format(9999), "9999")
        assertEquals("zehn­tausendster", fmt.format(10000), "10000")
        assertEquals("zehn­tausend­erster", fmt.format(10001), "10001")
        assertEquals("zehn­tausend­zweiter", fmt.format(10002), "10002")
        assertEquals("ein­hundert­tausendster", fmt.format(100000), "100000")
        assertEquals("ein­hundert­tausend­erster", fmt.format(100001), "100001")
        assertEquals("ein­hundert­tausend­zweiter", fmt.format(100002), "100002")
        assertEquals("zwei­hundert­tausendster", fmt.format(200000), "200000")
        assertEquals("zwei­hundert­tausend­erster", fmt.format(200001), "200001")
        assertEquals("zwei­hundert­tausend­zweiter", fmt.format(200002), "200002")
        assertEquals("eine Millionster", fmt.format(1000000), "1000000")
        assertEquals("eine Million erster", fmt.format(1000001), "1000001")
        assertEquals("eine Million zweiter", fmt.format(1000002), "1000002")
        assertEquals("zwei Millionenster", fmt.format(2000000), "2000000")
        assertEquals("zwei Millionen erster", fmt.format(2000001), "2000001")
        assertEquals("zwei Millionen zweiter", fmt.format(2000002), "2000002")
        assertEquals("zehn Millionenster", fmt.format(10000000), "10000000")
        assertEquals("zehn Millionen erster", fmt.format(10000001), "10000001")
        assertEquals("zehn Millionen zweiter", fmt.format(10000002), "10000002")
        assertEquals("zwanzig Millionenster", fmt.format(20000000), "20000000")
        assertEquals("zwanzig Millionen erster", fmt.format(20000001), "20000001")
        assertEquals("zwanzig Millionen zweiter", fmt.format(20000002), "20000002")
        assertEquals("ein­hundert Millionenster", fmt.format(100000000), "100000000")
        assertEquals("ein­hundert Millionen erster", fmt.format(100000001), "100000001")
        assertEquals("ein­hundert Millionen zweiter", fmt.format(100000002), "100000002")
        assertEquals("zwei­hundert Millionenster", fmt.format(200000000), "200000000")
        assertEquals("zwei­hundert Millionen erster", fmt.format(200000001), "200000001")
        assertEquals("zwei­hundert Millionen zweiter", fmt.format(200000002), "200000002")
        assertEquals("eine Milliardester", fmt.format(1000000000), "1000000000")
        assertEquals("eine Milliarde erster", fmt.format(1000000001), "1000000001")
        assertEquals("eine Milliarde zweiter", fmt.format(1000000002), "1000000002")
        assertEquals("zwei Milliardenster", fmt.format(2000000000), "2000000000")
        assertEquals("zwei Milliarden erster", fmt.format(2000000001), "2000000001")
        assertEquals("zwei Milliarden zweiter", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutOrdinalN() {
        val fmt = RBNFDe().spelloutOrdinalN
// nonsense assertEquals("minus ersten", fmt.format(-1), "-1")
// nonsense assertEquals("nullten", fmt.format(0), "0")
// nonsense assertEquals("0,2", fmt.format(0.2), "0.2")
// nonsense assertEquals("0,2", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0", fmt.format(0.02), "0.02")
// nonsense assertEquals("0", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4,8", fmt.format(4.751), "4.751")
// nonsense assertEquals("12,1", fmt.format(12.051), "12.051")
// nonsense assertEquals("13", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14", fmt.format(14.02251), "14.02251")
        assertEquals("ersten", fmt.format(1), "1")
        assertEquals("zweiten", fmt.format(2), "2")
        assertEquals("dritten", fmt.format(3), "3")
        assertEquals("vierten", fmt.format(4), "4")
        assertEquals("fünften", fmt.format(5), "5")
        assertEquals("sechsten", fmt.format(6), "6")
        assertEquals("siebten", fmt.format(7), "7")
        assertEquals("achten", fmt.format(8), "8")
        assertEquals("neunten", fmt.format(9), "9")
        assertEquals("zehnten", fmt.format(10), "10")
        assertEquals("elften", fmt.format(11), "11")
        assertEquals("zwölften", fmt.format(12), "12")
        assertEquals("dreizehnten", fmt.format(13), "13")
        assertEquals("vierzehnten", fmt.format(14), "14")
        assertEquals("fünfzehnten", fmt.format(15), "15")
        assertEquals("sechzehnten", fmt.format(16), "16")
        assertEquals("siebzehnten", fmt.format(17), "17")
        assertEquals("achtzehnten", fmt.format(18), "18")
        assertEquals("neunzehnten", fmt.format(19), "19")
        assertEquals("zwanzigsten", fmt.format(20), "20")
        assertEquals("ein­und­zwanzigsten", fmt.format(21), "21")
        assertEquals("zwei­und­zwanzigsten", fmt.format(22), "22")
        assertEquals("drei­und­zwanzigsten", fmt.format(23), "23")
        assertEquals("vier­und­zwanzigsten", fmt.format(24), "24")
        assertEquals("fünf­und­zwanzigsten", fmt.format(25), "25")
        assertEquals("sechs­und­zwanzigsten", fmt.format(26), "26")
        assertEquals("sieben­und­zwanzigsten", fmt.format(27), "27")
        assertEquals("acht­und­zwanzigsten", fmt.format(28), "28")
        assertEquals("neun­und­zwanzigsten", fmt.format(29), "29")
        assertEquals("dreißigsten", fmt.format(30), "30")
        assertEquals("ein­und­dreißigsten", fmt.format(31), "31")
        assertEquals("acht­und­neunzigsten", fmt.format(98), "98")
        assertEquals("neun­und­neunzigsten", fmt.format(99), "99")
        assertEquals("ein­hundertsten", fmt.format(100), "100")
        assertEquals("ein­hundert­ersten", fmt.format(101), "101")
        assertEquals("ein­hundert­zweiten", fmt.format(102), "102")
        assertEquals("neun­hundert­acht­und­neunzigsten", fmt.format(998), "998")
        assertEquals("neun­hundert­neun­und­neunzigsten", fmt.format(999), "999")
        assertEquals("ein­tausendsten", fmt.format(1000), "1000")
        assertEquals("ein­tausend­ersten", fmt.format(1001), "1001")
        assertEquals("ein­tausend­zweiten", fmt.format(1002), "1002")
        assertEquals("ein­tausend­neun­hundert­acht­und­neunzigsten", fmt.format(1998), "1998")
        assertEquals("ein­tausend­neun­hundert­neun­und­neunzigsten", fmt.format(1999), "1999")
        assertEquals("zwei­tausendsten", fmt.format(2000), "2000")
        assertEquals("zwei­tausend­ersten", fmt.format(2001), "2001")
        assertEquals("zwei­tausend­zweiten", fmt.format(2002), "2002")
        assertEquals("neun­tausend­neun­hundert­acht­und­neunzigsten", fmt.format(9998), "9998")
        assertEquals("neun­tausend­neun­hundert­neun­und­neunzigsten", fmt.format(9999), "9999")
        assertEquals("zehn­tausendsten", fmt.format(10000), "10000")
        assertEquals("zehn­tausend­ersten", fmt.format(10001), "10001")
        assertEquals("zehn­tausend­zweiten", fmt.format(10002), "10002")
        assertEquals("ein­hundert­tausendsten", fmt.format(100000), "100000")
        assertEquals("ein­hundert­tausend­ersten", fmt.format(100001), "100001")
        assertEquals("ein­hundert­tausend­zweiten", fmt.format(100002), "100002")
        assertEquals("zwei­hundert­tausendsten", fmt.format(200000), "200000")
        assertEquals("zwei­hundert­tausend­ersten", fmt.format(200001), "200001")
        assertEquals("zwei­hundert­tausend­zweiten", fmt.format(200002), "200002")
        assertEquals("eine Millionsten", fmt.format(1000000), "1000000")
        assertEquals("eine Million ersten", fmt.format(1000001), "1000001")
        assertEquals("eine Million zweiten", fmt.format(1000002), "1000002")
        assertEquals("zwei Millionensten", fmt.format(2000000), "2000000")
        assertEquals("zwei Millionen ersten", fmt.format(2000001), "2000001")
        assertEquals("zwei Millionen zweiten", fmt.format(2000002), "2000002")
        assertEquals("zehn Millionensten", fmt.format(10000000), "10000000")
        assertEquals("zehn Millionen ersten", fmt.format(10000001), "10000001")
        assertEquals("zehn Millionen zweiten", fmt.format(10000002), "10000002")
        assertEquals("zwanzig Millionensten", fmt.format(20000000), "20000000")
        assertEquals("zwanzig Millionen ersten", fmt.format(20000001), "20000001")
        assertEquals("zwanzig Millionen zweiten", fmt.format(20000002), "20000002")
        assertEquals("ein­hundert Millionensten", fmt.format(100000000), "100000000")
        assertEquals("ein­hundert Millionen ersten", fmt.format(100000001), "100000001")
        assertEquals("ein­hundert Millionen zweiten", fmt.format(100000002), "100000002")
        assertEquals("zwei­hundert Millionensten", fmt.format(200000000), "200000000")
        assertEquals("zwei­hundert Millionen ersten", fmt.format(200000001), "200000001")
        assertEquals("zwei­hundert Millionen zweiten", fmt.format(200000002), "200000002")
        assertEquals("eine Milliardesten", fmt.format(1000000000), "1000000000")
        assertEquals("eine Milliarde ersten", fmt.format(1000000001), "1000000001")
        assertEquals("eine Milliarde zweiten", fmt.format(1000000002), "1000000002")
        assertEquals("zwei Milliardensten", fmt.format(2000000000), "2000000000")
        assertEquals("zwei Milliarden ersten", fmt.format(2000000001), "2000000001")
        assertEquals("zwei Milliarden zweiten", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutOrdinal() {
        val fmt = RBNFDe().spelloutOrdinal
// nonsense assertEquals("minus erste", fmt.format(-1), "-1")
// nonsense assertEquals("nullte", fmt.format(0), "0")
// nonsense assertEquals("0,2", fmt.format(0.2), "0.2")
// nonsense assertEquals("0,2", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0", fmt.format(0.02), "0.02")
// nonsense assertEquals("0", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4,8", fmt.format(4.751), "4.751")
// nonsense assertEquals("12,1", fmt.format(12.051), "12.051")
// nonsense assertEquals("13", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14", fmt.format(14.02251), "14.02251")
        assertEquals("erste", fmt.format(1), "1")
        assertEquals("zweite", fmt.format(2), "2")
        assertEquals("dritte", fmt.format(3), "3")
        assertEquals("vierte", fmt.format(4), "4")
        assertEquals("fünfte", fmt.format(5), "5")
        assertEquals("sechste", fmt.format(6), "6")
        assertEquals("siebte", fmt.format(7), "7")
        assertEquals("achte", fmt.format(8), "8")
        assertEquals("neunte", fmt.format(9), "9")
        assertEquals("zehnte", fmt.format(10), "10")
        assertEquals("elfte", fmt.format(11), "11")
        assertEquals("zwölfte", fmt.format(12), "12")
        assertEquals("dreizehnte", fmt.format(13), "13")
        assertEquals("vierzehnte", fmt.format(14), "14")
        assertEquals("fünfzehnte", fmt.format(15), "15")
        assertEquals("sechzehnte", fmt.format(16), "16")
        assertEquals("siebzehnte", fmt.format(17), "17")
        assertEquals("achtzehnte", fmt.format(18), "18")
        assertEquals("neunzehnte", fmt.format(19), "19")
        assertEquals("zwanzigste", fmt.format(20), "20")
        assertEquals("ein­und­zwanzigste", fmt.format(21), "21")
        assertEquals("zwei­und­zwanzigste", fmt.format(22), "22")
        assertEquals("drei­und­zwanzigste", fmt.format(23), "23")
        assertEquals("vier­und­zwanzigste", fmt.format(24), "24")
        assertEquals("fünf­und­zwanzigste", fmt.format(25), "25")
        assertEquals("sechs­und­zwanzigste", fmt.format(26), "26")
        assertEquals("sieben­und­zwanzigste", fmt.format(27), "27")
        assertEquals("acht­und­zwanzigste", fmt.format(28), "28")
        assertEquals("neun­und­zwanzigste", fmt.format(29), "29")
        assertEquals("dreißigste", fmt.format(30), "30")
        assertEquals("ein­und­dreißigste", fmt.format(31), "31")
        assertEquals("acht­und­neunzigste", fmt.format(98), "98")
        assertEquals("neun­und­neunzigste", fmt.format(99), "99")
        assertEquals("ein­hundertste", fmt.format(100), "100")
        assertEquals("ein­hundert­erste", fmt.format(101), "101")
        assertEquals("ein­hundert­zweite", fmt.format(102), "102")
        assertEquals("neun­hundert­acht­und­neunzigste", fmt.format(998), "998")
        assertEquals("neun­hundert­neun­und­neunzigste", fmt.format(999), "999")
        assertEquals("ein­tausendste", fmt.format(1000), "1000")
        assertEquals("ein­tausend­erste", fmt.format(1001), "1001")
        assertEquals("ein­tausend­zweite", fmt.format(1002), "1002")
        assertEquals("ein­tausend­neun­hundert­acht­und­neunzigste", fmt.format(1998), "1998")
        assertEquals("ein­tausend­neun­hundert­neun­und­neunzigste", fmt.format(1999), "1999")
        assertEquals("zwei­tausendste", fmt.format(2000), "2000")
        assertEquals("zwei­tausend­erste", fmt.format(2001), "2001")
        assertEquals("zwei­tausend­zweite", fmt.format(2002), "2002")
        assertEquals("neun­tausend­neun­hundert­acht­und­neunzigste", fmt.format(9998), "9998")
        assertEquals("neun­tausend­neun­hundert­neun­und­neunzigste", fmt.format(9999), "9999")
        assertEquals("zehn­tausendste", fmt.format(10000), "10000")
        assertEquals("zehn­tausend­erste", fmt.format(10001), "10001")
        assertEquals("zehn­tausend­zweite", fmt.format(10002), "10002")
        assertEquals("ein­hundert­tausendste", fmt.format(100000), "100000")
        assertEquals("ein­hundert­tausend­erste", fmt.format(100001), "100001")
        assertEquals("ein­hundert­tausend­zweite", fmt.format(100002), "100002")
        assertEquals("zwei­hundert­tausendste", fmt.format(200000), "200000")
        assertEquals("zwei­hundert­tausend­erste", fmt.format(200001), "200001")
        assertEquals("zwei­hundert­tausend­zweite", fmt.format(200002), "200002")
        assertEquals("eine Millionste", fmt.format(1000000), "1000000")
        assertEquals("eine Million erste", fmt.format(1000001), "1000001")
        assertEquals("eine Million zweite", fmt.format(1000002), "1000002")
        assertEquals("zwei Millionenste", fmt.format(2000000), "2000000")
        assertEquals("zwei Millionen erste", fmt.format(2000001), "2000001")
        assertEquals("zwei Millionen zweite", fmt.format(2000002), "2000002")
        assertEquals("zehn Millionenste", fmt.format(10000000), "10000000")
        assertEquals("zehn Millionen erste", fmt.format(10000001), "10000001")
        assertEquals("zehn Millionen zweite", fmt.format(10000002), "10000002")
        assertEquals("zwanzig Millionenste", fmt.format(20000000), "20000000")
        assertEquals("zwanzig Millionen erste", fmt.format(20000001), "20000001")
        assertEquals("zwanzig Millionen zweite", fmt.format(20000002), "20000002")
        assertEquals("ein­hundert Millionenste", fmt.format(100000000), "100000000")
        assertEquals("ein­hundert Millionen erste", fmt.format(100000001), "100000001")
        assertEquals("ein­hundert Millionen zweite", fmt.format(100000002), "100000002")
        assertEquals("zwei­hundert Millionenste", fmt.format(200000000), "200000000")
        assertEquals("zwei­hundert Millionen erste", fmt.format(200000001), "200000001")
        assertEquals("zwei­hundert Millionen zweite", fmt.format(200000002), "200000002")
        assertEquals("eine Milliardeste", fmt.format(1000000000), "1000000000")
        assertEquals("eine Milliarde erste", fmt.format(1000000001), "1000000001")
        assertEquals("eine Milliarde zweite", fmt.format(1000000002), "1000000002")
        assertEquals("zwei Milliardenste", fmt.format(2000000000), "2000000000")
        assertEquals("zwei Milliarden erste", fmt.format(2000000001), "2000000001")
        assertEquals("zwei Milliarden zweite", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalM() {
        val fmt = RBNFDe().spelloutCardinalM
        assertEquals("minus einem", fmt.format(-1), "-1")
        assertEquals("null", fmt.format(0), "0")
        assertEquals("null Komma zwei", fmt.format(0.2), "0.2")
        assertEquals("null Komma zwei drei vier fünf", fmt.format(0.2345), "0.2345")
        assertEquals("null Komma null zwei", fmt.format(0.02), "0.02")
        assertEquals("null Komma null zwei einem drei", fmt.format(0.0213), "0.0213")
        assertEquals("vier Komma sieben fünf einem", fmt.format(4.751), "4.751")
        assertEquals("zwölf Komma null fünf einem", fmt.format(12.051), "12.051")
        assertEquals("dreizehn Komma null zwei fünf einem", fmt.format(13.0251), "13.0251")
        assertEquals("vierzehn Komma null zwei zwei fünf einem", fmt.format(14.02251), "14.02251")
        assertEquals("einem", fmt.format(1), "1")
        assertEquals("zwei", fmt.format(2), "2")
        assertEquals("drei", fmt.format(3), "3")
        assertEquals("vier", fmt.format(4), "4")
        assertEquals("fünf", fmt.format(5), "5")
        assertEquals("sechs", fmt.format(6), "6")
        assertEquals("sieben", fmt.format(7), "7")
        assertEquals("acht", fmt.format(8), "8")
        assertEquals("neun", fmt.format(9), "9")
        assertEquals("zehn", fmt.format(10), "10")
        assertEquals("elf", fmt.format(11), "11")
        assertEquals("zwölf", fmt.format(12), "12")
        assertEquals("dreizehn", fmt.format(13), "13")
        assertEquals("vierzehn", fmt.format(14), "14")
        assertEquals("fünfzehn", fmt.format(15), "15")
        assertEquals("sechzehn", fmt.format(16), "16")
        assertEquals("siebzehn", fmt.format(17), "17")
        assertEquals("achtzehn", fmt.format(18), "18")
        assertEquals("neunzehn", fmt.format(19), "19")
        assertEquals("zwanzig", fmt.format(20), "20")
        assertEquals("ein­und­zwanzig", fmt.format(21), "21")
        assertEquals("zwei­und­zwanzig", fmt.format(22), "22")
        assertEquals("drei­und­zwanzig", fmt.format(23), "23")
        assertEquals("vier­und­zwanzig", fmt.format(24), "24")
        assertEquals("fünf­und­zwanzig", fmt.format(25), "25")
        assertEquals("sechs­und­zwanzig", fmt.format(26), "26")
        assertEquals("sieben­und­zwanzig", fmt.format(27), "27")
        assertEquals("acht­und­zwanzig", fmt.format(28), "28")
        assertEquals("neun­und­zwanzig", fmt.format(29), "29")
        assertEquals("dreißig", fmt.format(30), "30")
        assertEquals("ein­und­dreißig", fmt.format(31), "31")
        assertEquals("acht­und­neunzig", fmt.format(98), "98")
        assertEquals("neun­und­neunzig", fmt.format(99), "99")
        assertEquals("ein­hundert", fmt.format(100), "100")
        assertEquals("ein­hundert­einem", fmt.format(101), "101")
        assertEquals("ein­hundert­zwei", fmt.format(102), "102")
        assertEquals("neun­hundert­acht­und­neunzig", fmt.format(998), "998")
        assertEquals("neun­hundert­neun­und­neunzig", fmt.format(999), "999")
        assertEquals("ein­tausend", fmt.format(1000), "1000")
        assertEquals("ein­tausend­einem", fmt.format(1001), "1001")
        assertEquals("ein­tausend­zwei", fmt.format(1002), "1002")
        assertEquals("ein­tausend­neun­hundert­acht­und­neunzig", fmt.format(1998), "1998")
        assertEquals("ein­tausend­neun­hundert­neun­und­neunzig", fmt.format(1999), "1999")
        assertEquals("zwei­tausend", fmt.format(2000), "2000")
        assertEquals("zwei­tausend­einem", fmt.format(2001), "2001")
        assertEquals("zwei­tausend­zwei", fmt.format(2002), "2002")
        assertEquals("neun­tausend­neun­hundert­acht­und­neunzig", fmt.format(9998), "9998")
        assertEquals("neun­tausend­neun­hundert­neun­und­neunzig", fmt.format(9999), "9999")
        assertEquals("zehn­tausend", fmt.format(10000), "10000")
        assertEquals("zehn­tausend­einem", fmt.format(10001), "10001")
        assertEquals("zehn­tausend­zwei", fmt.format(10002), "10002")
        assertEquals("ein­hundert­tausend", fmt.format(100000), "100000")
        assertEquals("ein­hundert­tausend­einem", fmt.format(100001), "100001")
        assertEquals("ein­hundert­tausend­zwei", fmt.format(100002), "100002")
        assertEquals("zwei­hundert­tausend", fmt.format(200000), "200000")
        assertEquals("zwei­hundert­tausend­einem", fmt.format(200001), "200001")
        assertEquals("zwei­hundert­tausend­zwei", fmt.format(200002), "200002")
        assertEquals("eine Million", fmt.format(1000000), "1000000")
        assertEquals("eine Million einem", fmt.format(1000001), "1000001")
        assertEquals("eine Million zwei", fmt.format(1000002), "1000002")
        assertEquals("zwei Millionen", fmt.format(2000000), "2000000")
        assertEquals("zwei Millionen einem", fmt.format(2000001), "2000001")
        assertEquals("zwei Millionen zwei", fmt.format(2000002), "2000002")
        assertEquals("zehn Millionen", fmt.format(10000000), "10000000")
        assertEquals("zehn Millionen einem", fmt.format(10000001), "10000001")
        assertEquals("zehn Millionen zwei", fmt.format(10000002), "10000002")
        assertEquals("zwanzig Millionen", fmt.format(20000000), "20000000")
        assertEquals("zwanzig Millionen einem", fmt.format(20000001), "20000001")
        assertEquals("zwanzig Millionen zwei", fmt.format(20000002), "20000002")
        assertEquals("ein­hundert Millionen", fmt.format(100000000), "100000000")
        assertEquals("ein­hundert Millionen einem", fmt.format(100000001), "100000001")
        assertEquals("ein­hundert Millionen zwei", fmt.format(100000002), "100000002")
        assertEquals("zwei­hundert Millionen", fmt.format(200000000), "200000000")
        assertEquals("zwei­hundert Millionen einem", fmt.format(200000001), "200000001")
        assertEquals("zwei­hundert Millionen zwei", fmt.format(200000002), "200000002")
        assertEquals("eine Milliarde", fmt.format(1000000000), "1000000000")
        assertEquals("eine Milliarde einem", fmt.format(1000000001), "1000000001")
        assertEquals("eine Milliarde zwei", fmt.format(1000000002), "1000000002")
        assertEquals("zwei Milliarden", fmt.format(2000000000), "2000000000")
        assertEquals("zwei Milliarden einem", fmt.format(2000000001), "2000000001")
        assertEquals("zwei Milliarden zwei", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalS() {
        val fmt = RBNFDe().spelloutCardinalS
        assertEquals("minus eines", fmt.format(-1), "-1")
        assertEquals("null", fmt.format(0), "0")
        assertEquals("null Komma zwei", fmt.format(0.2), "0.2")
        assertEquals("null Komma zwei drei vier fünf", fmt.format(0.2345), "0.2345")
        assertEquals("null Komma null zwei", fmt.format(0.02), "0.02")
        assertEquals("null Komma null zwei eines drei", fmt.format(0.0213), "0.0213")
        assertEquals("vier Komma sieben fünf eines", fmt.format(4.751), "4.751")
        assertEquals("zwölf Komma null fünf eines", fmt.format(12.051), "12.051")
        assertEquals("dreizehn Komma null zwei fünf eines", fmt.format(13.0251), "13.0251")
        assertEquals("vierzehn Komma null zwei zwei fünf eines", fmt.format(14.02251), "14.02251")
        assertEquals("eines", fmt.format(1), "1")
        assertEquals("zwei", fmt.format(2), "2")
        assertEquals("drei", fmt.format(3), "3")
        assertEquals("vier", fmt.format(4), "4")
        assertEquals("fünf", fmt.format(5), "5")
        assertEquals("sechs", fmt.format(6), "6")
        assertEquals("sieben", fmt.format(7), "7")
        assertEquals("acht", fmt.format(8), "8")
        assertEquals("neun", fmt.format(9), "9")
        assertEquals("zehn", fmt.format(10), "10")
        assertEquals("elf", fmt.format(11), "11")
        assertEquals("zwölf", fmt.format(12), "12")
        assertEquals("dreizehn", fmt.format(13), "13")
        assertEquals("vierzehn", fmt.format(14), "14")
        assertEquals("fünfzehn", fmt.format(15), "15")
        assertEquals("sechzehn", fmt.format(16), "16")
        assertEquals("siebzehn", fmt.format(17), "17")
        assertEquals("achtzehn", fmt.format(18), "18")
        assertEquals("neunzehn", fmt.format(19), "19")
        assertEquals("zwanzig", fmt.format(20), "20")
        assertEquals("ein­und­zwanzig", fmt.format(21), "21")
        assertEquals("zwei­und­zwanzig", fmt.format(22), "22")
        assertEquals("drei­und­zwanzig", fmt.format(23), "23")
        assertEquals("vier­und­zwanzig", fmt.format(24), "24")
        assertEquals("fünf­und­zwanzig", fmt.format(25), "25")
        assertEquals("sechs­und­zwanzig", fmt.format(26), "26")
        assertEquals("sieben­und­zwanzig", fmt.format(27), "27")
        assertEquals("acht­und­zwanzig", fmt.format(28), "28")
        assertEquals("neun­und­zwanzig", fmt.format(29), "29")
        assertEquals("dreißig", fmt.format(30), "30")
        assertEquals("ein­und­dreißig", fmt.format(31), "31")
        assertEquals("acht­und­neunzig", fmt.format(98), "98")
        assertEquals("neun­und­neunzig", fmt.format(99), "99")
        assertEquals("ein­hundert", fmt.format(100), "100")
        assertEquals("ein­hundert­eines", fmt.format(101), "101")
        assertEquals("ein­hundert­zwei", fmt.format(102), "102")
        assertEquals("neun­hundert­acht­und­neunzig", fmt.format(998), "998")
        assertEquals("neun­hundert­neun­und­neunzig", fmt.format(999), "999")
        assertEquals("ein­tausend", fmt.format(1000), "1000")
        assertEquals("ein­tausend­eines", fmt.format(1001), "1001")
        assertEquals("ein­tausend­zwei", fmt.format(1002), "1002")
        assertEquals("ein­tausend­neun­hundert­acht­und­neunzig", fmt.format(1998), "1998")
        assertEquals("ein­tausend­neun­hundert­neun­und­neunzig", fmt.format(1999), "1999")
        assertEquals("zwei­tausend", fmt.format(2000), "2000")
        assertEquals("zwei­tausend­eines", fmt.format(2001), "2001")
        assertEquals("zwei­tausend­zwei", fmt.format(2002), "2002")
        assertEquals("neun­tausend­neun­hundert­acht­und­neunzig", fmt.format(9998), "9998")
        assertEquals("neun­tausend­neun­hundert­neun­und­neunzig", fmt.format(9999), "9999")
        assertEquals("zehn­tausend", fmt.format(10000), "10000")
        assertEquals("zehn­tausend­eines", fmt.format(10001), "10001")
        assertEquals("zehn­tausend­zwei", fmt.format(10002), "10002")
        assertEquals("ein­hundert­tausend", fmt.format(100000), "100000")
        assertEquals("ein­hundert­tausend­eines", fmt.format(100001), "100001")
        assertEquals("ein­hundert­tausend­zwei", fmt.format(100002), "100002")
        assertEquals("zwei­hundert­tausend", fmt.format(200000), "200000")
        assertEquals("zwei­hundert­tausend­eines", fmt.format(200001), "200001")
        assertEquals("zwei­hundert­tausend­zwei", fmt.format(200002), "200002")
        assertEquals("eine Million", fmt.format(1000000), "1000000")
        assertEquals("eine Million eines", fmt.format(1000001), "1000001")
        assertEquals("eine Million zwei", fmt.format(1000002), "1000002")
        assertEquals("zwei Millionen", fmt.format(2000000), "2000000")
        assertEquals("zwei Millionen eines", fmt.format(2000001), "2000001")
        assertEquals("zwei Millionen zwei", fmt.format(2000002), "2000002")
        assertEquals("zehn Millionen", fmt.format(10000000), "10000000")
        assertEquals("zehn Millionen eines", fmt.format(10000001), "10000001")
        assertEquals("zehn Millionen zwei", fmt.format(10000002), "10000002")
        assertEquals("zwanzig Millionen", fmt.format(20000000), "20000000")
        assertEquals("zwanzig Millionen eines", fmt.format(20000001), "20000001")
        assertEquals("zwanzig Millionen zwei", fmt.format(20000002), "20000002")
        assertEquals("ein­hundert Millionen", fmt.format(100000000), "100000000")
        assertEquals("ein­hundert Millionen eines", fmt.format(100000001), "100000001")
        assertEquals("ein­hundert Millionen zwei", fmt.format(100000002), "100000002")
        assertEquals("zwei­hundert Millionen", fmt.format(200000000), "200000000")
        assertEquals("zwei­hundert Millionen eines", fmt.format(200000001), "200000001")
        assertEquals("zwei­hundert Millionen zwei", fmt.format(200000002), "200000002")
        assertEquals("eine Milliarde", fmt.format(1000000000), "1000000000")
        assertEquals("eine Milliarde eines", fmt.format(1000000001), "1000000001")
        assertEquals("eine Milliarde zwei", fmt.format(1000000002), "1000000002")
        assertEquals("zwei Milliarden", fmt.format(2000000000), "2000000000")
        assertEquals("zwei Milliarden eines", fmt.format(2000000001), "2000000001")
        assertEquals("zwei Milliarden zwei", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalR() {
        val fmt = RBNFDe().spelloutCardinalR
        assertEquals("minus einer", fmt.format(-1), "-1")
        assertEquals("null", fmt.format(0), "0")
        assertEquals("null Komma zwei", fmt.format(0.2), "0.2")
        assertEquals("null Komma zwei drei vier fünf", fmt.format(0.2345), "0.2345")
        assertEquals("null Komma null zwei", fmt.format(0.02), "0.02")
        assertEquals("null Komma null zwei einer drei", fmt.format(0.0213), "0.0213")
        assertEquals("vier Komma sieben fünf einer", fmt.format(4.751), "4.751")
        assertEquals("zwölf Komma null fünf einer", fmt.format(12.051), "12.051")
        assertEquals("dreizehn Komma null zwei fünf einer", fmt.format(13.0251), "13.0251")
        assertEquals("vierzehn Komma null zwei zwei fünf einer", fmt.format(14.02251), "14.02251")
        assertEquals("einer", fmt.format(1), "1")
        assertEquals("zwei", fmt.format(2), "2")
        assertEquals("drei", fmt.format(3), "3")
        assertEquals("vier", fmt.format(4), "4")
        assertEquals("fünf", fmt.format(5), "5")
        assertEquals("sechs", fmt.format(6), "6")
        assertEquals("sieben", fmt.format(7), "7")
        assertEquals("acht", fmt.format(8), "8")
        assertEquals("neun", fmt.format(9), "9")
        assertEquals("zehn", fmt.format(10), "10")
        assertEquals("elf", fmt.format(11), "11")
        assertEquals("zwölf", fmt.format(12), "12")
        assertEquals("dreizehn", fmt.format(13), "13")
        assertEquals("vierzehn", fmt.format(14), "14")
        assertEquals("fünfzehn", fmt.format(15), "15")
        assertEquals("sechzehn", fmt.format(16), "16")
        assertEquals("siebzehn", fmt.format(17), "17")
        assertEquals("achtzehn", fmt.format(18), "18")
        assertEquals("neunzehn", fmt.format(19), "19")
        assertEquals("zwanzig", fmt.format(20), "20")
        assertEquals("ein­und­zwanzig", fmt.format(21), "21")
        assertEquals("zwei­und­zwanzig", fmt.format(22), "22")
        assertEquals("drei­und­zwanzig", fmt.format(23), "23")
        assertEquals("vier­und­zwanzig", fmt.format(24), "24")
        assertEquals("fünf­und­zwanzig", fmt.format(25), "25")
        assertEquals("sechs­und­zwanzig", fmt.format(26), "26")
        assertEquals("sieben­und­zwanzig", fmt.format(27), "27")
        assertEquals("acht­und­zwanzig", fmt.format(28), "28")
        assertEquals("neun­und­zwanzig", fmt.format(29), "29")
        assertEquals("dreißig", fmt.format(30), "30")
        assertEquals("ein­und­dreißig", fmt.format(31), "31")
        assertEquals("acht­und­neunzig", fmt.format(98), "98")
        assertEquals("neun­und­neunzig", fmt.format(99), "99")
        assertEquals("ein­hundert", fmt.format(100), "100")
        assertEquals("ein­hundert­einer", fmt.format(101), "101")
        assertEquals("ein­hundert­zwei", fmt.format(102), "102")
        assertEquals("neun­hundert­acht­und­neunzig", fmt.format(998), "998")
        assertEquals("neun­hundert­neun­und­neunzig", fmt.format(999), "999")
        assertEquals("ein­tausend", fmt.format(1000), "1000")
        assertEquals("ein­tausend­einer", fmt.format(1001), "1001")
        assertEquals("ein­tausend­zwei", fmt.format(1002), "1002")
        assertEquals("ein­tausend­neun­hundert­acht­und­neunzig", fmt.format(1998), "1998")
        assertEquals("ein­tausend­neun­hundert­neun­und­neunzig", fmt.format(1999), "1999")
        assertEquals("zwei­tausend", fmt.format(2000), "2000")
        assertEquals("zwei­tausend­einer", fmt.format(2001), "2001")
        assertEquals("zwei­tausend­zwei", fmt.format(2002), "2002")
        assertEquals("neun­tausend­neun­hundert­acht­und­neunzig", fmt.format(9998), "9998")
        assertEquals("neun­tausend­neun­hundert­neun­und­neunzig", fmt.format(9999), "9999")
        assertEquals("zehn­tausend", fmt.format(10000), "10000")
        assertEquals("zehn­tausend­einer", fmt.format(10001), "10001")
        assertEquals("zehn­tausend­zwei", fmt.format(10002), "10002")
        assertEquals("ein­hundert­tausend", fmt.format(100000), "100000")
        assertEquals("ein­hundert­tausend­einer", fmt.format(100001), "100001")
        assertEquals("ein­hundert­tausend­zwei", fmt.format(100002), "100002")
        assertEquals("zwei­hundert­tausend", fmt.format(200000), "200000")
        assertEquals("zwei­hundert­tausend­einer", fmt.format(200001), "200001")
        assertEquals("zwei­hundert­tausend­zwei", fmt.format(200002), "200002")
        assertEquals("eine Million", fmt.format(1000000), "1000000")
        assertEquals("eine Million einer", fmt.format(1000001), "1000001")
        assertEquals("eine Million zwei", fmt.format(1000002), "1000002")
        assertEquals("zwei Millionen", fmt.format(2000000), "2000000")
        assertEquals("zwei Millionen einer", fmt.format(2000001), "2000001")
        assertEquals("zwei Millionen zwei", fmt.format(2000002), "2000002")
        assertEquals("zehn Millionen", fmt.format(10000000), "10000000")
        assertEquals("zehn Millionen einer", fmt.format(10000001), "10000001")
        assertEquals("zehn Millionen zwei", fmt.format(10000002), "10000002")
        assertEquals("zwanzig Millionen", fmt.format(20000000), "20000000")
        assertEquals("zwanzig Millionen einer", fmt.format(20000001), "20000001")
        assertEquals("zwanzig Millionen zwei", fmt.format(20000002), "20000002")
        assertEquals("ein­hundert Millionen", fmt.format(100000000), "100000000")
        assertEquals("ein­hundert Millionen einer", fmt.format(100000001), "100000001")
        assertEquals("ein­hundert Millionen zwei", fmt.format(100000002), "100000002")
        assertEquals("zwei­hundert Millionen", fmt.format(200000000), "200000000")
        assertEquals("zwei­hundert Millionen einer", fmt.format(200000001), "200000001")
        assertEquals("zwei­hundert Millionen zwei", fmt.format(200000002), "200000002")
        assertEquals("eine Milliarde", fmt.format(1000000000), "1000000000")
        assertEquals("eine Milliarde einer", fmt.format(1000000001), "1000000001")
        assertEquals("eine Milliarde zwei", fmt.format(1000000002), "1000000002")
        assertEquals("zwei Milliarden", fmt.format(2000000000), "2000000000")
        assertEquals("zwei Milliarden einer", fmt.format(2000000001), "2000000001")
        assertEquals("zwei Milliarden zwei", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalN() {
        val fmt = RBNFDe().spelloutCardinalN
        assertEquals("minus einen", fmt.format(-1), "-1")
        assertEquals("null", fmt.format(0), "0")
        assertEquals("null Komma zwei", fmt.format(0.2), "0.2")
        assertEquals("null Komma zwei drei vier fünf", fmt.format(0.2345), "0.2345")
        assertEquals("null Komma null zwei", fmt.format(0.02), "0.02")
        assertEquals("null Komma null zwei einen drei", fmt.format(0.0213), "0.0213")
        assertEquals("vier Komma sieben fünf einen", fmt.format(4.751), "4.751")
        assertEquals("zwölf Komma null fünf einen", fmt.format(12.051), "12.051")
        assertEquals("dreizehn Komma null zwei fünf einen", fmt.format(13.0251), "13.0251")
        assertEquals("vierzehn Komma null zwei zwei fünf einen", fmt.format(14.02251), "14.02251")
        assertEquals("einen", fmt.format(1), "1")
        assertEquals("zwei", fmt.format(2), "2")
        assertEquals("drei", fmt.format(3), "3")
        assertEquals("vier", fmt.format(4), "4")
        assertEquals("fünf", fmt.format(5), "5")
        assertEquals("sechs", fmt.format(6), "6")
        assertEquals("sieben", fmt.format(7), "7")
        assertEquals("acht", fmt.format(8), "8")
        assertEquals("neun", fmt.format(9), "9")
        assertEquals("zehn", fmt.format(10), "10")
        assertEquals("elf", fmt.format(11), "11")
        assertEquals("zwölf", fmt.format(12), "12")
        assertEquals("dreizehn", fmt.format(13), "13")
        assertEquals("vierzehn", fmt.format(14), "14")
        assertEquals("fünfzehn", fmt.format(15), "15")
        assertEquals("sechzehn", fmt.format(16), "16")
        assertEquals("siebzehn", fmt.format(17), "17")
        assertEquals("achtzehn", fmt.format(18), "18")
        assertEquals("neunzehn", fmt.format(19), "19")
        assertEquals("zwanzig", fmt.format(20), "20")
        assertEquals("ein­und­zwanzig", fmt.format(21), "21")
        assertEquals("zwei­und­zwanzig", fmt.format(22), "22")
        assertEquals("drei­und­zwanzig", fmt.format(23), "23")
        assertEquals("vier­und­zwanzig", fmt.format(24), "24")
        assertEquals("fünf­und­zwanzig", fmt.format(25), "25")
        assertEquals("sechs­und­zwanzig", fmt.format(26), "26")
        assertEquals("sieben­und­zwanzig", fmt.format(27), "27")
        assertEquals("acht­und­zwanzig", fmt.format(28), "28")
        assertEquals("neun­und­zwanzig", fmt.format(29), "29")
        assertEquals("dreißig", fmt.format(30), "30")
        assertEquals("ein­und­dreißig", fmt.format(31), "31")
        assertEquals("acht­und­neunzig", fmt.format(98), "98")
        assertEquals("neun­und­neunzig", fmt.format(99), "99")
        assertEquals("ein­hundert", fmt.format(100), "100")
        assertEquals("ein­hundert­einen", fmt.format(101), "101")
        assertEquals("ein­hundert­zwei", fmt.format(102), "102")
        assertEquals("neun­hundert­acht­und­neunzig", fmt.format(998), "998")
        assertEquals("neun­hundert­neun­und­neunzig", fmt.format(999), "999")
        assertEquals("ein­tausend", fmt.format(1000), "1000")
        assertEquals("ein­tausend­einen", fmt.format(1001), "1001")
        assertEquals("ein­tausend­zwei", fmt.format(1002), "1002")
        assertEquals("ein­tausend­neun­hundert­acht­und­neunzig", fmt.format(1998), "1998")
        assertEquals("ein­tausend­neun­hundert­neun­und­neunzig", fmt.format(1999), "1999")
        assertEquals("zwei­tausend", fmt.format(2000), "2000")
        assertEquals("zwei­tausend­einen", fmt.format(2001), "2001")
        assertEquals("zwei­tausend­zwei", fmt.format(2002), "2002")
        assertEquals("neun­tausend­neun­hundert­acht­und­neunzig", fmt.format(9998), "9998")
        assertEquals("neun­tausend­neun­hundert­neun­und­neunzig", fmt.format(9999), "9999")
        assertEquals("zehn­tausend", fmt.format(10000), "10000")
        assertEquals("zehn­tausend­einen", fmt.format(10001), "10001")
        assertEquals("zehn­tausend­zwei", fmt.format(10002), "10002")
        assertEquals("ein­hundert­tausend", fmt.format(100000), "100000")
        assertEquals("ein­hundert­tausend­einen", fmt.format(100001), "100001")
        assertEquals("ein­hundert­tausend­zwei", fmt.format(100002), "100002")
        assertEquals("zwei­hundert­tausend", fmt.format(200000), "200000")
        assertEquals("zwei­hundert­tausend­einen", fmt.format(200001), "200001")
        assertEquals("zwei­hundert­tausend­zwei", fmt.format(200002), "200002")
        assertEquals("eine Million", fmt.format(1000000), "1000000")
        assertEquals("eine Million einen", fmt.format(1000001), "1000001")
        assertEquals("eine Million zwei", fmt.format(1000002), "1000002")
        assertEquals("zwei Millionen", fmt.format(2000000), "2000000")
        assertEquals("zwei Millionen einen", fmt.format(2000001), "2000001")
        assertEquals("zwei Millionen zwei", fmt.format(2000002), "2000002")
        assertEquals("zehn Millionen", fmt.format(10000000), "10000000")
        assertEquals("zehn Millionen einen", fmt.format(10000001), "10000001")
        assertEquals("zehn Millionen zwei", fmt.format(10000002), "10000002")
        assertEquals("zwanzig Millionen", fmt.format(20000000), "20000000")
        assertEquals("zwanzig Millionen einen", fmt.format(20000001), "20000001")
        assertEquals("zwanzig Millionen zwei", fmt.format(20000002), "20000002")
        assertEquals("ein­hundert Millionen", fmt.format(100000000), "100000000")
        assertEquals("ein­hundert Millionen einen", fmt.format(100000001), "100000001")
        assertEquals("ein­hundert Millionen zwei", fmt.format(100000002), "100000002")
        assertEquals("zwei­hundert Millionen", fmt.format(200000000), "200000000")
        assertEquals("zwei­hundert Millionen einen", fmt.format(200000001), "200000001")
        assertEquals("zwei­hundert Millionen zwei", fmt.format(200000002), "200000002")
        assertEquals("eine Milliarde", fmt.format(1000000000), "1000000000")
        assertEquals("eine Milliarde einen", fmt.format(1000000001), "1000000001")
        assertEquals("eine Milliarde zwei", fmt.format(1000000002), "1000000002")
        assertEquals("zwei Milliarden", fmt.format(2000000000), "2000000000")
        assertEquals("zwei Milliarden einen", fmt.format(2000000001), "2000000001")
        assertEquals("zwei Milliarden zwei", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalFeminine() {
        val fmt = RBNFDe().spelloutCardinalFeminine
        assertEquals("minus eine", fmt.format(-1), "-1")
        assertEquals("null", fmt.format(0), "0")
        assertEquals("null Komma zwei", fmt.format(0.2), "0.2")
        assertEquals("null Komma zwei drei vier fünf", fmt.format(0.2345), "0.2345")
        assertEquals("null Komma null zwei", fmt.format(0.02), "0.02")
        assertEquals("null Komma null zwei eine drei", fmt.format(0.0213), "0.0213")
        assertEquals("vier Komma sieben fünf eine", fmt.format(4.751), "4.751")
        assertEquals("zwölf Komma null fünf eine", fmt.format(12.051), "12.051")
        assertEquals("dreizehn Komma null zwei fünf eine", fmt.format(13.0251), "13.0251")
        assertEquals("vierzehn Komma null zwei zwei fünf eine", fmt.format(14.02251), "14.02251")
        assertEquals("eine", fmt.format(1), "1")
        assertEquals("zwei", fmt.format(2), "2")
        assertEquals("drei", fmt.format(3), "3")
        assertEquals("vier", fmt.format(4), "4")
        assertEquals("fünf", fmt.format(5), "5")
        assertEquals("sechs", fmt.format(6), "6")
        assertEquals("sieben", fmt.format(7), "7")
        assertEquals("acht", fmt.format(8), "8")
        assertEquals("neun", fmt.format(9), "9")
        assertEquals("zehn", fmt.format(10), "10")
        assertEquals("elf", fmt.format(11), "11")
        assertEquals("zwölf", fmt.format(12), "12")
        assertEquals("dreizehn", fmt.format(13), "13")
        assertEquals("vierzehn", fmt.format(14), "14")
        assertEquals("fünfzehn", fmt.format(15), "15")
        assertEquals("sechzehn", fmt.format(16), "16")
        assertEquals("siebzehn", fmt.format(17), "17")
        assertEquals("achtzehn", fmt.format(18), "18")
        assertEquals("neunzehn", fmt.format(19), "19")
        assertEquals("zwanzig", fmt.format(20), "20")
        assertEquals("ein­und­zwanzig", fmt.format(21), "21")
        assertEquals("zwei­und­zwanzig", fmt.format(22), "22")
        assertEquals("drei­und­zwanzig", fmt.format(23), "23")
        assertEquals("vier­und­zwanzig", fmt.format(24), "24")
        assertEquals("fünf­und­zwanzig", fmt.format(25), "25")
        assertEquals("sechs­und­zwanzig", fmt.format(26), "26")
        assertEquals("sieben­und­zwanzig", fmt.format(27), "27")
        assertEquals("acht­und­zwanzig", fmt.format(28), "28")
        assertEquals("neun­und­zwanzig", fmt.format(29), "29")
        assertEquals("dreißig", fmt.format(30), "30")
        assertEquals("ein­und­dreißig", fmt.format(31), "31")
        assertEquals("acht­und­neunzig", fmt.format(98), "98")
        assertEquals("neun­und­neunzig", fmt.format(99), "99")
        assertEquals("ein­hundert", fmt.format(100), "100")
        assertEquals("ein­hundert­eine", fmt.format(101), "101")
        assertEquals("ein­hundert­zwei", fmt.format(102), "102")
        assertEquals("neun­hundert­acht­und­neunzig", fmt.format(998), "998")
        assertEquals("neun­hundert­neun­und­neunzig", fmt.format(999), "999")
        assertEquals("ein­tausend", fmt.format(1000), "1000")
        assertEquals("ein­tausend­eine", fmt.format(1001), "1001")
        assertEquals("ein­tausend­zwei", fmt.format(1002), "1002")
        assertEquals("ein­tausend­neun­hundert­acht­und­neunzig", fmt.format(1998), "1998")
        assertEquals("ein­tausend­neun­hundert­neun­und­neunzig", fmt.format(1999), "1999")
        assertEquals("zwei­tausend", fmt.format(2000), "2000")
        assertEquals("zwei­tausend­eine", fmt.format(2001), "2001")
        assertEquals("zwei­tausend­zwei", fmt.format(2002), "2002")
        assertEquals("neun­tausend­neun­hundert­acht­und­neunzig", fmt.format(9998), "9998")
        assertEquals("neun­tausend­neun­hundert­neun­und­neunzig", fmt.format(9999), "9999")
        assertEquals("zehn­tausend", fmt.format(10000), "10000")
        assertEquals("zehn­tausend­eine", fmt.format(10001), "10001")
        assertEquals("zehn­tausend­zwei", fmt.format(10002), "10002")
        assertEquals("ein­hundert­tausend", fmt.format(100000), "100000")
        assertEquals("ein­hundert­tausend­eine", fmt.format(100001), "100001")
        assertEquals("ein­hundert­tausend­zwei", fmt.format(100002), "100002")
        assertEquals("zwei­hundert­tausend", fmt.format(200000), "200000")
        assertEquals("zwei­hundert­tausend­eine", fmt.format(200001), "200001")
        assertEquals("zwei­hundert­tausend­zwei", fmt.format(200002), "200002")
        assertEquals("eine Million", fmt.format(1000000), "1000000")
        assertEquals("eine Million eine", fmt.format(1000001), "1000001")
        assertEquals("eine Million zwei", fmt.format(1000002), "1000002")
        assertEquals("zwei Millionen", fmt.format(2000000), "2000000")
        assertEquals("zwei Millionen eine", fmt.format(2000001), "2000001")
        assertEquals("zwei Millionen zwei", fmt.format(2000002), "2000002")
        assertEquals("zehn Millionen", fmt.format(10000000), "10000000")
        assertEquals("zehn Millionen eine", fmt.format(10000001), "10000001")
        assertEquals("zehn Millionen zwei", fmt.format(10000002), "10000002")
        assertEquals("zwanzig Millionen", fmt.format(20000000), "20000000")
        assertEquals("zwanzig Millionen eine", fmt.format(20000001), "20000001")
        assertEquals("zwanzig Millionen zwei", fmt.format(20000002), "20000002")
        assertEquals("ein­hundert Millionen", fmt.format(100000000), "100000000")
        assertEquals("ein­hundert Millionen eine", fmt.format(100000001), "100000001")
        assertEquals("ein­hundert Millionen zwei", fmt.format(100000002), "100000002")
        assertEquals("zwei­hundert Millionen", fmt.format(200000000), "200000000")
        assertEquals("zwei­hundert Millionen eine", fmt.format(200000001), "200000001")
        assertEquals("zwei­hundert Millionen zwei", fmt.format(200000002), "200000002")
        assertEquals("eine Milliarde", fmt.format(1000000000), "1000000000")
        assertEquals("eine Milliarde eine", fmt.format(1000000001), "1000000001")
        assertEquals("eine Milliarde zwei", fmt.format(1000000002), "1000000002")
        assertEquals("zwei Milliarden", fmt.format(2000000000), "2000000000")
        assertEquals("zwei Milliarden eine", fmt.format(2000000001), "2000000001")
        assertEquals("zwei Milliarden zwei", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalMasculine() {
        val fmt = RBNFDe().spelloutCardinalMasculine
        assertEquals("minus ein", fmt.format(-1), "-1")
        assertEquals("null", fmt.format(0), "0")
        assertEquals("null Komma zwei", fmt.format(0.2), "0.2")
        assertEquals("null Komma zwei drei vier fünf", fmt.format(0.2345), "0.2345")
        assertEquals("null Komma null zwei", fmt.format(0.02), "0.02")
        assertEquals("null Komma null zwei ein drei", fmt.format(0.0213), "0.0213")
        assertEquals("vier Komma sieben fünf ein", fmt.format(4.751), "4.751")
        assertEquals("zwölf Komma null fünf ein", fmt.format(12.051), "12.051")
        assertEquals("dreizehn Komma null zwei fünf ein", fmt.format(13.0251), "13.0251")
        assertEquals("vierzehn Komma null zwei zwei fünf ein", fmt.format(14.02251), "14.02251")
        assertEquals("ein", fmt.format(1), "1")
        assertEquals("zwei", fmt.format(2), "2")
        assertEquals("drei", fmt.format(3), "3")
        assertEquals("vier", fmt.format(4), "4")
        assertEquals("fünf", fmt.format(5), "5")
        assertEquals("sechs", fmt.format(6), "6")
        assertEquals("sieben", fmt.format(7), "7")
        assertEquals("acht", fmt.format(8), "8")
        assertEquals("neun", fmt.format(9), "9")
        assertEquals("zehn", fmt.format(10), "10")
        assertEquals("elf", fmt.format(11), "11")
        assertEquals("zwölf", fmt.format(12), "12")
        assertEquals("dreizehn", fmt.format(13), "13")
        assertEquals("vierzehn", fmt.format(14), "14")
        assertEquals("fünfzehn", fmt.format(15), "15")
        assertEquals("sechzehn", fmt.format(16), "16")
        assertEquals("siebzehn", fmt.format(17), "17")
        assertEquals("achtzehn", fmt.format(18), "18")
        assertEquals("neunzehn", fmt.format(19), "19")
        assertEquals("zwanzig", fmt.format(20), "20")
        assertEquals("ein­und­zwanzig", fmt.format(21), "21")
        assertEquals("zwei­und­zwanzig", fmt.format(22), "22")
        assertEquals("drei­und­zwanzig", fmt.format(23), "23")
        assertEquals("vier­und­zwanzig", fmt.format(24), "24")
        assertEquals("fünf­und­zwanzig", fmt.format(25), "25")
        assertEquals("sechs­und­zwanzig", fmt.format(26), "26")
        assertEquals("sieben­und­zwanzig", fmt.format(27), "27")
        assertEquals("acht­und­zwanzig", fmt.format(28), "28")
        assertEquals("neun­und­zwanzig", fmt.format(29), "29")
        assertEquals("dreißig", fmt.format(30), "30")
        assertEquals("ein­und­dreißig", fmt.format(31), "31")
        assertEquals("acht­und­neunzig", fmt.format(98), "98")
        assertEquals("neun­und­neunzig", fmt.format(99), "99")
        assertEquals("ein­hundert", fmt.format(100), "100")
        assertEquals("ein­hundert­ein", fmt.format(101), "101")
        assertEquals("ein­hundert­zwei", fmt.format(102), "102")
        assertEquals("neun­hundert­acht­und­neunzig", fmt.format(998), "998")
        assertEquals("neun­hundert­neun­und­neunzig", fmt.format(999), "999")
        assertEquals("ein­tausend", fmt.format(1000), "1000")
        assertEquals("ein­tausend­ein", fmt.format(1001), "1001")
        assertEquals("ein­tausend­zwei", fmt.format(1002), "1002")
        assertEquals("ein­tausend­neun­hundert­acht­und­neunzig", fmt.format(1998), "1998")
        assertEquals("ein­tausend­neun­hundert­neun­und­neunzig", fmt.format(1999), "1999")
        assertEquals("zwei­tausend", fmt.format(2000), "2000")
        assertEquals("zwei­tausend­ein", fmt.format(2001), "2001")
        assertEquals("zwei­tausend­zwei", fmt.format(2002), "2002")
        assertEquals("neun­tausend­neun­hundert­acht­und­neunzig", fmt.format(9998), "9998")
        assertEquals("neun­tausend­neun­hundert­neun­und­neunzig", fmt.format(9999), "9999")
        assertEquals("zehn­tausend", fmt.format(10000), "10000")
        assertEquals("zehn­tausend­ein", fmt.format(10001), "10001")
        assertEquals("zehn­tausend­zwei", fmt.format(10002), "10002")
        assertEquals("ein­hundert­tausend", fmt.format(100000), "100000")
        assertEquals("ein­hundert­tausend­ein", fmt.format(100001), "100001")
        assertEquals("ein­hundert­tausend­zwei", fmt.format(100002), "100002")
        assertEquals("zwei­hundert­tausend", fmt.format(200000), "200000")
        assertEquals("zwei­hundert­tausend­ein", fmt.format(200001), "200001")
        assertEquals("zwei­hundert­tausend­zwei", fmt.format(200002), "200002")
        assertEquals("eine Million", fmt.format(1000000), "1000000")
        assertEquals("eine Million ein", fmt.format(1000001), "1000001")
        assertEquals("eine Million zwei", fmt.format(1000002), "1000002")
        assertEquals("zwei Millionen", fmt.format(2000000), "2000000")
        assertEquals("zwei Millionen ein", fmt.format(2000001), "2000001")
        assertEquals("zwei Millionen zwei", fmt.format(2000002), "2000002")
        assertEquals("zehn Millionen", fmt.format(10000000), "10000000")
        assertEquals("zehn Millionen ein", fmt.format(10000001), "10000001")
        assertEquals("zehn Millionen zwei", fmt.format(10000002), "10000002")
        assertEquals("zwanzig Millionen", fmt.format(20000000), "20000000")
        assertEquals("zwanzig Millionen ein", fmt.format(20000001), "20000001")
        assertEquals("zwanzig Millionen zwei", fmt.format(20000002), "20000002")
        assertEquals("ein­hundert Millionen", fmt.format(100000000), "100000000")
        assertEquals("ein­hundert Millionen ein", fmt.format(100000001), "100000001")
        assertEquals("ein­hundert Millionen zwei", fmt.format(100000002), "100000002")
        assertEquals("zwei­hundert Millionen", fmt.format(200000000), "200000000")
        assertEquals("zwei­hundert Millionen ein", fmt.format(200000001), "200000001")
        assertEquals("zwei­hundert Millionen zwei", fmt.format(200000002), "200000002")
        assertEquals("eine Milliarde", fmt.format(1000000000), "1000000000")
        assertEquals("eine Milliarde ein", fmt.format(1000000001), "1000000001")
        assertEquals("eine Milliarde zwei", fmt.format(1000000002), "1000000002")
        assertEquals("zwei Milliarden", fmt.format(2000000000), "2000000000")
        assertEquals("zwei Milliarden ein", fmt.format(2000000001), "2000000001")
        assertEquals("zwei Milliarden zwei", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalNeuter() {
        val fmt = RBNFDe().spelloutCardinalNeuter
        assertEquals("minus ein", fmt.format(-1), "-1")
        assertEquals("null", fmt.format(0), "0")
        assertEquals("null Komma zwei", fmt.format(0.2), "0.2")
        assertEquals("null Komma zwei drei vier fünf", fmt.format(0.2345), "0.2345")
        assertEquals("null Komma null zwei", fmt.format(0.02), "0.02")
        assertEquals("null Komma null zwei ein drei", fmt.format(0.0213), "0.0213")
        assertEquals("vier Komma sieben fünf ein", fmt.format(4.751), "4.751")
        assertEquals("zwölf Komma null fünf ein", fmt.format(12.051), "12.051")
        assertEquals("dreizehn Komma null zwei fünf ein", fmt.format(13.0251), "13.0251")
        assertEquals("vierzehn Komma null zwei zwei fünf ein", fmt.format(14.02251), "14.02251")
        assertEquals("ein", fmt.format(1), "1")
        assertEquals("zwei", fmt.format(2), "2")
        assertEquals("drei", fmt.format(3), "3")
        assertEquals("vier", fmt.format(4), "4")
        assertEquals("fünf", fmt.format(5), "5")
        assertEquals("sechs", fmt.format(6), "6")
        assertEquals("sieben", fmt.format(7), "7")
        assertEquals("acht", fmt.format(8), "8")
        assertEquals("neun", fmt.format(9), "9")
        assertEquals("zehn", fmt.format(10), "10")
        assertEquals("elf", fmt.format(11), "11")
        assertEquals("zwölf", fmt.format(12), "12")
        assertEquals("dreizehn", fmt.format(13), "13")
        assertEquals("vierzehn", fmt.format(14), "14")
        assertEquals("fünfzehn", fmt.format(15), "15")
        assertEquals("sechzehn", fmt.format(16), "16")
        assertEquals("siebzehn", fmt.format(17), "17")
        assertEquals("achtzehn", fmt.format(18), "18")
        assertEquals("neunzehn", fmt.format(19), "19")
        assertEquals("zwanzig", fmt.format(20), "20")
        assertEquals("ein­und­zwanzig", fmt.format(21), "21")
        assertEquals("zwei­und­zwanzig", fmt.format(22), "22")
        assertEquals("drei­und­zwanzig", fmt.format(23), "23")
        assertEquals("vier­und­zwanzig", fmt.format(24), "24")
        assertEquals("fünf­und­zwanzig", fmt.format(25), "25")
        assertEquals("sechs­und­zwanzig", fmt.format(26), "26")
        assertEquals("sieben­und­zwanzig", fmt.format(27), "27")
        assertEquals("acht­und­zwanzig", fmt.format(28), "28")
        assertEquals("neun­und­zwanzig", fmt.format(29), "29")
        assertEquals("dreißig", fmt.format(30), "30")
        assertEquals("ein­und­dreißig", fmt.format(31), "31")
        assertEquals("acht­und­neunzig", fmt.format(98), "98")
        assertEquals("neun­und­neunzig", fmt.format(99), "99")
        assertEquals("ein­hundert", fmt.format(100), "100")
        assertEquals("ein­hundert­ein", fmt.format(101), "101")
        assertEquals("ein­hundert­zwei", fmt.format(102), "102")
        assertEquals("neun­hundert­acht­und­neunzig", fmt.format(998), "998")
        assertEquals("neun­hundert­neun­und­neunzig", fmt.format(999), "999")
        assertEquals("ein­tausend", fmt.format(1000), "1000")
        assertEquals("ein­tausend­ein", fmt.format(1001), "1001")
        assertEquals("ein­tausend­zwei", fmt.format(1002), "1002")
        assertEquals("ein­tausend­neun­hundert­acht­und­neunzig", fmt.format(1998), "1998")
        assertEquals("ein­tausend­neun­hundert­neun­und­neunzig", fmt.format(1999), "1999")
        assertEquals("zwei­tausend", fmt.format(2000), "2000")
        assertEquals("zwei­tausend­ein", fmt.format(2001), "2001")
        assertEquals("zwei­tausend­zwei", fmt.format(2002), "2002")
        assertEquals("neun­tausend­neun­hundert­acht­und­neunzig", fmt.format(9998), "9998")
        assertEquals("neun­tausend­neun­hundert­neun­und­neunzig", fmt.format(9999), "9999")
        assertEquals("zehn­tausend", fmt.format(10000), "10000")
        assertEquals("zehn­tausend­ein", fmt.format(10001), "10001")
        assertEquals("zehn­tausend­zwei", fmt.format(10002), "10002")
        assertEquals("ein­hundert­tausend", fmt.format(100000), "100000")
        assertEquals("ein­hundert­tausend­ein", fmt.format(100001), "100001")
        assertEquals("ein­hundert­tausend­zwei", fmt.format(100002), "100002")
        assertEquals("zwei­hundert­tausend", fmt.format(200000), "200000")
        assertEquals("zwei­hundert­tausend­ein", fmt.format(200001), "200001")
        assertEquals("zwei­hundert­tausend­zwei", fmt.format(200002), "200002")
        assertEquals("eine Million", fmt.format(1000000), "1000000")
        assertEquals("eine Million ein", fmt.format(1000001), "1000001")
        assertEquals("eine Million zwei", fmt.format(1000002), "1000002")
        assertEquals("zwei Millionen", fmt.format(2000000), "2000000")
        assertEquals("zwei Millionen ein", fmt.format(2000001), "2000001")
        assertEquals("zwei Millionen zwei", fmt.format(2000002), "2000002")
        assertEquals("zehn Millionen", fmt.format(10000000), "10000000")
        assertEquals("zehn Millionen ein", fmt.format(10000001), "10000001")
        assertEquals("zehn Millionen zwei", fmt.format(10000002), "10000002")
        assertEquals("zwanzig Millionen", fmt.format(20000000), "20000000")
        assertEquals("zwanzig Millionen ein", fmt.format(20000001), "20000001")
        assertEquals("zwanzig Millionen zwei", fmt.format(20000002), "20000002")
        assertEquals("ein­hundert Millionen", fmt.format(100000000), "100000000")
        assertEquals("ein­hundert Millionen ein", fmt.format(100000001), "100000001")
        assertEquals("ein­hundert Millionen zwei", fmt.format(100000002), "100000002")
        assertEquals("zwei­hundert Millionen", fmt.format(200000000), "200000000")
        assertEquals("zwei­hundert Millionen ein", fmt.format(200000001), "200000001")
        assertEquals("zwei­hundert Millionen zwei", fmt.format(200000002), "200000002")
        assertEquals("eine Milliarde", fmt.format(1000000000), "1000000000")
        assertEquals("eine Milliarde ein", fmt.format(1000000001), "1000000001")
        assertEquals("eine Milliarde zwei", fmt.format(1000000002), "1000000002")
        assertEquals("zwei Milliarden", fmt.format(2000000000), "2000000000")
        assertEquals("zwei Milliarden ein", fmt.format(2000000001), "2000000001")
        assertEquals("zwei Milliarden zwei", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutNumbering() {
        val fmt = RBNFDe().spelloutNumbering
        assertEquals("minus eins", fmt.format(-1), "-1")
        assertEquals("null", fmt.format(0), "0")
        assertEquals("null Komma zwei", fmt.format(0.2), "0.2")
        assertEquals("null Komma zwei drei vier fünf", fmt.format(0.2345), "0.2345")
        assertEquals("null Komma null zwei", fmt.format(0.02), "0.02")
        assertEquals("null Komma null zwei eins drei", fmt.format(0.0213), "0.0213")
        assertEquals("vier Komma sieben fünf eins", fmt.format(4.751), "4.751")
        assertEquals("zwölf Komma null fünf eins", fmt.format(12.051), "12.051")
        assertEquals("dreizehn Komma null zwei fünf eins", fmt.format(13.0251), "13.0251")
        assertEquals("vierzehn Komma null zwei zwei fünf eins", fmt.format(14.02251), "14.02251")
        assertEquals("eins", fmt.format(1), "1")
        assertEquals("zwei", fmt.format(2), "2")
        assertEquals("drei", fmt.format(3), "3")
        assertEquals("vier", fmt.format(4), "4")
        assertEquals("fünf", fmt.format(5), "5")
        assertEquals("sechs", fmt.format(6), "6")
        assertEquals("sieben", fmt.format(7), "7")
        assertEquals("acht", fmt.format(8), "8")
        assertEquals("neun", fmt.format(9), "9")
        assertEquals("zehn", fmt.format(10), "10")
        assertEquals("elf", fmt.format(11), "11")
        assertEquals("zwölf", fmt.format(12), "12")
        assertEquals("dreizehn", fmt.format(13), "13")
        assertEquals("vierzehn", fmt.format(14), "14")
        assertEquals("fünfzehn", fmt.format(15), "15")
        assertEquals("sechzehn", fmt.format(16), "16")
        assertEquals("siebzehn", fmt.format(17), "17")
        assertEquals("achtzehn", fmt.format(18), "18")
        assertEquals("neunzehn", fmt.format(19), "19")
        assertEquals("zwanzig", fmt.format(20), "20")
        assertEquals("ein­und­zwanzig", fmt.format(21), "21")
        assertEquals("zwei­und­zwanzig", fmt.format(22), "22")
        assertEquals("drei­und­zwanzig", fmt.format(23), "23")
        assertEquals("vier­und­zwanzig", fmt.format(24), "24")
        assertEquals("fünf­und­zwanzig", fmt.format(25), "25")
        assertEquals("sechs­und­zwanzig", fmt.format(26), "26")
        assertEquals("sieben­und­zwanzig", fmt.format(27), "27")
        assertEquals("acht­und­zwanzig", fmt.format(28), "28")
        assertEquals("neun­und­zwanzig", fmt.format(29), "29")
        assertEquals("dreißig", fmt.format(30), "30")
        assertEquals("ein­und­dreißig", fmt.format(31), "31")
        assertEquals("acht­und­neunzig", fmt.format(98), "98")
        assertEquals("neun­und­neunzig", fmt.format(99), "99")
        assertEquals("ein­hundert", fmt.format(100), "100")
        assertEquals("ein­hundert­eins", fmt.format(101), "101")
        assertEquals("ein­hundert­zwei", fmt.format(102), "102")
        assertEquals("neun­hundert­acht­und­neunzig", fmt.format(998), "998")
        assertEquals("neun­hundert­neun­und­neunzig", fmt.format(999), "999")
        assertEquals("ein­tausend", fmt.format(1000), "1000")
        assertEquals("ein­tausend­eins", fmt.format(1001), "1001")
        assertEquals("ein­tausend­zwei", fmt.format(1002), "1002")
        assertEquals("ein­tausend­neun­hundert­acht­und­neunzig", fmt.format(1998), "1998")
        assertEquals("ein­tausend­neun­hundert­neun­und­neunzig", fmt.format(1999), "1999")
        assertEquals("zwei­tausend", fmt.format(2000), "2000")
        assertEquals("zwei­tausend­eins", fmt.format(2001), "2001")
        assertEquals("zwei­tausend­zwei", fmt.format(2002), "2002")
        assertEquals("neun­tausend­neun­hundert­acht­und­neunzig", fmt.format(9998), "9998")
        assertEquals("neun­tausend­neun­hundert­neun­und­neunzig", fmt.format(9999), "9999")
        assertEquals("zehn­tausend", fmt.format(10000), "10000")
        assertEquals("zehn­tausend­eins", fmt.format(10001), "10001")
        assertEquals("zehn­tausend­zwei", fmt.format(10002), "10002")
        assertEquals("ein­hundert­tausend", fmt.format(100000), "100000")
        assertEquals("ein­hundert­tausend­eins", fmt.format(100001), "100001")
        assertEquals("ein­hundert­tausend­zwei", fmt.format(100002), "100002")
        assertEquals("zwei­hundert­tausend", fmt.format(200000), "200000")
        assertEquals("zwei­hundert­tausend­eins", fmt.format(200001), "200001")
        assertEquals("zwei­hundert­tausend­zwei", fmt.format(200002), "200002")
        assertEquals("eine Million", fmt.format(1000000), "1000000")
        assertEquals("eine Million eins", fmt.format(1000001), "1000001")
        assertEquals("eine Million zwei", fmt.format(1000002), "1000002")
        assertEquals("zwei Millionen", fmt.format(2000000), "2000000")
        assertEquals("zwei Millionen eins", fmt.format(2000001), "2000001")
        assertEquals("zwei Millionen zwei", fmt.format(2000002), "2000002")
        assertEquals("zehn Millionen", fmt.format(10000000), "10000000")
        assertEquals("zehn Millionen eins", fmt.format(10000001), "10000001")
        assertEquals("zehn Millionen zwei", fmt.format(10000002), "10000002")
        assertEquals("zwanzig Millionen", fmt.format(20000000), "20000000")
        assertEquals("zwanzig Millionen eins", fmt.format(20000001), "20000001")
        assertEquals("zwanzig Millionen zwei", fmt.format(20000002), "20000002")
        assertEquals("ein­hundert Millionen", fmt.format(100000000), "100000000")
        assertEquals("ein­hundert Millionen eins", fmt.format(100000001), "100000001")
        assertEquals("ein­hundert Millionen zwei", fmt.format(100000002), "100000002")
        assertEquals("zwei­hundert Millionen", fmt.format(200000000), "200000000")
        assertEquals("zwei­hundert Millionen eins", fmt.format(200000001), "200000001")
        assertEquals("zwei­hundert Millionen zwei", fmt.format(200000002), "200000002")
        assertEquals("eine Milliarde", fmt.format(1000000000), "1000000000")
        assertEquals("eine Milliarde eins", fmt.format(1000000001), "1000000001")
        assertEquals("eine Milliarde zwei", fmt.format(1000000002), "1000000002")
        assertEquals("zwei Milliarden", fmt.format(2000000000), "2000000000")
        assertEquals("zwei Milliarden eins", fmt.format(2000000001), "2000000001")
        assertEquals("zwei Milliarden zwei", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutNumberingYear() {
        val fmt = RBNFDe().spelloutNumberingYear
// nonsense assertEquals("minus eins", fmt.format(-1), "-1")
// nonsense assertEquals("null", fmt.format(0), "0")
// nonsense assertEquals("0,2", fmt.format(0.2), "0.2")
// nonsense assertEquals("0,2", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0,0", fmt.format(0.02), "0.02")
// nonsense assertEquals("0,0", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4,8", fmt.format(4.751), "4.751")
// nonsense assertEquals("12,1", fmt.format(12.051), "12.051")
// nonsense assertEquals("13,0", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14,0", fmt.format(14.02251), "14.02251")
        assertEquals("eins", fmt.format(1), "1")
        assertEquals("zwei", fmt.format(2), "2")
        assertEquals("drei", fmt.format(3), "3")
        assertEquals("vier", fmt.format(4), "4")
        assertEquals("fünf", fmt.format(5), "5")
        assertEquals("sechs", fmt.format(6), "6")
        assertEquals("sieben", fmt.format(7), "7")
        assertEquals("acht", fmt.format(8), "8")
        assertEquals("neun", fmt.format(9), "9")
        assertEquals("zehn", fmt.format(10), "10")
        assertEquals("elf", fmt.format(11), "11")
        assertEquals("zwölf", fmt.format(12), "12")
        assertEquals("dreizehn", fmt.format(13), "13")
        assertEquals("vierzehn", fmt.format(14), "14")
        assertEquals("fünfzehn", fmt.format(15), "15")
        assertEquals("sechzehn", fmt.format(16), "16")
        assertEquals("siebzehn", fmt.format(17), "17")
        assertEquals("achtzehn", fmt.format(18), "18")
        assertEquals("neunzehn", fmt.format(19), "19")
        assertEquals("zwanzig", fmt.format(20), "20")
        assertEquals("ein­und­zwanzig", fmt.format(21), "21")
        assertEquals("zwei­und­zwanzig", fmt.format(22), "22")
        assertEquals("drei­und­zwanzig", fmt.format(23), "23")
        assertEquals("vier­und­zwanzig", fmt.format(24), "24")
        assertEquals("fünf­und­zwanzig", fmt.format(25), "25")
        assertEquals("sechs­und­zwanzig", fmt.format(26), "26")
        assertEquals("sieben­und­zwanzig", fmt.format(27), "27")
        assertEquals("acht­und­zwanzig", fmt.format(28), "28")
        assertEquals("neun­und­zwanzig", fmt.format(29), "29")
        assertEquals("dreißig", fmt.format(30), "30")
        assertEquals("ein­und­dreißig", fmt.format(31), "31")
        assertEquals("acht­und­neunzig", fmt.format(98), "98")
        assertEquals("neun­und­neunzig", fmt.format(99), "99")
        assertEquals("ein­hundert", fmt.format(100), "100")
        assertEquals("ein­hundert­eins", fmt.format(101), "101")
        assertEquals("ein­hundert­zwei", fmt.format(102), "102")
        assertEquals("neun­hundert­acht­und­neunzig", fmt.format(998), "998")
        assertEquals("neun­hundert­neun­und­neunzig", fmt.format(999), "999")
        assertEquals("ein­tausend", fmt.format(1000), "1000")
        assertEquals("ein­tausend­eins", fmt.format(1001), "1001")
        assertEquals("ein­tausend­zwei", fmt.format(1002), "1002")
        assertEquals("neunzehn­hundert­acht­und­neunzig", fmt.format(1998), "1998")
        assertEquals("neunzehn­hundert­neun­und­neunzig", fmt.format(1999), "1999")
        assertEquals("zwei­tausend", fmt.format(2000), "2000")
        assertEquals("zwei­tausend­eins", fmt.format(2001), "2001")
        assertEquals("zwei­tausend­zwei", fmt.format(2002), "2002")
        assertEquals("neun­tausend­neun­hundert­acht­und­neunzig", fmt.format(9998), "9998")
        assertEquals("neun­tausend­neun­hundert­neun­und­neunzig", fmt.format(9999), "9999")
        assertEquals("zehn­tausend", fmt.format(10000), "10000")
        assertEquals("zehn­tausend­eins", fmt.format(10001), "10001")
        assertEquals("zehn­tausend­zwei", fmt.format(10002), "10002")
        assertEquals("ein­hundert­tausend", fmt.format(100000), "100000")
        assertEquals("ein­hundert­tausend­eins", fmt.format(100001), "100001")
        assertEquals("ein­hundert­tausend­zwei", fmt.format(100002), "100002")
        assertEquals("zwei­hundert­tausend", fmt.format(200000), "200000")
        assertEquals("zwei­hundert­tausend­eins", fmt.format(200001), "200001")
        assertEquals("zwei­hundert­tausend­zwei", fmt.format(200002), "200002")
        assertEquals("eine Million", fmt.format(1000000), "1000000")
        assertEquals("eine Million eins", fmt.format(1000001), "1000001")
        assertEquals("eine Million zwei", fmt.format(1000002), "1000002")
        assertEquals("zwei Millionen", fmt.format(2000000), "2000000")
        assertEquals("zwei Millionen eins", fmt.format(2000001), "2000001")
        assertEquals("zwei Millionen zwei", fmt.format(2000002), "2000002")
        assertEquals("zehn Millionen", fmt.format(10000000), "10000000")
        assertEquals("zehn Millionen eins", fmt.format(10000001), "10000001")
        assertEquals("zehn Millionen zwei", fmt.format(10000002), "10000002")
        assertEquals("zwanzig Millionen", fmt.format(20000000), "20000000")
        assertEquals("zwanzig Millionen eins", fmt.format(20000001), "20000001")
        assertEquals("zwanzig Millionen zwei", fmt.format(20000002), "20000002")
        assertEquals("ein­hundert Millionen", fmt.format(100000000), "100000000")
        assertEquals("ein­hundert Millionen eins", fmt.format(100000001), "100000001")
        assertEquals("ein­hundert Millionen zwei", fmt.format(100000002), "100000002")
        assertEquals("zwei­hundert Millionen", fmt.format(200000000), "200000000")
        assertEquals("zwei­hundert Millionen eins", fmt.format(200000001), "200000001")
        assertEquals("zwei­hundert Millionen zwei", fmt.format(200000002), "200000002")
        assertEquals("eine Milliarde", fmt.format(1000000000), "1000000000")
        assertEquals("eine Milliarde eins", fmt.format(1000000001), "1000000001")
        assertEquals("eine Milliarde zwei", fmt.format(1000000002), "1000000002")
        assertEquals("zwei Milliarden", fmt.format(2000000000), "2000000000")
        assertEquals("zwei Milliarden eins", fmt.format(2000000001), "2000000001")
        assertEquals("zwei Milliarden zwei", fmt.format(2000000002), "2000000002")
    }
}
