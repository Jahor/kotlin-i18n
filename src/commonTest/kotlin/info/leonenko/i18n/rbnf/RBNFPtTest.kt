package info.leonenko.i18n.rbnf

import kotlin.test.Test
import kotlin.test.assertEquals

class RBNFPtTest {
    @Test
    fun spelloutOrdinalFeminine() {
        val fmt = RBNFPt().spelloutOrdinalFeminine
// nonsense assertEquals("menos primeira", fmt.format(-1), "-1")
// nonsense assertEquals("zero", fmt.format(0), "0")
// nonsense assertEquals("0,2", fmt.format(0.2), "0.2")
// nonsense assertEquals("0,2", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0", fmt.format(0.02), "0.02")
// nonsense assertEquals("0", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4,8", fmt.format(4.751), "4.751")
// nonsense assertEquals("12,1", fmt.format(12.051), "12.051")
// nonsense assertEquals("13", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14", fmt.format(14.02251), "14.02251")
        assertEquals("primeira", fmt.format(1), "1")
        assertEquals("segunda", fmt.format(2), "2")
        assertEquals("terceira", fmt.format(3), "3")
        assertEquals("quarta", fmt.format(4), "4")
        assertEquals("quinta", fmt.format(5), "5")
        assertEquals("sexta", fmt.format(6), "6")
        assertEquals("sétima", fmt.format(7), "7")
        assertEquals("oitava", fmt.format(8), "8")
        assertEquals("nona", fmt.format(9), "9")
        assertEquals("décima", fmt.format(10), "10")
        assertEquals("décima primeira", fmt.format(11), "11")
        assertEquals("décima segunda", fmt.format(12), "12")
        assertEquals("décima terceira", fmt.format(13), "13")
        assertEquals("décima quarta", fmt.format(14), "14")
        assertEquals("décima quinta", fmt.format(15), "15")
        assertEquals("décima sexta", fmt.format(16), "16")
        assertEquals("décima sétima", fmt.format(17), "17")
        assertEquals("décima oitava", fmt.format(18), "18")
        assertEquals("décima nona", fmt.format(19), "19")
        assertEquals("vigésima", fmt.format(20), "20")
        assertEquals("vigésima primeira", fmt.format(21), "21")
        assertEquals("vigésima segunda", fmt.format(22), "22")
        assertEquals("vigésima terceira", fmt.format(23), "23")
        assertEquals("vigésima quarta", fmt.format(24), "24")
        assertEquals("vigésima quinta", fmt.format(25), "25")
        assertEquals("vigésima sexta", fmt.format(26), "26")
        assertEquals("vigésima sétima", fmt.format(27), "27")
        assertEquals("vigésima oitava", fmt.format(28), "28")
        assertEquals("vigésima nona", fmt.format(29), "29")
        assertEquals("trigésima", fmt.format(30), "30")
        assertEquals("trigésima primeira", fmt.format(31), "31")
        assertEquals("nonagésima oitava", fmt.format(98), "98")
        assertEquals("nonagésima nona", fmt.format(99), "99")
        assertEquals("centésima", fmt.format(100), "100")
        assertEquals("centésima primeira", fmt.format(101), "101")
        assertEquals("centésima segunda", fmt.format(102), "102")
        assertEquals("noningentésima nonagésima oitava", fmt.format(998), "998")
        assertEquals("noningentésima nonagésima nona", fmt.format(999), "999")
        assertEquals("milésima", fmt.format(1000), "1000")
        assertEquals("milésima primeira", fmt.format(1001), "1001")
        assertEquals("milésima segunda", fmt.format(1002), "1002")
        assertEquals("milésima noningentésima nonagésima oitava", fmt.format(1998), "1998")
        assertEquals("milésima noningentésima nonagésima nona", fmt.format(1999), "1999")
        assertEquals("duas milésima", fmt.format(2000), "2000")
        assertEquals("duas milésima primeira", fmt.format(2001), "2001")
        assertEquals("duas milésima segunda", fmt.format(2002), "2002")
        assertEquals("nove milésima noningentésima nonagésima oitava", fmt.format(9998), "9998")
        assertEquals("nove milésima noningentésima nonagésima nona", fmt.format(9999), "9999")
        assertEquals("dez milésima", fmt.format(10000), "10000")
        assertEquals("dez milésima primeira", fmt.format(10001), "10001")
        assertEquals("dez milésima segunda", fmt.format(10002), "10002")
        assertEquals("cem milésima", fmt.format(100000), "100000")
        assertEquals("cem milésima primeira", fmt.format(100001), "100001")
        assertEquals("cem milésima segunda", fmt.format(100002), "100002")
        assertEquals("duzentas milésima", fmt.format(200000), "200000")
        assertEquals("duzentas milésima primeira", fmt.format(200001), "200001")
        assertEquals("duzentas milésima segunda", fmt.format(200002), "200002")
        assertEquals("uma milionésima", fmt.format(1000000), "1000000")
        assertEquals("uma milionésima primeira", fmt.format(1000001), "1000001")
        assertEquals("uma milionésima segunda", fmt.format(1000002), "1000002")
        assertEquals("duas milionésima", fmt.format(2000000), "2000000")
        assertEquals("duas milionésima primeira", fmt.format(2000001), "2000001")
        assertEquals("duas milionésima segunda", fmt.format(2000002), "2000002")
        assertEquals("dez milionésima", fmt.format(10000000), "10000000")
        assertEquals("dez milionésima primeira", fmt.format(10000001), "10000001")
        assertEquals("dez milionésima segunda", fmt.format(10000002), "10000002")
        assertEquals("vinte milionésima", fmt.format(20000000), "20000000")
        assertEquals("vinte milionésima primeira", fmt.format(20000001), "20000001")
        assertEquals("vinte milionésima segunda", fmt.format(20000002), "20000002")
        assertEquals("cem milionésima", fmt.format(100000000), "100000000")
        assertEquals("cem milionésima primeira", fmt.format(100000001), "100000001")
        assertEquals("cem milionésima segunda", fmt.format(100000002), "100000002")
        assertEquals("duzentas milionésima", fmt.format(200000000), "200000000")
        assertEquals("duzentas milionésima primeira", fmt.format(200000001), "200000001")
        assertEquals("duzentas milionésima segunda", fmt.format(200000002), "200000002")
        assertEquals("uma bilionésima", fmt.format(1000000000), "1000000000")
        assertEquals("uma bilionésima primeira", fmt.format(1000000001), "1000000001")
        assertEquals("uma bilionésima segunda", fmt.format(1000000002), "1000000002")
        assertEquals("duas bilionésima", fmt.format(2000000000), "2000000000")
        assertEquals("duas bilionésima primeira", fmt.format(2000000001), "2000000001")
        assertEquals("duas bilionésima segunda", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutOrdinalMasculine() {
        val fmt = RBNFPt().spelloutOrdinalMasculine
// nonsense assertEquals("menos primeiro", fmt.format(-1), "-1")
// nonsense assertEquals("zero", fmt.format(0), "0")
// nonsense assertEquals("0,2", fmt.format(0.2), "0.2")
// nonsense assertEquals("0,2", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0", fmt.format(0.02), "0.02")
// nonsense assertEquals("0", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4,8", fmt.format(4.751), "4.751")
// nonsense assertEquals("12,1", fmt.format(12.051), "12.051")
// nonsense assertEquals("13", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14", fmt.format(14.02251), "14.02251")
        assertEquals("primeiro", fmt.format(1), "1")
        assertEquals("segundo", fmt.format(2), "2")
        assertEquals("terceiro", fmt.format(3), "3")
        assertEquals("quarto", fmt.format(4), "4")
        assertEquals("quinto", fmt.format(5), "5")
        assertEquals("sexto", fmt.format(6), "6")
        assertEquals("sétimo", fmt.format(7), "7")
        assertEquals("oitavo", fmt.format(8), "8")
        assertEquals("nono", fmt.format(9), "9")
        assertEquals("décimo", fmt.format(10), "10")
        assertEquals("décimo primeiro", fmt.format(11), "11")
        assertEquals("décimo segundo", fmt.format(12), "12")
        assertEquals("décimo terceiro", fmt.format(13), "13")
        assertEquals("décimo quarto", fmt.format(14), "14")
        assertEquals("décimo quinto", fmt.format(15), "15")
        assertEquals("décimo sexto", fmt.format(16), "16")
        assertEquals("décimo sétimo", fmt.format(17), "17")
        assertEquals("décimo oitavo", fmt.format(18), "18")
        assertEquals("décimo nono", fmt.format(19), "19")
        assertEquals("vigésimo", fmt.format(20), "20")
        assertEquals("vigésimo primeiro", fmt.format(21), "21")
        assertEquals("vigésimo segundo", fmt.format(22), "22")
        assertEquals("vigésimo terceiro", fmt.format(23), "23")
        assertEquals("vigésimo quarto", fmt.format(24), "24")
        assertEquals("vigésimo quinto", fmt.format(25), "25")
        assertEquals("vigésimo sexto", fmt.format(26), "26")
        assertEquals("vigésimo sétimo", fmt.format(27), "27")
        assertEquals("vigésimo oitavo", fmt.format(28), "28")
        assertEquals("vigésimo nono", fmt.format(29), "29")
        assertEquals("trigésimo", fmt.format(30), "30")
        assertEquals("trigésimo primeiro", fmt.format(31), "31")
        assertEquals("nonagésimo oitavo", fmt.format(98), "98")
        assertEquals("nonagésimo nono", fmt.format(99), "99")
        assertEquals("centésimo", fmt.format(100), "100")
        assertEquals("centésimo primeiro", fmt.format(101), "101")
        assertEquals("centésimo segundo", fmt.format(102), "102")
        assertEquals("noningentésimo nonagésimo oitavo", fmt.format(998), "998")
        assertEquals("noningentésimo nonagésimo nono", fmt.format(999), "999")
        assertEquals("milésimo", fmt.format(1000), "1000")
        assertEquals("milésimo primeiro", fmt.format(1001), "1001")
        assertEquals("milésimo segundo", fmt.format(1002), "1002")
        assertEquals("milésimo noningentésimo nonagésimo oitavo", fmt.format(1998), "1998")
        assertEquals("milésimo noningentésimo nonagésimo nono", fmt.format(1999), "1999")
        assertEquals("dois milésimo", fmt.format(2000), "2000")
        assertEquals("dois milésimo primeiro", fmt.format(2001), "2001")
        assertEquals("dois milésimo segundo", fmt.format(2002), "2002")
        assertEquals("nove milésimo noningentésimo nonagésimo oitavo", fmt.format(9998), "9998")
        assertEquals("nove milésimo noningentésimo nonagésimo nono", fmt.format(9999), "9999")
        assertEquals("dez milésimo", fmt.format(10000), "10000")
        assertEquals("dez milésimo primeiro", fmt.format(10001), "10001")
        assertEquals("dez milésimo segundo", fmt.format(10002), "10002")
        assertEquals("cem milésimo", fmt.format(100000), "100000")
        assertEquals("cem milésimo primeiro", fmt.format(100001), "100001")
        assertEquals("cem milésimo segundo", fmt.format(100002), "100002")
        assertEquals("duzentos milésimo", fmt.format(200000), "200000")
        assertEquals("duzentos milésimo primeiro", fmt.format(200001), "200001")
        assertEquals("duzentos milésimo segundo", fmt.format(200002), "200002")
        assertEquals("um milionésimo", fmt.format(1000000), "1000000")
        assertEquals("um milionésimo primeiro", fmt.format(1000001), "1000001")
        assertEquals("um milionésimo segundo", fmt.format(1000002), "1000002")
        assertEquals("dois milionésimo", fmt.format(2000000), "2000000")
        assertEquals("dois milionésimo primeiro", fmt.format(2000001), "2000001")
        assertEquals("dois milionésimo segundo", fmt.format(2000002), "2000002")
        assertEquals("dez milionésimo", fmt.format(10000000), "10000000")
        assertEquals("dez milionésimo primeiro", fmt.format(10000001), "10000001")
        assertEquals("dez milionésimo segundo", fmt.format(10000002), "10000002")
        assertEquals("vinte milionésimo", fmt.format(20000000), "20000000")
        assertEquals("vinte milionésimo primeiro", fmt.format(20000001), "20000001")
        assertEquals("vinte milionésimo segundo", fmt.format(20000002), "20000002")
        assertEquals("cem milionésimo", fmt.format(100000000), "100000000")
        assertEquals("cem milionésimo primeiro", fmt.format(100000001), "100000001")
        assertEquals("cem milionésimo segundo", fmt.format(100000002), "100000002")
        assertEquals("duzentos milionésimo", fmt.format(200000000), "200000000")
        assertEquals("duzentos milionésimo primeiro", fmt.format(200000001), "200000001")
        assertEquals("duzentos milionésimo segundo", fmt.format(200000002), "200000002")
        assertEquals("um bilionésimo", fmt.format(1000000000), "1000000000")
        assertEquals("um bilionésimo primeiro", fmt.format(1000000001), "1000000001")
        assertEquals("um bilionésimo segundo", fmt.format(1000000002), "1000000002")
        assertEquals("dois bilionésimo", fmt.format(2000000000), "2000000000")
        assertEquals("dois bilionésimo primeiro", fmt.format(2000000001), "2000000001")
        assertEquals("dois bilionésimo segundo", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalFeminine() {
        val fmt = RBNFPt().spelloutCardinalFeminine
        assertEquals("menos uma", fmt.format(-1), "-1")
        assertEquals("zero", fmt.format(0), "0")
        assertEquals("zero vírgula duas", fmt.format(0.2), "0.2")
        assertEquals("zero vírgula duas três quatro cinco", fmt.format(0.2345), "0.2345")
        assertEquals("zero vírgula zero duas", fmt.format(0.02), "0.02")
        assertEquals("zero vírgula zero duas uma três", fmt.format(0.0213), "0.0213")
        assertEquals("quatro vírgula sete cinco uma", fmt.format(4.751), "4.751")
        assertEquals("doze vírgula zero cinco uma", fmt.format(12.051), "12.051")
        assertEquals("treze vírgula zero duas cinco uma", fmt.format(13.0251), "13.0251")
        assertEquals("catorze vírgula zero duas duas cinco uma", fmt.format(14.02251), "14.02251")
        assertEquals("uma", fmt.format(1), "1")
        assertEquals("duas", fmt.format(2), "2")
        assertEquals("três", fmt.format(3), "3")
        assertEquals("quatro", fmt.format(4), "4")
        assertEquals("cinco", fmt.format(5), "5")
        assertEquals("seis", fmt.format(6), "6")
        assertEquals("sete", fmt.format(7), "7")
        assertEquals("oito", fmt.format(8), "8")
        assertEquals("nove", fmt.format(9), "9")
        assertEquals("dez", fmt.format(10), "10")
        assertEquals("onze", fmt.format(11), "11")
        assertEquals("doze", fmt.format(12), "12")
        assertEquals("treze", fmt.format(13), "13")
        assertEquals("catorze", fmt.format(14), "14")
        assertEquals("quinze", fmt.format(15), "15")
        assertEquals("dezesseis", fmt.format(16), "16")
        assertEquals("dezessete", fmt.format(17), "17")
        assertEquals("dezoito", fmt.format(18), "18")
        assertEquals("dezenove", fmt.format(19), "19")
        assertEquals("vinte", fmt.format(20), "20")
        assertEquals("vinte e uma", fmt.format(21), "21")
        assertEquals("vinte e duas", fmt.format(22), "22")
        assertEquals("vinte e três", fmt.format(23), "23")
        assertEquals("vinte e quatro", fmt.format(24), "24")
        assertEquals("vinte e cinco", fmt.format(25), "25")
        assertEquals("vinte e seis", fmt.format(26), "26")
        assertEquals("vinte e sete", fmt.format(27), "27")
        assertEquals("vinte e oito", fmt.format(28), "28")
        assertEquals("vinte e nove", fmt.format(29), "29")
        assertEquals("trinta", fmt.format(30), "30")
        assertEquals("trinta e uma", fmt.format(31), "31")
        assertEquals("noventa e oito", fmt.format(98), "98")
        assertEquals("noventa e nove", fmt.format(99), "99")
        assertEquals("cem", fmt.format(100), "100")
        assertEquals("cento e uma", fmt.format(101), "101")
        assertEquals("cento e duas", fmt.format(102), "102")
        assertEquals("novecentas e noventa e oito", fmt.format(998), "998")
        assertEquals("novecentas e noventa e nove", fmt.format(999), "999")
        assertEquals("mil", fmt.format(1000), "1000")
        assertEquals("mil e uma", fmt.format(1001), "1001")
        assertEquals("mil e duas", fmt.format(1002), "1002")
        assertEquals("mil novecentas e noventa e oito", fmt.format(1998), "1998")
        assertEquals("mil novecentas e noventa e nove", fmt.format(1999), "1999")
        assertEquals("duas mil", fmt.format(2000), "2000")
        assertEquals("duas mil e uma", fmt.format(2001), "2001")
        assertEquals("duas mil e duas", fmt.format(2002), "2002")
        assertEquals("nove mil novecentas e noventa e oito", fmt.format(9998), "9998")
        assertEquals("nove mil novecentas e noventa e nove", fmt.format(9999), "9999")
        assertEquals("dez mil", fmt.format(10000), "10000")
        assertEquals("dez mil e uma", fmt.format(10001), "10001")
        assertEquals("dez mil e duas", fmt.format(10002), "10002")
        assertEquals("cem mil", fmt.format(100000), "100000")
        assertEquals("cem mil e uma", fmt.format(100001), "100001")
        assertEquals("cem mil e duas", fmt.format(100002), "100002")
        assertEquals("duzentas mil", fmt.format(200000), "200000")
        assertEquals("duzentas mil e uma", fmt.format(200001), "200001")
        assertEquals("duzentas mil e duas", fmt.format(200002), "200002")
        assertEquals("um milhão", fmt.format(1000000), "1000000")
        assertEquals("um milhão e uma", fmt.format(1000001), "1000001")
        assertEquals("um milhão e duas", fmt.format(1000002), "1000002")
        assertEquals("dois milhões", fmt.format(2000000), "2000000")
        assertEquals("dois milhões e uma", fmt.format(2000001), "2000001")
        assertEquals("dois milhões e duas", fmt.format(2000002), "2000002")
        assertEquals("dez milhões", fmt.format(10000000), "10000000")
        assertEquals("dez milhões e uma", fmt.format(10000001), "10000001")
        assertEquals("dez milhões e duas", fmt.format(10000002), "10000002")
        assertEquals("vinte milhões", fmt.format(20000000), "20000000")
        assertEquals("vinte milhões e uma", fmt.format(20000001), "20000001")
        assertEquals("vinte milhões e duas", fmt.format(20000002), "20000002")
        assertEquals("cem milhões", fmt.format(100000000), "100000000")
        assertEquals("cem milhões e uma", fmt.format(100000001), "100000001")
        assertEquals("cem milhões e duas", fmt.format(100000002), "100000002")
        assertEquals("duzentos milhões", fmt.format(200000000), "200000000")
        assertEquals("duzentos milhões e uma", fmt.format(200000001), "200000001")
        assertEquals("duzentos milhões e duas", fmt.format(200000002), "200000002")
        assertEquals("um bilhão", fmt.format(1000000000), "1000000000")
        assertEquals("um bilhão e uma", fmt.format(1000000001), "1000000001")
        assertEquals("um bilhão e duas", fmt.format(1000000002), "1000000002")
        assertEquals("dois bilhões", fmt.format(2000000000), "2000000000")
        assertEquals("dois bilhões e uma", fmt.format(2000000001), "2000000001")
        assertEquals("dois bilhões e duas", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutCardinalMasculine() {
        val fmt = RBNFPt().spelloutCardinalMasculine
        assertEquals("menos um", fmt.format(-1), "-1")
        assertEquals("zero", fmt.format(0), "0")
        assertEquals("zero vírgula dois", fmt.format(0.2), "0.2")
        assertEquals("zero vírgula dois três quatro cinco", fmt.format(0.2345), "0.2345")
        assertEquals("zero vírgula zero dois", fmt.format(0.02), "0.02")
        assertEquals("zero vírgula zero dois um três", fmt.format(0.0213), "0.0213")
        assertEquals("quatro vírgula sete cinco um", fmt.format(4.751), "4.751")
        assertEquals("doze vírgula zero cinco um", fmt.format(12.051), "12.051")
        assertEquals("treze vírgula zero dois cinco um", fmt.format(13.0251), "13.0251")
        assertEquals("catorze vírgula zero dois dois cinco um", fmt.format(14.02251), "14.02251")
        assertEquals("um", fmt.format(1), "1")
        assertEquals("dois", fmt.format(2), "2")
        assertEquals("três", fmt.format(3), "3")
        assertEquals("quatro", fmt.format(4), "4")
        assertEquals("cinco", fmt.format(5), "5")
        assertEquals("seis", fmt.format(6), "6")
        assertEquals("sete", fmt.format(7), "7")
        assertEquals("oito", fmt.format(8), "8")
        assertEquals("nove", fmt.format(9), "9")
        assertEquals("dez", fmt.format(10), "10")
        assertEquals("onze", fmt.format(11), "11")
        assertEquals("doze", fmt.format(12), "12")
        assertEquals("treze", fmt.format(13), "13")
        assertEquals("catorze", fmt.format(14), "14")
        assertEquals("quinze", fmt.format(15), "15")
        assertEquals("dezesseis", fmt.format(16), "16")
        assertEquals("dezessete", fmt.format(17), "17")
        assertEquals("dezoito", fmt.format(18), "18")
        assertEquals("dezenove", fmt.format(19), "19")
        assertEquals("vinte", fmt.format(20), "20")
        assertEquals("vinte e um", fmt.format(21), "21")
        assertEquals("vinte e dois", fmt.format(22), "22")
        assertEquals("vinte e três", fmt.format(23), "23")
        assertEquals("vinte e quatro", fmt.format(24), "24")
        assertEquals("vinte e cinco", fmt.format(25), "25")
        assertEquals("vinte e seis", fmt.format(26), "26")
        assertEquals("vinte e sete", fmt.format(27), "27")
        assertEquals("vinte e oito", fmt.format(28), "28")
        assertEquals("vinte e nove", fmt.format(29), "29")
        assertEquals("trinta", fmt.format(30), "30")
        assertEquals("trinta e um", fmt.format(31), "31")
        assertEquals("noventa e oito", fmt.format(98), "98")
        assertEquals("noventa e nove", fmt.format(99), "99")
        assertEquals("cem", fmt.format(100), "100")
        assertEquals("cento e um", fmt.format(101), "101")
        assertEquals("cento e dois", fmt.format(102), "102")
        assertEquals("novecentos e noventa e oito", fmt.format(998), "998")
        assertEquals("novecentos e noventa e nove", fmt.format(999), "999")
        assertEquals("mil", fmt.format(1000), "1000")
        assertEquals("mil e um", fmt.format(1001), "1001")
        assertEquals("mil e dois", fmt.format(1002), "1002")
        assertEquals("mil novecentos e noventa e oito", fmt.format(1998), "1998")
        assertEquals("mil novecentos e noventa e nove", fmt.format(1999), "1999")
        assertEquals("dois mil", fmt.format(2000), "2000")
        assertEquals("dois mil e um", fmt.format(2001), "2001")
        assertEquals("dois mil e dois", fmt.format(2002), "2002")
        assertEquals("nove mil novecentos e noventa e oito", fmt.format(9998), "9998")
        assertEquals("nove mil novecentos e noventa e nove", fmt.format(9999), "9999")
        assertEquals("dez mil", fmt.format(10000), "10000")
        assertEquals("dez mil e um", fmt.format(10001), "10001")
        assertEquals("dez mil e dois", fmt.format(10002), "10002")
        assertEquals("cem mil", fmt.format(100000), "100000")
        assertEquals("cem mil e um", fmt.format(100001), "100001")
        assertEquals("cem mil e dois", fmt.format(100002), "100002")
        assertEquals("duzentos mil", fmt.format(200000), "200000")
        assertEquals("duzentos mil e um", fmt.format(200001), "200001")
        assertEquals("duzentos mil e dois", fmt.format(200002), "200002")
        assertEquals("um milhão", fmt.format(1000000), "1000000")
        assertEquals("um milhão e um", fmt.format(1000001), "1000001")
        assertEquals("um milhão e dois", fmt.format(1000002), "1000002")
        assertEquals("dois milhões", fmt.format(2000000), "2000000")
        assertEquals("dois milhões e um", fmt.format(2000001), "2000001")
        assertEquals("dois milhões e dois", fmt.format(2000002), "2000002")
        assertEquals("dez milhões", fmt.format(10000000), "10000000")
        assertEquals("dez milhões e um", fmt.format(10000001), "10000001")
        assertEquals("dez milhões e dois", fmt.format(10000002), "10000002")
        assertEquals("vinte milhões", fmt.format(20000000), "20000000")
        assertEquals("vinte milhões e um", fmt.format(20000001), "20000001")
        assertEquals("vinte milhões e dois", fmt.format(20000002), "20000002")
        assertEquals("cem milhões", fmt.format(100000000), "100000000")
        assertEquals("cem milhões e um", fmt.format(100000001), "100000001")
        assertEquals("cem milhões e dois", fmt.format(100000002), "100000002")
        assertEquals("duzentos milhões", fmt.format(200000000), "200000000")
        assertEquals("duzentos milhões e um", fmt.format(200000001), "200000001")
        assertEquals("duzentos milhões e dois", fmt.format(200000002), "200000002")
        assertEquals("um bilhão", fmt.format(1000000000), "1000000000")
        assertEquals("um bilhão e um", fmt.format(1000000001), "1000000001")
        assertEquals("um bilhão e dois", fmt.format(1000000002), "1000000002")
        assertEquals("dois bilhões", fmt.format(2000000000), "2000000000")
        assertEquals("dois bilhões e um", fmt.format(2000000001), "2000000001")
        assertEquals("dois bilhões e dois", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutNumbering() {
        val fmt = RBNFPt().spelloutNumbering
        assertEquals("menos um", fmt.format(-1), "-1")
        assertEquals("zero", fmt.format(0), "0")
        assertEquals("zero vírgula dois", fmt.format(0.2), "0.2")
        assertEquals("zero vírgula dois três quatro cinco", fmt.format(0.2345), "0.2345")
        assertEquals("zero vírgula zero dois", fmt.format(0.02), "0.02")
        assertEquals("zero vírgula zero dois um três", fmt.format(0.0213), "0.0213")
        assertEquals("quatro vírgula sete cinco um", fmt.format(4.751), "4.751")
        assertEquals("doze vírgula zero cinco um", fmt.format(12.051), "12.051")
        assertEquals("treze vírgula zero dois cinco um", fmt.format(13.0251), "13.0251")
        assertEquals("catorze vírgula zero dois dois cinco um", fmt.format(14.02251), "14.02251")
        assertEquals("um", fmt.format(1), "1")
        assertEquals("dois", fmt.format(2), "2")
        assertEquals("três", fmt.format(3), "3")
        assertEquals("quatro", fmt.format(4), "4")
        assertEquals("cinco", fmt.format(5), "5")
        assertEquals("seis", fmt.format(6), "6")
        assertEquals("sete", fmt.format(7), "7")
        assertEquals("oito", fmt.format(8), "8")
        assertEquals("nove", fmt.format(9), "9")
        assertEquals("dez", fmt.format(10), "10")
        assertEquals("onze", fmt.format(11), "11")
        assertEquals("doze", fmt.format(12), "12")
        assertEquals("treze", fmt.format(13), "13")
        assertEquals("catorze", fmt.format(14), "14")
        assertEquals("quinze", fmt.format(15), "15")
        assertEquals("dezesseis", fmt.format(16), "16")
        assertEquals("dezessete", fmt.format(17), "17")
        assertEquals("dezoito", fmt.format(18), "18")
        assertEquals("dezenove", fmt.format(19), "19")
        assertEquals("vinte", fmt.format(20), "20")
        assertEquals("vinte e um", fmt.format(21), "21")
        assertEquals("vinte e dois", fmt.format(22), "22")
        assertEquals("vinte e três", fmt.format(23), "23")
        assertEquals("vinte e quatro", fmt.format(24), "24")
        assertEquals("vinte e cinco", fmt.format(25), "25")
        assertEquals("vinte e seis", fmt.format(26), "26")
        assertEquals("vinte e sete", fmt.format(27), "27")
        assertEquals("vinte e oito", fmt.format(28), "28")
        assertEquals("vinte e nove", fmt.format(29), "29")
        assertEquals("trinta", fmt.format(30), "30")
        assertEquals("trinta e um", fmt.format(31), "31")
        assertEquals("noventa e oito", fmt.format(98), "98")
        assertEquals("noventa e nove", fmt.format(99), "99")
        assertEquals("cem", fmt.format(100), "100")
        assertEquals("cento e um", fmt.format(101), "101")
        assertEquals("cento e dois", fmt.format(102), "102")
        assertEquals("novecentos e noventa e oito", fmt.format(998), "998")
        assertEquals("novecentos e noventa e nove", fmt.format(999), "999")
        assertEquals("mil", fmt.format(1000), "1000")
        assertEquals("mil e um", fmt.format(1001), "1001")
        assertEquals("mil e dois", fmt.format(1002), "1002")
        assertEquals("mil novecentos e noventa e oito", fmt.format(1998), "1998")
        assertEquals("mil novecentos e noventa e nove", fmt.format(1999), "1999")
        assertEquals("dois mil", fmt.format(2000), "2000")
        assertEquals("dois mil e um", fmt.format(2001), "2001")
        assertEquals("dois mil e dois", fmt.format(2002), "2002")
        assertEquals("nove mil novecentos e noventa e oito", fmt.format(9998), "9998")
        assertEquals("nove mil novecentos e noventa e nove", fmt.format(9999), "9999")
        assertEquals("dez mil", fmt.format(10000), "10000")
        assertEquals("dez mil e um", fmt.format(10001), "10001")
        assertEquals("dez mil e dois", fmt.format(10002), "10002")
        assertEquals("cem mil", fmt.format(100000), "100000")
        assertEquals("cem mil e um", fmt.format(100001), "100001")
        assertEquals("cem mil e dois", fmt.format(100002), "100002")
        assertEquals("duzentos mil", fmt.format(200000), "200000")
        assertEquals("duzentos mil e um", fmt.format(200001), "200001")
        assertEquals("duzentos mil e dois", fmt.format(200002), "200002")
        assertEquals("um milhão", fmt.format(1000000), "1000000")
        assertEquals("um milhão e um", fmt.format(1000001), "1000001")
        assertEquals("um milhão e dois", fmt.format(1000002), "1000002")
        assertEquals("dois milhões", fmt.format(2000000), "2000000")
        assertEquals("dois milhões e um", fmt.format(2000001), "2000001")
        assertEquals("dois milhões e dois", fmt.format(2000002), "2000002")
        assertEquals("dez milhões", fmt.format(10000000), "10000000")
        assertEquals("dez milhões e um", fmt.format(10000001), "10000001")
        assertEquals("dez milhões e dois", fmt.format(10000002), "10000002")
        assertEquals("vinte milhões", fmt.format(20000000), "20000000")
        assertEquals("vinte milhões e um", fmt.format(20000001), "20000001")
        assertEquals("vinte milhões e dois", fmt.format(20000002), "20000002")
        assertEquals("cem milhões", fmt.format(100000000), "100000000")
        assertEquals("cem milhões e um", fmt.format(100000001), "100000001")
        assertEquals("cem milhões e dois", fmt.format(100000002), "100000002")
        assertEquals("duzentos milhões", fmt.format(200000000), "200000000")
        assertEquals("duzentos milhões e um", fmt.format(200000001), "200000001")
        assertEquals("duzentos milhões e dois", fmt.format(200000002), "200000002")
        assertEquals("um bilhão", fmt.format(1000000000), "1000000000")
        assertEquals("um bilhão e um", fmt.format(1000000001), "1000000001")
        assertEquals("um bilhão e dois", fmt.format(1000000002), "1000000002")
        assertEquals("dois bilhões", fmt.format(2000000000), "2000000000")
        assertEquals("dois bilhões e um", fmt.format(2000000001), "2000000001")
        assertEquals("dois bilhões e dois", fmt.format(2000000002), "2000000002")
    }

    @Test
    fun spelloutNumberingYear() {
        val fmt = RBNFPt().spelloutNumberingYear
// nonsense assertEquals("menos um", fmt.format(-1), "-1")
// nonsense assertEquals("zero", fmt.format(0), "0")
// nonsense assertEquals("0,2", fmt.format(0.2), "0.2")
// nonsense assertEquals("0,2", fmt.format(0.2345), "0.2345")
// nonsense assertEquals("0,0", fmt.format(0.02), "0.02")
// nonsense assertEquals("0,0", fmt.format(0.0213), "0.0213")
// nonsense assertEquals("4,8", fmt.format(4.751), "4.751")
// nonsense assertEquals("12,1", fmt.format(12.051), "12.051")
// nonsense assertEquals("13,0", fmt.format(13.0251), "13.0251")
// nonsense assertEquals("14,0", fmt.format(14.02251), "14.02251")
        assertEquals("um", fmt.format(1), "1")
        assertEquals("dois", fmt.format(2), "2")
        assertEquals("três", fmt.format(3), "3")
        assertEquals("quatro", fmt.format(4), "4")
        assertEquals("cinco", fmt.format(5), "5")
        assertEquals("seis", fmt.format(6), "6")
        assertEquals("sete", fmt.format(7), "7")
        assertEquals("oito", fmt.format(8), "8")
        assertEquals("nove", fmt.format(9), "9")
        assertEquals("dez", fmt.format(10), "10")
        assertEquals("onze", fmt.format(11), "11")
        assertEquals("doze", fmt.format(12), "12")
        assertEquals("treze", fmt.format(13), "13")
        assertEquals("catorze", fmt.format(14), "14")
        assertEquals("quinze", fmt.format(15), "15")
        assertEquals("dezesseis", fmt.format(16), "16")
        assertEquals("dezessete", fmt.format(17), "17")
        assertEquals("dezoito", fmt.format(18), "18")
        assertEquals("dezenove", fmt.format(19), "19")
        assertEquals("vinte", fmt.format(20), "20")
        assertEquals("vinte e um", fmt.format(21), "21")
        assertEquals("vinte e dois", fmt.format(22), "22")
        assertEquals("vinte e três", fmt.format(23), "23")
        assertEquals("vinte e quatro", fmt.format(24), "24")
        assertEquals("vinte e cinco", fmt.format(25), "25")
        assertEquals("vinte e seis", fmt.format(26), "26")
        assertEquals("vinte e sete", fmt.format(27), "27")
        assertEquals("vinte e oito", fmt.format(28), "28")
        assertEquals("vinte e nove", fmt.format(29), "29")
        assertEquals("trinta", fmt.format(30), "30")
        assertEquals("trinta e um", fmt.format(31), "31")
        assertEquals("noventa e oito", fmt.format(98), "98")
        assertEquals("noventa e nove", fmt.format(99), "99")
        assertEquals("cem", fmt.format(100), "100")
        assertEquals("cento e um", fmt.format(101), "101")
        assertEquals("cento e dois", fmt.format(102), "102")
        assertEquals("novecentos e noventa e oito", fmt.format(998), "998")
        assertEquals("novecentos e noventa e nove", fmt.format(999), "999")
        assertEquals("mil", fmt.format(1000), "1000")
        assertEquals("mil e um", fmt.format(1001), "1001")
        assertEquals("mil e dois", fmt.format(1002), "1002")
        assertEquals("mil novecentos e noventa e oito", fmt.format(1998), "1998")
        assertEquals("mil novecentos e noventa e nove", fmt.format(1999), "1999")
        assertEquals("dois mil", fmt.format(2000), "2000")
        assertEquals("dois mil e um", fmt.format(2001), "2001")
        assertEquals("dois mil e dois", fmt.format(2002), "2002")
        assertEquals("nove mil novecentos e noventa e oito", fmt.format(9998), "9998")
        assertEquals("nove mil novecentos e noventa e nove", fmt.format(9999), "9999")
        assertEquals("dez mil", fmt.format(10000), "10000")
        assertEquals("dez mil e um", fmt.format(10001), "10001")
        assertEquals("dez mil e dois", fmt.format(10002), "10002")
        assertEquals("cem mil", fmt.format(100000), "100000")
        assertEquals("cem mil e um", fmt.format(100001), "100001")
        assertEquals("cem mil e dois", fmt.format(100002), "100002")
        assertEquals("duzentos mil", fmt.format(200000), "200000")
        assertEquals("duzentos mil e um", fmt.format(200001), "200001")
        assertEquals("duzentos mil e dois", fmt.format(200002), "200002")
        assertEquals("um milhão", fmt.format(1000000), "1000000")
        assertEquals("um milhão e um", fmt.format(1000001), "1000001")
        assertEquals("um milhão e dois", fmt.format(1000002), "1000002")
        assertEquals("dois milhões", fmt.format(2000000), "2000000")
        assertEquals("dois milhões e um", fmt.format(2000001), "2000001")
        assertEquals("dois milhões e dois", fmt.format(2000002), "2000002")
        assertEquals("dez milhões", fmt.format(10000000), "10000000")
        assertEquals("dez milhões e um", fmt.format(10000001), "10000001")
        assertEquals("dez milhões e dois", fmt.format(10000002), "10000002")
        assertEquals("vinte milhões", fmt.format(20000000), "20000000")
        assertEquals("vinte milhões e um", fmt.format(20000001), "20000001")
        assertEquals("vinte milhões e dois", fmt.format(20000002), "20000002")
        assertEquals("cem milhões", fmt.format(100000000), "100000000")
        assertEquals("cem milhões e um", fmt.format(100000001), "100000001")
        assertEquals("cem milhões e dois", fmt.format(100000002), "100000002")
        assertEquals("duzentos milhões", fmt.format(200000000), "200000000")
        assertEquals("duzentos milhões e um", fmt.format(200000001), "200000001")
        assertEquals("duzentos milhões e dois", fmt.format(200000002), "200000002")
        assertEquals("um bilhão", fmt.format(1000000000), "1000000000")
        assertEquals("um bilhão e um", fmt.format(1000000001), "1000000001")
        assertEquals("um bilhão e dois", fmt.format(1000000002), "1000000002")
        assertEquals("dois bilhões", fmt.format(2000000000), "2000000000")
        assertEquals("dois bilhões e um", fmt.format(2000000001), "2000000001")
        assertEquals("dois bilhões e dois", fmt.format(2000000002), "2000000002")
    }
}
